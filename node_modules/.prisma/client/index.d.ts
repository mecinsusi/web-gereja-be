
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserHistory
 * 
 */
export type UserHistory = $Result.DefaultSelection<Prisma.$UserHistoryPayload>
/**
 * Model ChurchIncome
 * 
 */
export type ChurchIncome = $Result.DefaultSelection<Prisma.$ChurchIncomePayload>
/**
 * Model ChurchIncomeHistory
 * 
 */
export type ChurchIncomeHistory = $Result.DefaultSelection<Prisma.$ChurchIncomeHistoryPayload>
/**
 * Model ChurchIncomeCode
 * 
 */
export type ChurchIncomeCode = $Result.DefaultSelection<Prisma.$ChurchIncomeCodePayload>
/**
 * Model ChurchSpending
 * 
 */
export type ChurchSpending = $Result.DefaultSelection<Prisma.$ChurchSpendingPayload>
/**
 * Model ChurchSpendingHistory
 * 
 */
export type ChurchSpendingHistory = $Result.DefaultSelection<Prisma.$ChurchSpendingHistoryPayload>
/**
 * Model ChurchSpendingCode
 * 
 */
export type ChurchSpendingCode = $Result.DefaultSelection<Prisma.$ChurchSpendingCodePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Type: {
  CHURCH: 'CHURCH',
  STORE: 'STORE',
  FARM: 'FARM'
};

export type Type = (typeof Type)[keyof typeof Type]

}

export type Type = $Enums.Type

export const Type: typeof $Enums.Type

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userHistory`: Exposes CRUD operations for the **UserHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserHistories
    * const userHistories = await prisma.userHistory.findMany()
    * ```
    */
  get userHistory(): Prisma.UserHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchIncome`: Exposes CRUD operations for the **ChurchIncome** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchIncomes
    * const churchIncomes = await prisma.churchIncome.findMany()
    * ```
    */
  get churchIncome(): Prisma.ChurchIncomeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchIncomeHistory`: Exposes CRUD operations for the **ChurchIncomeHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchIncomeHistories
    * const churchIncomeHistories = await prisma.churchIncomeHistory.findMany()
    * ```
    */
  get churchIncomeHistory(): Prisma.ChurchIncomeHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchIncomeCode`: Exposes CRUD operations for the **ChurchIncomeCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchIncomeCodes
    * const churchIncomeCodes = await prisma.churchIncomeCode.findMany()
    * ```
    */
  get churchIncomeCode(): Prisma.ChurchIncomeCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchSpending`: Exposes CRUD operations for the **ChurchSpending** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchSpendings
    * const churchSpendings = await prisma.churchSpending.findMany()
    * ```
    */
  get churchSpending(): Prisma.ChurchSpendingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchSpendingHistory`: Exposes CRUD operations for the **ChurchSpendingHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchSpendingHistories
    * const churchSpendingHistories = await prisma.churchSpendingHistory.findMany()
    * ```
    */
  get churchSpendingHistory(): Prisma.ChurchSpendingHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchSpendingCode`: Exposes CRUD operations for the **ChurchSpendingCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchSpendingCodes
    * const churchSpendingCodes = await prisma.churchSpendingCode.findMany()
    * ```
    */
  get churchSpendingCode(): Prisma.ChurchSpendingCodeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserHistory: 'UserHistory',
    ChurchIncome: 'ChurchIncome',
    ChurchIncomeHistory: 'ChurchIncomeHistory',
    ChurchIncomeCode: 'ChurchIncomeCode',
    ChurchSpending: 'ChurchSpending',
    ChurchSpendingHistory: 'ChurchSpendingHistory',
    ChurchSpendingCode: 'ChurchSpendingCode'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userHistory" | "churchIncome" | "churchIncomeHistory" | "churchIncomeCode" | "churchSpending" | "churchSpendingHistory" | "churchSpendingCode"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserHistory: {
        payload: Prisma.$UserHistoryPayload<ExtArgs>
        fields: Prisma.UserHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>
          }
          findFirst: {
            args: Prisma.UserHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>
          }
          findMany: {
            args: Prisma.UserHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>[]
          }
          create: {
            args: Prisma.UserHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>
          }
          createMany: {
            args: Prisma.UserHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>[]
          }
          delete: {
            args: Prisma.UserHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>
          }
          update: {
            args: Prisma.UserHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>
          }
          deleteMany: {
            args: Prisma.UserHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>[]
          }
          upsert: {
            args: Prisma.UserHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHistoryPayload>
          }
          aggregate: {
            args: Prisma.UserHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserHistory>
          }
          groupBy: {
            args: Prisma.UserHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<UserHistoryCountAggregateOutputType> | number
          }
        }
      }
      ChurchIncome: {
        payload: Prisma.$ChurchIncomePayload<ExtArgs>
        fields: Prisma.ChurchIncomeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchIncomeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchIncomeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>
          }
          findFirst: {
            args: Prisma.ChurchIncomeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchIncomeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>
          }
          findMany: {
            args: Prisma.ChurchIncomeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>[]
          }
          create: {
            args: Prisma.ChurchIncomeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>
          }
          createMany: {
            args: Prisma.ChurchIncomeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchIncomeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>[]
          }
          delete: {
            args: Prisma.ChurchIncomeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>
          }
          update: {
            args: Prisma.ChurchIncomeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>
          }
          deleteMany: {
            args: Prisma.ChurchIncomeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchIncomeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchIncomeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>[]
          }
          upsert: {
            args: Prisma.ChurchIncomeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomePayload>
          }
          aggregate: {
            args: Prisma.ChurchIncomeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchIncome>
          }
          groupBy: {
            args: Prisma.ChurchIncomeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchIncomeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchIncomeCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchIncomeCountAggregateOutputType> | number
          }
        }
      }
      ChurchIncomeHistory: {
        payload: Prisma.$ChurchIncomeHistoryPayload<ExtArgs>
        fields: Prisma.ChurchIncomeHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchIncomeHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchIncomeHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>
          }
          findFirst: {
            args: Prisma.ChurchIncomeHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchIncomeHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>
          }
          findMany: {
            args: Prisma.ChurchIncomeHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>[]
          }
          create: {
            args: Prisma.ChurchIncomeHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>
          }
          createMany: {
            args: Prisma.ChurchIncomeHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchIncomeHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>[]
          }
          delete: {
            args: Prisma.ChurchIncomeHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>
          }
          update: {
            args: Prisma.ChurchIncomeHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ChurchIncomeHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchIncomeHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchIncomeHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ChurchIncomeHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeHistoryPayload>
          }
          aggregate: {
            args: Prisma.ChurchIncomeHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchIncomeHistory>
          }
          groupBy: {
            args: Prisma.ChurchIncomeHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchIncomeHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchIncomeHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchIncomeHistoryCountAggregateOutputType> | number
          }
        }
      }
      ChurchIncomeCode: {
        payload: Prisma.$ChurchIncomeCodePayload<ExtArgs>
        fields: Prisma.ChurchIncomeCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchIncomeCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchIncomeCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>
          }
          findFirst: {
            args: Prisma.ChurchIncomeCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchIncomeCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>
          }
          findMany: {
            args: Prisma.ChurchIncomeCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>[]
          }
          create: {
            args: Prisma.ChurchIncomeCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>
          }
          createMany: {
            args: Prisma.ChurchIncomeCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchIncomeCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>[]
          }
          delete: {
            args: Prisma.ChurchIncomeCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>
          }
          update: {
            args: Prisma.ChurchIncomeCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>
          }
          deleteMany: {
            args: Prisma.ChurchIncomeCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchIncomeCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchIncomeCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>[]
          }
          upsert: {
            args: Prisma.ChurchIncomeCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchIncomeCodePayload>
          }
          aggregate: {
            args: Prisma.ChurchIncomeCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchIncomeCode>
          }
          groupBy: {
            args: Prisma.ChurchIncomeCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchIncomeCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchIncomeCodeCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchIncomeCodeCountAggregateOutputType> | number
          }
        }
      }
      ChurchSpending: {
        payload: Prisma.$ChurchSpendingPayload<ExtArgs>
        fields: Prisma.ChurchSpendingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchSpendingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchSpendingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>
          }
          findFirst: {
            args: Prisma.ChurchSpendingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchSpendingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>
          }
          findMany: {
            args: Prisma.ChurchSpendingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>[]
          }
          create: {
            args: Prisma.ChurchSpendingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>
          }
          createMany: {
            args: Prisma.ChurchSpendingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchSpendingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>[]
          }
          delete: {
            args: Prisma.ChurchSpendingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>
          }
          update: {
            args: Prisma.ChurchSpendingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>
          }
          deleteMany: {
            args: Prisma.ChurchSpendingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchSpendingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchSpendingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>[]
          }
          upsert: {
            args: Prisma.ChurchSpendingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingPayload>
          }
          aggregate: {
            args: Prisma.ChurchSpendingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchSpending>
          }
          groupBy: {
            args: Prisma.ChurchSpendingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchSpendingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchSpendingCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchSpendingCountAggregateOutputType> | number
          }
        }
      }
      ChurchSpendingHistory: {
        payload: Prisma.$ChurchSpendingHistoryPayload<ExtArgs>
        fields: Prisma.ChurchSpendingHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchSpendingHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchSpendingHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>
          }
          findFirst: {
            args: Prisma.ChurchSpendingHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchSpendingHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>
          }
          findMany: {
            args: Prisma.ChurchSpendingHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>[]
          }
          create: {
            args: Prisma.ChurchSpendingHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>
          }
          createMany: {
            args: Prisma.ChurchSpendingHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchSpendingHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>[]
          }
          delete: {
            args: Prisma.ChurchSpendingHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>
          }
          update: {
            args: Prisma.ChurchSpendingHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ChurchSpendingHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchSpendingHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchSpendingHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ChurchSpendingHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingHistoryPayload>
          }
          aggregate: {
            args: Prisma.ChurchSpendingHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchSpendingHistory>
          }
          groupBy: {
            args: Prisma.ChurchSpendingHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchSpendingHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchSpendingHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchSpendingHistoryCountAggregateOutputType> | number
          }
        }
      }
      ChurchSpendingCode: {
        payload: Prisma.$ChurchSpendingCodePayload<ExtArgs>
        fields: Prisma.ChurchSpendingCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchSpendingCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchSpendingCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>
          }
          findFirst: {
            args: Prisma.ChurchSpendingCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchSpendingCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>
          }
          findMany: {
            args: Prisma.ChurchSpendingCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>[]
          }
          create: {
            args: Prisma.ChurchSpendingCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>
          }
          createMany: {
            args: Prisma.ChurchSpendingCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchSpendingCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>[]
          }
          delete: {
            args: Prisma.ChurchSpendingCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>
          }
          update: {
            args: Prisma.ChurchSpendingCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>
          }
          deleteMany: {
            args: Prisma.ChurchSpendingCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchSpendingCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchSpendingCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>[]
          }
          upsert: {
            args: Prisma.ChurchSpendingCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchSpendingCodePayload>
          }
          aggregate: {
            args: Prisma.ChurchSpendingCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchSpendingCode>
          }
          groupBy: {
            args: Prisma.ChurchSpendingCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchSpendingCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchSpendingCodeCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchSpendingCodeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userHistory?: UserHistoryOmit
    churchIncome?: ChurchIncomeOmit
    churchIncomeHistory?: ChurchIncomeHistoryOmit
    churchIncomeCode?: ChurchIncomeCodeOmit
    churchSpending?: ChurchSpendingOmit
    churchSpendingHistory?: ChurchSpendingHistoryOmit
    churchSpendingCode?: ChurchSpendingCodeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    selfCreatedByRel: number
    selfUpdatedByRel: number
    churchIncomeCreateByRel: number
    churchIncomeUpdateByRel: number
    churchIncomeCodeCreateByRel: number
    churchIncomeCodeUpdateByRel: number
    churchSpendingCreateByRel: number
    churchSpendingUpdateByRel: number
    churchSpendingCodeCreateByRel: number
    churchSpendingCodeUpdateByRel: number
    userHistoryCreatedByRel: number
    userHistoryUpdatedByRel: number
    userHistoryIdRel: number
    churchIncomeHistoryCreateByRel: number
    churchIncomeHistoryUpdateByRel: number
    churchSpendingHistoryCreateByRel: number
    churchSpendingHistoryUpdateByRel: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selfCreatedByRel?: boolean | UserCountOutputTypeCountSelfCreatedByRelArgs
    selfUpdatedByRel?: boolean | UserCountOutputTypeCountSelfUpdatedByRelArgs
    churchIncomeCreateByRel?: boolean | UserCountOutputTypeCountChurchIncomeCreateByRelArgs
    churchIncomeUpdateByRel?: boolean | UserCountOutputTypeCountChurchIncomeUpdateByRelArgs
    churchIncomeCodeCreateByRel?: boolean | UserCountOutputTypeCountChurchIncomeCodeCreateByRelArgs
    churchIncomeCodeUpdateByRel?: boolean | UserCountOutputTypeCountChurchIncomeCodeUpdateByRelArgs
    churchSpendingCreateByRel?: boolean | UserCountOutputTypeCountChurchSpendingCreateByRelArgs
    churchSpendingUpdateByRel?: boolean | UserCountOutputTypeCountChurchSpendingUpdateByRelArgs
    churchSpendingCodeCreateByRel?: boolean | UserCountOutputTypeCountChurchSpendingCodeCreateByRelArgs
    churchSpendingCodeUpdateByRel?: boolean | UserCountOutputTypeCountChurchSpendingCodeUpdateByRelArgs
    userHistoryCreatedByRel?: boolean | UserCountOutputTypeCountUserHistoryCreatedByRelArgs
    userHistoryUpdatedByRel?: boolean | UserCountOutputTypeCountUserHistoryUpdatedByRelArgs
    userHistoryIdRel?: boolean | UserCountOutputTypeCountUserHistoryIdRelArgs
    churchIncomeHistoryCreateByRel?: boolean | UserCountOutputTypeCountChurchIncomeHistoryCreateByRelArgs
    churchIncomeHistoryUpdateByRel?: boolean | UserCountOutputTypeCountChurchIncomeHistoryUpdateByRelArgs
    churchSpendingHistoryCreateByRel?: boolean | UserCountOutputTypeCountChurchSpendingHistoryCreateByRelArgs
    churchSpendingHistoryUpdateByRel?: boolean | UserCountOutputTypeCountChurchSpendingHistoryUpdateByRelArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSelfCreatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSelfUpdatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchIncomeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchIncomeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchIncomeCodeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeCodeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchIncomeCodeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeCodeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchSpendingCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchSpendingUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchSpendingCodeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingCodeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchSpendingCodeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingCodeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserHistoryCreatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserHistoryUpdatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserHistoryIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchIncomeHistoryCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchIncomeHistoryUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchSpendingHistoryCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchSpendingHistoryUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingHistoryWhereInput
  }


  /**
   * Count Type ChurchIncomeCodeCountOutputType
   */

  export type ChurchIncomeCodeCountOutputType = {
    churchIncomeCodeIdRel: number
    churchIncomeCodeHistoryIdRel: number
  }

  export type ChurchIncomeCodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCodeCountOutputTypeCountChurchIncomeCodeIdRelArgs
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCodeCountOutputTypeCountChurchIncomeCodeHistoryIdRelArgs
  }

  // Custom InputTypes
  /**
   * ChurchIncomeCodeCountOutputType without action
   */
  export type ChurchIncomeCodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCodeCountOutputType
     */
    select?: ChurchIncomeCodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChurchIncomeCodeCountOutputType without action
   */
  export type ChurchIncomeCodeCountOutputTypeCountChurchIncomeCodeIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeWhereInput
  }

  /**
   * ChurchIncomeCodeCountOutputType without action
   */
  export type ChurchIncomeCodeCountOutputTypeCountChurchIncomeCodeHistoryIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeHistoryWhereInput
  }


  /**
   * Count Type ChurchSpendingCodeCountOutputType
   */

  export type ChurchSpendingCodeCountOutputType = {
    churchSpendingCodeIdRel: number
    churchSpendingCodeHistoryIdRel: number
  }

  export type ChurchSpendingCodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCodeCountOutputTypeCountChurchSpendingCodeIdRelArgs
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCodeCountOutputTypeCountChurchSpendingCodeHistoryIdRelArgs
  }

  // Custom InputTypes
  /**
   * ChurchSpendingCodeCountOutputType without action
   */
  export type ChurchSpendingCodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCodeCountOutputType
     */
    select?: ChurchSpendingCodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChurchSpendingCodeCountOutputType without action
   */
  export type ChurchSpendingCodeCountOutputTypeCountChurchSpendingCodeIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingWhereInput
  }

  /**
   * ChurchSpendingCodeCountOutputType without action
   */
  export type ChurchSpendingCodeCountOutputTypeCountChurchSpendingCodeHistoryIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    createBy: number | null
    updatedBy: number | null
  }

  export type UserSumAggregateOutputType = {
    id: bigint | null
    createBy: bigint | null
    updatedBy: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: bigint | null
    userName: string | null
    fullName: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    address: string | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type UserMaxAggregateOutputType = {
    id: bigint | null
    userName: string | null
    fullName: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    address: string | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    userName: number
    fullName: number
    email: number
    password: number
    phoneNumber: number
    address: number
    deleted: number
    createAt: number
    createBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    createBy?: true
    updatedBy?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    createBy?: true
    updatedBy?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    userName?: true
    fullName?: true
    email?: true
    password?: true
    phoneNumber?: true
    address?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    userName?: true
    fullName?: true
    email?: true
    password?: true
    phoneNumber?: true
    address?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    userName?: true
    fullName?: true
    email?: true
    password?: true
    phoneNumber?: true
    address?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: bigint
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted: boolean
    createAt: Date
    createBy: bigint | null
    updatedAt: Date
    updatedBy: bigint | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    address?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    createdByRel?: boolean | User$createdByRelArgs<ExtArgs>
    selfCreatedByRel?: boolean | User$selfCreatedByRelArgs<ExtArgs>
    updatedByRel?: boolean | User$updatedByRelArgs<ExtArgs>
    selfUpdatedByRel?: boolean | User$selfUpdatedByRelArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | User$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | User$churchIncomeUpdateByRelArgs<ExtArgs>
    churchIncomeCodeCreateByRel?: boolean | User$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | User$churchIncomeCodeUpdateByRelArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | User$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | User$churchSpendingUpdateByRelArgs<ExtArgs>
    churchSpendingCodeCreateByRel?: boolean | User$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | User$churchSpendingCodeUpdateByRelArgs<ExtArgs>
    userHistoryCreatedByRel?: boolean | User$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | User$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | User$userHistoryIdRelArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | User$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | User$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | User$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | User$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    address?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    createdByRel?: boolean | User$createdByRelArgs<ExtArgs>
    updatedByRel?: boolean | User$updatedByRelArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    address?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    createdByRel?: boolean | User$createdByRelArgs<ExtArgs>
    updatedByRel?: boolean | User$updatedByRelArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    userName?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    address?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userName" | "fullName" | "email" | "password" | "phoneNumber" | "address" | "deleted" | "createAt" | "createBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByRel?: boolean | User$createdByRelArgs<ExtArgs>
    selfCreatedByRel?: boolean | User$selfCreatedByRelArgs<ExtArgs>
    updatedByRel?: boolean | User$updatedByRelArgs<ExtArgs>
    selfUpdatedByRel?: boolean | User$selfUpdatedByRelArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | User$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | User$churchIncomeUpdateByRelArgs<ExtArgs>
    churchIncomeCodeCreateByRel?: boolean | User$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | User$churchIncomeCodeUpdateByRelArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | User$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | User$churchSpendingUpdateByRelArgs<ExtArgs>
    churchSpendingCodeCreateByRel?: boolean | User$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | User$churchSpendingCodeUpdateByRelArgs<ExtArgs>
    userHistoryCreatedByRel?: boolean | User$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | User$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | User$userHistoryIdRelArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | User$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | User$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | User$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | User$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByRel?: boolean | User$createdByRelArgs<ExtArgs>
    updatedByRel?: boolean | User$updatedByRelArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByRel?: boolean | User$createdByRelArgs<ExtArgs>
    updatedByRel?: boolean | User$updatedByRelArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdByRel: Prisma.$UserPayload<ExtArgs> | null
      selfCreatedByRel: Prisma.$UserPayload<ExtArgs>[]
      updatedByRel: Prisma.$UserPayload<ExtArgs> | null
      selfUpdatedByRel: Prisma.$UserPayload<ExtArgs>[]
      churchIncomeCreateByRel: Prisma.$ChurchIncomePayload<ExtArgs>[]
      churchIncomeUpdateByRel: Prisma.$ChurchIncomePayload<ExtArgs>[]
      churchIncomeCodeCreateByRel: Prisma.$ChurchIncomeCodePayload<ExtArgs>[]
      churchIncomeCodeUpdateByRel: Prisma.$ChurchIncomeCodePayload<ExtArgs>[]
      churchSpendingCreateByRel: Prisma.$ChurchSpendingPayload<ExtArgs>[]
      churchSpendingUpdateByRel: Prisma.$ChurchSpendingPayload<ExtArgs>[]
      churchSpendingCodeCreateByRel: Prisma.$ChurchSpendingCodePayload<ExtArgs>[]
      churchSpendingCodeUpdateByRel: Prisma.$ChurchSpendingCodePayload<ExtArgs>[]
      userHistoryCreatedByRel: Prisma.$UserHistoryPayload<ExtArgs>[]
      userHistoryUpdatedByRel: Prisma.$UserHistoryPayload<ExtArgs>[]
      userHistoryIdRel: Prisma.$UserHistoryPayload<ExtArgs>[]
      churchIncomeHistoryCreateByRel: Prisma.$ChurchIncomeHistoryPayload<ExtArgs>[]
      churchIncomeHistoryUpdateByRel: Prisma.$ChurchIncomeHistoryPayload<ExtArgs>[]
      churchSpendingHistoryCreateByRel: Prisma.$ChurchSpendingHistoryPayload<ExtArgs>[]
      churchSpendingHistoryUpdateByRel: Prisma.$ChurchSpendingHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userName: string
      fullName: string
      email: string
      password: string
      phoneNumber: string
      address: string
      deleted: boolean
      createAt: Date
      createBy: bigint | null
      updatedAt: Date
      updatedBy: bigint | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdByRel<T extends User$createdByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$createdByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    selfCreatedByRel<T extends User$selfCreatedByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$selfCreatedByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    updatedByRel<T extends User$updatedByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    selfUpdatedByRel<T extends User$selfUpdatedByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$selfUpdatedByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchIncomeCreateByRel<T extends User$churchIncomeCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchIncomeCreateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchIncomeUpdateByRel<T extends User$churchIncomeUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchIncomeUpdateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchIncomeCodeCreateByRel<T extends User$churchIncomeCodeCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchIncomeCodeCreateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchIncomeCodeUpdateByRel<T extends User$churchIncomeCodeUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchIncomeCodeUpdateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchSpendingCreateByRel<T extends User$churchSpendingCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchSpendingCreateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchSpendingUpdateByRel<T extends User$churchSpendingUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchSpendingUpdateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchSpendingCodeCreateByRel<T extends User$churchSpendingCodeCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchSpendingCodeCreateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchSpendingCodeUpdateByRel<T extends User$churchSpendingCodeUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchSpendingCodeUpdateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    userHistoryCreatedByRel<T extends User$userHistoryCreatedByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$userHistoryCreatedByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    userHistoryUpdatedByRel<T extends User$userHistoryUpdatedByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$userHistoryUpdatedByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    userHistoryIdRel<T extends User$userHistoryIdRelArgs<ExtArgs> = {}>(args?: Subset<T, User$userHistoryIdRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchIncomeHistoryCreateByRel<T extends User$churchIncomeHistoryCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchIncomeHistoryCreateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchIncomeHistoryUpdateByRel<T extends User$churchIncomeHistoryUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchIncomeHistoryUpdateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchSpendingHistoryCreateByRel<T extends User$churchSpendingHistoryCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchSpendingHistoryCreateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchSpendingHistoryUpdateByRel<T extends User$churchSpendingHistoryUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, User$churchSpendingHistoryUpdateByRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'BigInt'>
    readonly userName: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly deleted: FieldRef<"User", 'Boolean'>
    readonly createAt: FieldRef<"User", 'DateTime'>
    readonly createBy: FieldRef<"User", 'BigInt'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly updatedBy: FieldRef<"User", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.createdByRel
   */
  export type User$createdByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.selfCreatedByRel
   */
  export type User$selfCreatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.updatedByRel
   */
  export type User$updatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.selfUpdatedByRel
   */
  export type User$selfUpdatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.churchIncomeCreateByRel
   */
  export type User$churchIncomeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    where?: ChurchIncomeWhereInput
    orderBy?: ChurchIncomeOrderByWithRelationInput | ChurchIncomeOrderByWithRelationInput[]
    cursor?: ChurchIncomeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeScalarFieldEnum | ChurchIncomeScalarFieldEnum[]
  }

  /**
   * User.churchIncomeUpdateByRel
   */
  export type User$churchIncomeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    where?: ChurchIncomeWhereInput
    orderBy?: ChurchIncomeOrderByWithRelationInput | ChurchIncomeOrderByWithRelationInput[]
    cursor?: ChurchIncomeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeScalarFieldEnum | ChurchIncomeScalarFieldEnum[]
  }

  /**
   * User.churchIncomeCodeCreateByRel
   */
  export type User$churchIncomeCodeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    where?: ChurchIncomeCodeWhereInput
    orderBy?: ChurchIncomeCodeOrderByWithRelationInput | ChurchIncomeCodeOrderByWithRelationInput[]
    cursor?: ChurchIncomeCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeCodeScalarFieldEnum | ChurchIncomeCodeScalarFieldEnum[]
  }

  /**
   * User.churchIncomeCodeUpdateByRel
   */
  export type User$churchIncomeCodeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    where?: ChurchIncomeCodeWhereInput
    orderBy?: ChurchIncomeCodeOrderByWithRelationInput | ChurchIncomeCodeOrderByWithRelationInput[]
    cursor?: ChurchIncomeCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeCodeScalarFieldEnum | ChurchIncomeCodeScalarFieldEnum[]
  }

  /**
   * User.churchSpendingCreateByRel
   */
  export type User$churchSpendingCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    where?: ChurchSpendingWhereInput
    orderBy?: ChurchSpendingOrderByWithRelationInput | ChurchSpendingOrderByWithRelationInput[]
    cursor?: ChurchSpendingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingScalarFieldEnum | ChurchSpendingScalarFieldEnum[]
  }

  /**
   * User.churchSpendingUpdateByRel
   */
  export type User$churchSpendingUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    where?: ChurchSpendingWhereInput
    orderBy?: ChurchSpendingOrderByWithRelationInput | ChurchSpendingOrderByWithRelationInput[]
    cursor?: ChurchSpendingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingScalarFieldEnum | ChurchSpendingScalarFieldEnum[]
  }

  /**
   * User.churchSpendingCodeCreateByRel
   */
  export type User$churchSpendingCodeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    where?: ChurchSpendingCodeWhereInput
    orderBy?: ChurchSpendingCodeOrderByWithRelationInput | ChurchSpendingCodeOrderByWithRelationInput[]
    cursor?: ChurchSpendingCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingCodeScalarFieldEnum | ChurchSpendingCodeScalarFieldEnum[]
  }

  /**
   * User.churchSpendingCodeUpdateByRel
   */
  export type User$churchSpendingCodeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    where?: ChurchSpendingCodeWhereInput
    orderBy?: ChurchSpendingCodeOrderByWithRelationInput | ChurchSpendingCodeOrderByWithRelationInput[]
    cursor?: ChurchSpendingCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingCodeScalarFieldEnum | ChurchSpendingCodeScalarFieldEnum[]
  }

  /**
   * User.userHistoryCreatedByRel
   */
  export type User$userHistoryCreatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    where?: UserHistoryWhereInput
    orderBy?: UserHistoryOrderByWithRelationInput | UserHistoryOrderByWithRelationInput[]
    cursor?: UserHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserHistoryScalarFieldEnum | UserHistoryScalarFieldEnum[]
  }

  /**
   * User.userHistoryUpdatedByRel
   */
  export type User$userHistoryUpdatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    where?: UserHistoryWhereInput
    orderBy?: UserHistoryOrderByWithRelationInput | UserHistoryOrderByWithRelationInput[]
    cursor?: UserHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserHistoryScalarFieldEnum | UserHistoryScalarFieldEnum[]
  }

  /**
   * User.userHistoryIdRel
   */
  export type User$userHistoryIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    where?: UserHistoryWhereInput
    orderBy?: UserHistoryOrderByWithRelationInput | UserHistoryOrderByWithRelationInput[]
    cursor?: UserHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserHistoryScalarFieldEnum | UserHistoryScalarFieldEnum[]
  }

  /**
   * User.churchIncomeHistoryCreateByRel
   */
  export type User$churchIncomeHistoryCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    where?: ChurchIncomeHistoryWhereInput
    orderBy?: ChurchIncomeHistoryOrderByWithRelationInput | ChurchIncomeHistoryOrderByWithRelationInput[]
    cursor?: ChurchIncomeHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeHistoryScalarFieldEnum | ChurchIncomeHistoryScalarFieldEnum[]
  }

  /**
   * User.churchIncomeHistoryUpdateByRel
   */
  export type User$churchIncomeHistoryUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    where?: ChurchIncomeHistoryWhereInput
    orderBy?: ChurchIncomeHistoryOrderByWithRelationInput | ChurchIncomeHistoryOrderByWithRelationInput[]
    cursor?: ChurchIncomeHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeHistoryScalarFieldEnum | ChurchIncomeHistoryScalarFieldEnum[]
  }

  /**
   * User.churchSpendingHistoryCreateByRel
   */
  export type User$churchSpendingHistoryCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    where?: ChurchSpendingHistoryWhereInput
    orderBy?: ChurchSpendingHistoryOrderByWithRelationInput | ChurchSpendingHistoryOrderByWithRelationInput[]
    cursor?: ChurchSpendingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingHistoryScalarFieldEnum | ChurchSpendingHistoryScalarFieldEnum[]
  }

  /**
   * User.churchSpendingHistoryUpdateByRel
   */
  export type User$churchSpendingHistoryUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    where?: ChurchSpendingHistoryWhereInput
    orderBy?: ChurchSpendingHistoryOrderByWithRelationInput | ChurchSpendingHistoryOrderByWithRelationInput[]
    cursor?: ChurchSpendingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingHistoryScalarFieldEnum | ChurchSpendingHistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserHistory
   */

  export type AggregateUserHistory = {
    _count: UserHistoryCountAggregateOutputType | null
    _avg: UserHistoryAvgAggregateOutputType | null
    _sum: UserHistorySumAggregateOutputType | null
    _min: UserHistoryMinAggregateOutputType | null
    _max: UserHistoryMaxAggregateOutputType | null
  }

  export type UserHistoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type UserHistorySumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    createdBy: bigint | null
    updatedBy: bigint | null
  }

  export type UserHistoryMinAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    createdAt: Date | null
    createdBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
    deleted: boolean | null
  }

  export type UserHistoryMaxAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    createdAt: Date | null
    createdBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
    deleted: boolean | null
  }

  export type UserHistoryCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deleted: number
    oldData: number
    newData: number
    _all: number
  }


  export type UserHistoryAvgAggregateInputType = {
    id?: true
    userId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type UserHistorySumAggregateInputType = {
    id?: true
    userId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type UserHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deleted?: true
  }

  export type UserHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deleted?: true
  }

  export type UserHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deleted?: true
    oldData?: true
    newData?: true
    _all?: true
  }

  export type UserHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserHistory to aggregate.
     */
    where?: UserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHistories to fetch.
     */
    orderBy?: UserHistoryOrderByWithRelationInput | UserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserHistories
    **/
    _count?: true | UserHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserHistoryMaxAggregateInputType
  }

  export type GetUserHistoryAggregateType<T extends UserHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateUserHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserHistory[P]>
      : GetScalarType<T[P], AggregateUserHistory[P]>
  }




  export type UserHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserHistoryWhereInput
    orderBy?: UserHistoryOrderByWithAggregationInput | UserHistoryOrderByWithAggregationInput[]
    by: UserHistoryScalarFieldEnum[] | UserHistoryScalarFieldEnum
    having?: UserHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserHistoryCountAggregateInputType | true
    _avg?: UserHistoryAvgAggregateInputType
    _sum?: UserHistorySumAggregateInputType
    _min?: UserHistoryMinAggregateInputType
    _max?: UserHistoryMaxAggregateInputType
  }

  export type UserHistoryGroupByOutputType = {
    id: bigint
    userId: bigint
    createdAt: Date
    createdBy: bigint | null
    updatedAt: Date
    updatedBy: bigint | null
    deleted: boolean
    oldData: JsonValue
    newData: JsonValue
    _count: UserHistoryCountAggregateOutputType | null
    _avg: UserHistoryAvgAggregateOutputType | null
    _sum: UserHistorySumAggregateOutputType | null
    _min: UserHistoryMinAggregateOutputType | null
    _max: UserHistoryMaxAggregateOutputType | null
  }

  type GetUserHistoryGroupByPayload<T extends UserHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], UserHistoryGroupByOutputType[P]>
        }
      >
    >


  export type UserHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deleted?: boolean
    oldData?: boolean
    newData?: boolean
    userHistoryCreatedByRel?: boolean | UserHistory$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | UserHistory$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userHistory"]>

  export type UserHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deleted?: boolean
    oldData?: boolean
    newData?: boolean
    userHistoryCreatedByRel?: boolean | UserHistory$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | UserHistory$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userHistory"]>

  export type UserHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deleted?: boolean
    oldData?: boolean
    newData?: boolean
    userHistoryCreatedByRel?: boolean | UserHistory$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | UserHistory$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userHistory"]>

  export type UserHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deleted?: boolean
    oldData?: boolean
    newData?: boolean
  }

  export type UserHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deleted" | "oldData" | "newData", ExtArgs["result"]["userHistory"]>
  export type UserHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userHistoryCreatedByRel?: boolean | UserHistory$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | UserHistory$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userHistoryCreatedByRel?: boolean | UserHistory$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | UserHistory$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userHistoryCreatedByRel?: boolean | UserHistory$userHistoryCreatedByRelArgs<ExtArgs>
    userHistoryUpdatedByRel?: boolean | UserHistory$userHistoryUpdatedByRelArgs<ExtArgs>
    userHistoryIdRel?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserHistory"
    objects: {
      userHistoryCreatedByRel: Prisma.$UserPayload<ExtArgs> | null
      userHistoryUpdatedByRel: Prisma.$UserPayload<ExtArgs> | null
      userHistoryIdRel: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: bigint
      createdAt: Date
      createdBy: bigint | null
      updatedAt: Date
      updatedBy: bigint | null
      deleted: boolean
      oldData: Prisma.JsonValue
      newData: Prisma.JsonValue
    }, ExtArgs["result"]["userHistory"]>
    composites: {}
  }

  type UserHistoryGetPayload<S extends boolean | null | undefined | UserHistoryDefaultArgs> = $Result.GetResult<Prisma.$UserHistoryPayload, S>

  type UserHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserHistoryCountAggregateInputType | true
    }

  export interface UserHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserHistory'], meta: { name: 'UserHistory' } }
    /**
     * Find zero or one UserHistory that matches the filter.
     * @param {UserHistoryFindUniqueArgs} args - Arguments to find a UserHistory
     * @example
     * // Get one UserHistory
     * const userHistory = await prisma.userHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserHistoryFindUniqueArgs>(args: SelectSubset<T, UserHistoryFindUniqueArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserHistoryFindUniqueOrThrowArgs} args - Arguments to find a UserHistory
     * @example
     * // Get one UserHistory
     * const userHistory = await prisma.userHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, UserHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHistoryFindFirstArgs} args - Arguments to find a UserHistory
     * @example
     * // Get one UserHistory
     * const userHistory = await prisma.userHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserHistoryFindFirstArgs>(args?: SelectSubset<T, UserHistoryFindFirstArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHistoryFindFirstOrThrowArgs} args - Arguments to find a UserHistory
     * @example
     * // Get one UserHistory
     * const userHistory = await prisma.userHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, UserHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserHistories
     * const userHistories = await prisma.userHistory.findMany()
     * 
     * // Get first 10 UserHistories
     * const userHistories = await prisma.userHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userHistoryWithIdOnly = await prisma.userHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserHistoryFindManyArgs>(args?: SelectSubset<T, UserHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserHistory.
     * @param {UserHistoryCreateArgs} args - Arguments to create a UserHistory.
     * @example
     * // Create one UserHistory
     * const UserHistory = await prisma.userHistory.create({
     *   data: {
     *     // ... data to create a UserHistory
     *   }
     * })
     * 
     */
    create<T extends UserHistoryCreateArgs>(args: SelectSubset<T, UserHistoryCreateArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserHistories.
     * @param {UserHistoryCreateManyArgs} args - Arguments to create many UserHistories.
     * @example
     * // Create many UserHistories
     * const userHistory = await prisma.userHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserHistoryCreateManyArgs>(args?: SelectSubset<T, UserHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserHistories and returns the data saved in the database.
     * @param {UserHistoryCreateManyAndReturnArgs} args - Arguments to create many UserHistories.
     * @example
     * // Create many UserHistories
     * const userHistory = await prisma.userHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserHistories and only return the `id`
     * const userHistoryWithIdOnly = await prisma.userHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, UserHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a UserHistory.
     * @param {UserHistoryDeleteArgs} args - Arguments to delete one UserHistory.
     * @example
     * // Delete one UserHistory
     * const UserHistory = await prisma.userHistory.delete({
     *   where: {
     *     // ... filter to delete one UserHistory
     *   }
     * })
     * 
     */
    delete<T extends UserHistoryDeleteArgs>(args: SelectSubset<T, UserHistoryDeleteArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserHistory.
     * @param {UserHistoryUpdateArgs} args - Arguments to update one UserHistory.
     * @example
     * // Update one UserHistory
     * const userHistory = await prisma.userHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserHistoryUpdateArgs>(args: SelectSubset<T, UserHistoryUpdateArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserHistories.
     * @param {UserHistoryDeleteManyArgs} args - Arguments to filter UserHistories to delete.
     * @example
     * // Delete a few UserHistories
     * const { count } = await prisma.userHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserHistoryDeleteManyArgs>(args?: SelectSubset<T, UserHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserHistories
     * const userHistory = await prisma.userHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserHistoryUpdateManyArgs>(args: SelectSubset<T, UserHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserHistories and returns the data updated in the database.
     * @param {UserHistoryUpdateManyAndReturnArgs} args - Arguments to update many UserHistories.
     * @example
     * // Update many UserHistories
     * const userHistory = await prisma.userHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserHistories and only return the `id`
     * const userHistoryWithIdOnly = await prisma.userHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, UserHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one UserHistory.
     * @param {UserHistoryUpsertArgs} args - Arguments to update or create a UserHistory.
     * @example
     * // Update or create a UserHistory
     * const userHistory = await prisma.userHistory.upsert({
     *   create: {
     *     // ... data to create a UserHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserHistory we want to update
     *   }
     * })
     */
    upsert<T extends UserHistoryUpsertArgs>(args: SelectSubset<T, UserHistoryUpsertArgs<ExtArgs>>): Prisma__UserHistoryClient<$Result.GetResult<Prisma.$UserHistoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHistoryCountArgs} args - Arguments to filter UserHistories to count.
     * @example
     * // Count the number of UserHistories
     * const count = await prisma.userHistory.count({
     *   where: {
     *     // ... the filter for the UserHistories we want to count
     *   }
     * })
    **/
    count<T extends UserHistoryCountArgs>(
      args?: Subset<T, UserHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserHistoryAggregateArgs>(args: Subset<T, UserHistoryAggregateArgs>): Prisma.PrismaPromise<GetUserHistoryAggregateType<T>>

    /**
     * Group by UserHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserHistoryGroupByArgs['orderBy'] }
        : { orderBy?: UserHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserHistory model
   */
  readonly fields: UserHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userHistoryCreatedByRel<T extends UserHistory$userHistoryCreatedByRelArgs<ExtArgs> = {}>(args?: Subset<T, UserHistory$userHistoryCreatedByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    userHistoryUpdatedByRel<T extends UserHistory$userHistoryUpdatedByRelArgs<ExtArgs> = {}>(args?: Subset<T, UserHistory$userHistoryUpdatedByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    userHistoryIdRel<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserHistory model
   */ 
  interface UserHistoryFieldRefs {
    readonly id: FieldRef<"UserHistory", 'BigInt'>
    readonly userId: FieldRef<"UserHistory", 'BigInt'>
    readonly createdAt: FieldRef<"UserHistory", 'DateTime'>
    readonly createdBy: FieldRef<"UserHistory", 'BigInt'>
    readonly updatedAt: FieldRef<"UserHistory", 'DateTime'>
    readonly updatedBy: FieldRef<"UserHistory", 'BigInt'>
    readonly deleted: FieldRef<"UserHistory", 'Boolean'>
    readonly oldData: FieldRef<"UserHistory", 'Json'>
    readonly newData: FieldRef<"UserHistory", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * UserHistory findUnique
   */
  export type UserHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserHistory to fetch.
     */
    where: UserHistoryWhereUniqueInput
  }

  /**
   * UserHistory findUniqueOrThrow
   */
  export type UserHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserHistory to fetch.
     */
    where: UserHistoryWhereUniqueInput
  }

  /**
   * UserHistory findFirst
   */
  export type UserHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserHistory to fetch.
     */
    where?: UserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHistories to fetch.
     */
    orderBy?: UserHistoryOrderByWithRelationInput | UserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserHistories.
     */
    cursor?: UserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserHistories.
     */
    distinct?: UserHistoryScalarFieldEnum | UserHistoryScalarFieldEnum[]
  }

  /**
   * UserHistory findFirstOrThrow
   */
  export type UserHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserHistory to fetch.
     */
    where?: UserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHistories to fetch.
     */
    orderBy?: UserHistoryOrderByWithRelationInput | UserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserHistories.
     */
    cursor?: UserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserHistories.
     */
    distinct?: UserHistoryScalarFieldEnum | UserHistoryScalarFieldEnum[]
  }

  /**
   * UserHistory findMany
   */
  export type UserHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which UserHistories to fetch.
     */
    where?: UserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHistories to fetch.
     */
    orderBy?: UserHistoryOrderByWithRelationInput | UserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserHistories.
     */
    cursor?: UserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHistories.
     */
    skip?: number
    distinct?: UserHistoryScalarFieldEnum | UserHistoryScalarFieldEnum[]
  }

  /**
   * UserHistory create
   */
  export type UserHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a UserHistory.
     */
    data: XOR<UserHistoryCreateInput, UserHistoryUncheckedCreateInput>
  }

  /**
   * UserHistory createMany
   */
  export type UserHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserHistories.
     */
    data: UserHistoryCreateManyInput | UserHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserHistory createManyAndReturn
   */
  export type UserHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many UserHistories.
     */
    data: UserHistoryCreateManyInput | UserHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserHistory update
   */
  export type UserHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a UserHistory.
     */
    data: XOR<UserHistoryUpdateInput, UserHistoryUncheckedUpdateInput>
    /**
     * Choose, which UserHistory to update.
     */
    where: UserHistoryWhereUniqueInput
  }

  /**
   * UserHistory updateMany
   */
  export type UserHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserHistories.
     */
    data: XOR<UserHistoryUpdateManyMutationInput, UserHistoryUncheckedUpdateManyInput>
    /**
     * Filter which UserHistories to update
     */
    where?: UserHistoryWhereInput
    /**
     * Limit how many UserHistories to update.
     */
    limit?: number
  }

  /**
   * UserHistory updateManyAndReturn
   */
  export type UserHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * The data used to update UserHistories.
     */
    data: XOR<UserHistoryUpdateManyMutationInput, UserHistoryUncheckedUpdateManyInput>
    /**
     * Filter which UserHistories to update
     */
    where?: UserHistoryWhereInput
    /**
     * Limit how many UserHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserHistory upsert
   */
  export type UserHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the UserHistory to update in case it exists.
     */
    where: UserHistoryWhereUniqueInput
    /**
     * In case the UserHistory found by the `where` argument doesn't exist, create a new UserHistory with this data.
     */
    create: XOR<UserHistoryCreateInput, UserHistoryUncheckedCreateInput>
    /**
     * In case the UserHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserHistoryUpdateInput, UserHistoryUncheckedUpdateInput>
  }

  /**
   * UserHistory delete
   */
  export type UserHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
    /**
     * Filter which UserHistory to delete.
     */
    where: UserHistoryWhereUniqueInput
  }

  /**
   * UserHistory deleteMany
   */
  export type UserHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserHistories to delete
     */
    where?: UserHistoryWhereInput
    /**
     * Limit how many UserHistories to delete.
     */
    limit?: number
  }

  /**
   * UserHistory.userHistoryCreatedByRel
   */
  export type UserHistory$userHistoryCreatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserHistory.userHistoryUpdatedByRel
   */
  export type UserHistory$userHistoryUpdatedByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserHistory without action
   */
  export type UserHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHistory
     */
    select?: UserHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHistory
     */
    omit?: UserHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ChurchIncome
   */

  export type AggregateChurchIncome = {
    _count: ChurchIncomeCountAggregateOutputType | null
    _avg: ChurchIncomeAvgAggregateOutputType | null
    _sum: ChurchIncomeSumAggregateOutputType | null
    _min: ChurchIncomeMinAggregateOutputType | null
    _max: ChurchIncomeMaxAggregateOutputType | null
  }

  export type ChurchIncomeAvgAggregateOutputType = {
    id: number | null
    incomeCodeId: number | null
    funds: number | null
    createBy: number | null
    updatedBy: number | null
  }

  export type ChurchIncomeSumAggregateOutputType = {
    id: bigint | null
    incomeCodeId: bigint | null
    funds: bigint | null
    createBy: bigint | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeMinAggregateOutputType = {
    id: bigint | null
    incomeCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeMaxAggregateOutputType = {
    id: bigint | null
    incomeCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeCountAggregateOutputType = {
    id: number
    incomeCodeId: number
    detail: number
    funds: number
    date: number
    bill: number
    billNumber: number
    fundsType: number
    deleted: number
    createAt: number
    createBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ChurchIncomeAvgAggregateInputType = {
    id?: true
    incomeCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchIncomeSumAggregateInputType = {
    id?: true
    incomeCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchIncomeMinAggregateInputType = {
    id?: true
    incomeCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchIncomeMaxAggregateInputType = {
    id?: true
    incomeCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchIncomeCountAggregateInputType = {
    id?: true
    incomeCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ChurchIncomeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchIncome to aggregate.
     */
    where?: ChurchIncomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomes to fetch.
     */
    orderBy?: ChurchIncomeOrderByWithRelationInput | ChurchIncomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchIncomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchIncomes
    **/
    _count?: true | ChurchIncomeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChurchIncomeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChurchIncomeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchIncomeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchIncomeMaxAggregateInputType
  }

  export type GetChurchIncomeAggregateType<T extends ChurchIncomeAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchIncome]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchIncome[P]>
      : GetScalarType<T[P], AggregateChurchIncome[P]>
  }




  export type ChurchIncomeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeWhereInput
    orderBy?: ChurchIncomeOrderByWithAggregationInput | ChurchIncomeOrderByWithAggregationInput[]
    by: ChurchIncomeScalarFieldEnum[] | ChurchIncomeScalarFieldEnum
    having?: ChurchIncomeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchIncomeCountAggregateInputType | true
    _avg?: ChurchIncomeAvgAggregateInputType
    _sum?: ChurchIncomeSumAggregateInputType
    _min?: ChurchIncomeMinAggregateInputType
    _max?: ChurchIncomeMaxAggregateInputType
  }

  export type ChurchIncomeGroupByOutputType = {
    id: bigint
    incomeCodeId: bigint
    detail: string | null
    funds: bigint
    date: Date
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type
    deleted: boolean
    createAt: Date
    createBy: bigint | null
    updatedAt: Date
    updatedBy: bigint | null
    _count: ChurchIncomeCountAggregateOutputType | null
    _avg: ChurchIncomeAvgAggregateOutputType | null
    _sum: ChurchIncomeSumAggregateOutputType | null
    _min: ChurchIncomeMinAggregateOutputType | null
    _max: ChurchIncomeMaxAggregateOutputType | null
  }

  type GetChurchIncomeGroupByPayload<T extends ChurchIncomeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchIncomeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchIncomeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchIncomeGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchIncomeGroupByOutputType[P]>
        }
      >
    >


  export type ChurchIncomeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncome"]>

  export type ChurchIncomeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncome"]>

  export type ChurchIncomeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncome"]>

  export type ChurchIncomeSelectScalar = {
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ChurchIncomeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "incomeCodeId" | "detail" | "funds" | "date" | "bill" | "billNumber" | "fundsType" | "deleted" | "createAt" | "createBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["churchIncome"]>
  export type ChurchIncomeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs>
  }
  export type ChurchIncomeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs>
  }
  export type ChurchIncomeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeCreateByRel?: boolean | ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs>
    churchIncomeUpdateByRel?: boolean | ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs>
  }

  export type $ChurchIncomePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchIncome"
    objects: {
      churchIncomeCodeIdRel: Prisma.$ChurchIncomeCodePayload<ExtArgs>
      churchIncomeCreateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchIncomeUpdateByRel: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      incomeCodeId: bigint
      detail: string | null
      funds: bigint
      date: Date
      bill: string | null
      billNumber: string | null
      fundsType: $Enums.Type
      deleted: boolean
      createAt: Date
      createBy: bigint | null
      updatedAt: Date
      updatedBy: bigint | null
    }, ExtArgs["result"]["churchIncome"]>
    composites: {}
  }

  type ChurchIncomeGetPayload<S extends boolean | null | undefined | ChurchIncomeDefaultArgs> = $Result.GetResult<Prisma.$ChurchIncomePayload, S>

  type ChurchIncomeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchIncomeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchIncomeCountAggregateInputType | true
    }

  export interface ChurchIncomeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchIncome'], meta: { name: 'ChurchIncome' } }
    /**
     * Find zero or one ChurchIncome that matches the filter.
     * @param {ChurchIncomeFindUniqueArgs} args - Arguments to find a ChurchIncome
     * @example
     * // Get one ChurchIncome
     * const churchIncome = await prisma.churchIncome.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchIncomeFindUniqueArgs>(args: SelectSubset<T, ChurchIncomeFindUniqueArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ChurchIncome that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchIncomeFindUniqueOrThrowArgs} args - Arguments to find a ChurchIncome
     * @example
     * // Get one ChurchIncome
     * const churchIncome = await prisma.churchIncome.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchIncomeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchIncomeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchIncome that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeFindFirstArgs} args - Arguments to find a ChurchIncome
     * @example
     * // Get one ChurchIncome
     * const churchIncome = await prisma.churchIncome.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchIncomeFindFirstArgs>(args?: SelectSubset<T, ChurchIncomeFindFirstArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchIncome that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeFindFirstOrThrowArgs} args - Arguments to find a ChurchIncome
     * @example
     * // Get one ChurchIncome
     * const churchIncome = await prisma.churchIncome.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchIncomeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchIncomeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ChurchIncomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchIncomes
     * const churchIncomes = await prisma.churchIncome.findMany()
     * 
     * // Get first 10 ChurchIncomes
     * const churchIncomes = await prisma.churchIncome.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchIncomeWithIdOnly = await prisma.churchIncome.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchIncomeFindManyArgs>(args?: SelectSubset<T, ChurchIncomeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ChurchIncome.
     * @param {ChurchIncomeCreateArgs} args - Arguments to create a ChurchIncome.
     * @example
     * // Create one ChurchIncome
     * const ChurchIncome = await prisma.churchIncome.create({
     *   data: {
     *     // ... data to create a ChurchIncome
     *   }
     * })
     * 
     */
    create<T extends ChurchIncomeCreateArgs>(args: SelectSubset<T, ChurchIncomeCreateArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ChurchIncomes.
     * @param {ChurchIncomeCreateManyArgs} args - Arguments to create many ChurchIncomes.
     * @example
     * // Create many ChurchIncomes
     * const churchIncome = await prisma.churchIncome.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchIncomeCreateManyArgs>(args?: SelectSubset<T, ChurchIncomeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchIncomes and returns the data saved in the database.
     * @param {ChurchIncomeCreateManyAndReturnArgs} args - Arguments to create many ChurchIncomes.
     * @example
     * // Create many ChurchIncomes
     * const churchIncome = await prisma.churchIncome.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchIncomes and only return the `id`
     * const churchIncomeWithIdOnly = await prisma.churchIncome.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchIncomeCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchIncomeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ChurchIncome.
     * @param {ChurchIncomeDeleteArgs} args - Arguments to delete one ChurchIncome.
     * @example
     * // Delete one ChurchIncome
     * const ChurchIncome = await prisma.churchIncome.delete({
     *   where: {
     *     // ... filter to delete one ChurchIncome
     *   }
     * })
     * 
     */
    delete<T extends ChurchIncomeDeleteArgs>(args: SelectSubset<T, ChurchIncomeDeleteArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ChurchIncome.
     * @param {ChurchIncomeUpdateArgs} args - Arguments to update one ChurchIncome.
     * @example
     * // Update one ChurchIncome
     * const churchIncome = await prisma.churchIncome.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchIncomeUpdateArgs>(args: SelectSubset<T, ChurchIncomeUpdateArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ChurchIncomes.
     * @param {ChurchIncomeDeleteManyArgs} args - Arguments to filter ChurchIncomes to delete.
     * @example
     * // Delete a few ChurchIncomes
     * const { count } = await prisma.churchIncome.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchIncomeDeleteManyArgs>(args?: SelectSubset<T, ChurchIncomeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchIncomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchIncomes
     * const churchIncome = await prisma.churchIncome.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchIncomeUpdateManyArgs>(args: SelectSubset<T, ChurchIncomeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchIncomes and returns the data updated in the database.
     * @param {ChurchIncomeUpdateManyAndReturnArgs} args - Arguments to update many ChurchIncomes.
     * @example
     * // Update many ChurchIncomes
     * const churchIncome = await prisma.churchIncome.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchIncomes and only return the `id`
     * const churchIncomeWithIdOnly = await prisma.churchIncome.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchIncomeUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchIncomeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ChurchIncome.
     * @param {ChurchIncomeUpsertArgs} args - Arguments to update or create a ChurchIncome.
     * @example
     * // Update or create a ChurchIncome
     * const churchIncome = await prisma.churchIncome.upsert({
     *   create: {
     *     // ... data to create a ChurchIncome
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchIncome we want to update
     *   }
     * })
     */
    upsert<T extends ChurchIncomeUpsertArgs>(args: SelectSubset<T, ChurchIncomeUpsertArgs<ExtArgs>>): Prisma__ChurchIncomeClient<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ChurchIncomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCountArgs} args - Arguments to filter ChurchIncomes to count.
     * @example
     * // Count the number of ChurchIncomes
     * const count = await prisma.churchIncome.count({
     *   where: {
     *     // ... the filter for the ChurchIncomes we want to count
     *   }
     * })
    **/
    count<T extends ChurchIncomeCountArgs>(
      args?: Subset<T, ChurchIncomeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchIncomeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchIncome.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchIncomeAggregateArgs>(args: Subset<T, ChurchIncomeAggregateArgs>): Prisma.PrismaPromise<GetChurchIncomeAggregateType<T>>

    /**
     * Group by ChurchIncome.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchIncomeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchIncomeGroupByArgs['orderBy'] }
        : { orderBy?: ChurchIncomeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchIncomeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchIncomeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchIncome model
   */
  readonly fields: ChurchIncomeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchIncome.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchIncomeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    churchIncomeCodeIdRel<T extends ChurchIncomeCodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeCodeDefaultArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    churchIncomeCreateByRel<T extends ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchIncomeUpdateByRel<T extends ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchIncome model
   */ 
  interface ChurchIncomeFieldRefs {
    readonly id: FieldRef<"ChurchIncome", 'BigInt'>
    readonly incomeCodeId: FieldRef<"ChurchIncome", 'BigInt'>
    readonly detail: FieldRef<"ChurchIncome", 'String'>
    readonly funds: FieldRef<"ChurchIncome", 'BigInt'>
    readonly date: FieldRef<"ChurchIncome", 'DateTime'>
    readonly bill: FieldRef<"ChurchIncome", 'String'>
    readonly billNumber: FieldRef<"ChurchIncome", 'String'>
    readonly fundsType: FieldRef<"ChurchIncome", 'Type'>
    readonly deleted: FieldRef<"ChurchIncome", 'Boolean'>
    readonly createAt: FieldRef<"ChurchIncome", 'DateTime'>
    readonly createBy: FieldRef<"ChurchIncome", 'BigInt'>
    readonly updatedAt: FieldRef<"ChurchIncome", 'DateTime'>
    readonly updatedBy: FieldRef<"ChurchIncome", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ChurchIncome findUnique
   */
  export type ChurchIncomeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncome to fetch.
     */
    where: ChurchIncomeWhereUniqueInput
  }

  /**
   * ChurchIncome findUniqueOrThrow
   */
  export type ChurchIncomeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncome to fetch.
     */
    where: ChurchIncomeWhereUniqueInput
  }

  /**
   * ChurchIncome findFirst
   */
  export type ChurchIncomeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncome to fetch.
     */
    where?: ChurchIncomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomes to fetch.
     */
    orderBy?: ChurchIncomeOrderByWithRelationInput | ChurchIncomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchIncomes.
     */
    cursor?: ChurchIncomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchIncomes.
     */
    distinct?: ChurchIncomeScalarFieldEnum | ChurchIncomeScalarFieldEnum[]
  }

  /**
   * ChurchIncome findFirstOrThrow
   */
  export type ChurchIncomeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncome to fetch.
     */
    where?: ChurchIncomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomes to fetch.
     */
    orderBy?: ChurchIncomeOrderByWithRelationInput | ChurchIncomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchIncomes.
     */
    cursor?: ChurchIncomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchIncomes.
     */
    distinct?: ChurchIncomeScalarFieldEnum | ChurchIncomeScalarFieldEnum[]
  }

  /**
   * ChurchIncome findMany
   */
  export type ChurchIncomeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomes to fetch.
     */
    where?: ChurchIncomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomes to fetch.
     */
    orderBy?: ChurchIncomeOrderByWithRelationInput | ChurchIncomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchIncomes.
     */
    cursor?: ChurchIncomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomes.
     */
    skip?: number
    distinct?: ChurchIncomeScalarFieldEnum | ChurchIncomeScalarFieldEnum[]
  }

  /**
   * ChurchIncome create
   */
  export type ChurchIncomeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchIncome.
     */
    data: XOR<ChurchIncomeCreateInput, ChurchIncomeUncheckedCreateInput>
  }

  /**
   * ChurchIncome createMany
   */
  export type ChurchIncomeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchIncomes.
     */
    data: ChurchIncomeCreateManyInput | ChurchIncomeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchIncome createManyAndReturn
   */
  export type ChurchIncomeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchIncomes.
     */
    data: ChurchIncomeCreateManyInput | ChurchIncomeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchIncome update
   */
  export type ChurchIncomeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchIncome.
     */
    data: XOR<ChurchIncomeUpdateInput, ChurchIncomeUncheckedUpdateInput>
    /**
     * Choose, which ChurchIncome to update.
     */
    where: ChurchIncomeWhereUniqueInput
  }

  /**
   * ChurchIncome updateMany
   */
  export type ChurchIncomeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchIncomes.
     */
    data: XOR<ChurchIncomeUpdateManyMutationInput, ChurchIncomeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchIncomes to update
     */
    where?: ChurchIncomeWhereInput
    /**
     * Limit how many ChurchIncomes to update.
     */
    limit?: number
  }

  /**
   * ChurchIncome updateManyAndReturn
   */
  export type ChurchIncomeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * The data used to update ChurchIncomes.
     */
    data: XOR<ChurchIncomeUpdateManyMutationInput, ChurchIncomeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchIncomes to update
     */
    where?: ChurchIncomeWhereInput
    /**
     * Limit how many ChurchIncomes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchIncome upsert
   */
  export type ChurchIncomeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchIncome to update in case it exists.
     */
    where: ChurchIncomeWhereUniqueInput
    /**
     * In case the ChurchIncome found by the `where` argument doesn't exist, create a new ChurchIncome with this data.
     */
    create: XOR<ChurchIncomeCreateInput, ChurchIncomeUncheckedCreateInput>
    /**
     * In case the ChurchIncome was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchIncomeUpdateInput, ChurchIncomeUncheckedUpdateInput>
  }

  /**
   * ChurchIncome delete
   */
  export type ChurchIncomeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    /**
     * Filter which ChurchIncome to delete.
     */
    where: ChurchIncomeWhereUniqueInput
  }

  /**
   * ChurchIncome deleteMany
   */
  export type ChurchIncomeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchIncomes to delete
     */
    where?: ChurchIncomeWhereInput
    /**
     * Limit how many ChurchIncomes to delete.
     */
    limit?: number
  }

  /**
   * ChurchIncome.churchIncomeCreateByRel
   */
  export type ChurchIncome$churchIncomeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchIncome.churchIncomeUpdateByRel
   */
  export type ChurchIncome$churchIncomeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchIncome without action
   */
  export type ChurchIncomeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
  }


  /**
   * Model ChurchIncomeHistory
   */

  export type AggregateChurchIncomeHistory = {
    _count: ChurchIncomeHistoryCountAggregateOutputType | null
    _avg: ChurchIncomeHistoryAvgAggregateOutputType | null
    _sum: ChurchIncomeHistorySumAggregateOutputType | null
    _min: ChurchIncomeHistoryMinAggregateOutputType | null
    _max: ChurchIncomeHistoryMaxAggregateOutputType | null
  }

  export type ChurchIncomeHistoryAvgAggregateOutputType = {
    revId: number | null
    id: number | null
    incomeCodeId: number | null
    funds: number | null
    createBy: number | null
    updatedBy: number | null
  }

  export type ChurchIncomeHistorySumAggregateOutputType = {
    revId: bigint | null
    id: bigint | null
    incomeCodeId: bigint | null
    funds: bigint | null
    createBy: bigint | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeHistoryMinAggregateOutputType = {
    revId: bigint | null
    id: bigint | null
    incomeCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeHistoryMaxAggregateOutputType = {
    revId: bigint | null
    id: bigint | null
    incomeCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeHistoryCountAggregateOutputType = {
    revId: number
    id: number
    incomeCodeId: number
    detail: number
    funds: number
    date: number
    bill: number
    billNumber: number
    fundsType: number
    deleted: number
    createAt: number
    createBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ChurchIncomeHistoryAvgAggregateInputType = {
    revId?: true
    id?: true
    incomeCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchIncomeHistorySumAggregateInputType = {
    revId?: true
    id?: true
    incomeCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchIncomeHistoryMinAggregateInputType = {
    revId?: true
    id?: true
    incomeCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchIncomeHistoryMaxAggregateInputType = {
    revId?: true
    id?: true
    incomeCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchIncomeHistoryCountAggregateInputType = {
    revId?: true
    id?: true
    incomeCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ChurchIncomeHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchIncomeHistory to aggregate.
     */
    where?: ChurchIncomeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeHistories to fetch.
     */
    orderBy?: ChurchIncomeHistoryOrderByWithRelationInput | ChurchIncomeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchIncomeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchIncomeHistories
    **/
    _count?: true | ChurchIncomeHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChurchIncomeHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChurchIncomeHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchIncomeHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchIncomeHistoryMaxAggregateInputType
  }

  export type GetChurchIncomeHistoryAggregateType<T extends ChurchIncomeHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchIncomeHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchIncomeHistory[P]>
      : GetScalarType<T[P], AggregateChurchIncomeHistory[P]>
  }




  export type ChurchIncomeHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeHistoryWhereInput
    orderBy?: ChurchIncomeHistoryOrderByWithAggregationInput | ChurchIncomeHistoryOrderByWithAggregationInput[]
    by: ChurchIncomeHistoryScalarFieldEnum[] | ChurchIncomeHistoryScalarFieldEnum
    having?: ChurchIncomeHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchIncomeHistoryCountAggregateInputType | true
    _avg?: ChurchIncomeHistoryAvgAggregateInputType
    _sum?: ChurchIncomeHistorySumAggregateInputType
    _min?: ChurchIncomeHistoryMinAggregateInputType
    _max?: ChurchIncomeHistoryMaxAggregateInputType
  }

  export type ChurchIncomeHistoryGroupByOutputType = {
    revId: bigint
    id: bigint
    incomeCodeId: bigint
    detail: string | null
    funds: bigint
    date: Date
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type
    deleted: boolean
    createAt: Date
    createBy: bigint | null
    updatedAt: Date
    updatedBy: bigint | null
    _count: ChurchIncomeHistoryCountAggregateOutputType | null
    _avg: ChurchIncomeHistoryAvgAggregateOutputType | null
    _sum: ChurchIncomeHistorySumAggregateOutputType | null
    _min: ChurchIncomeHistoryMinAggregateOutputType | null
    _max: ChurchIncomeHistoryMaxAggregateOutputType | null
  }

  type GetChurchIncomeHistoryGroupByPayload<T extends ChurchIncomeHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchIncomeHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchIncomeHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchIncomeHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchIncomeHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ChurchIncomeHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    revId?: boolean
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncomeHistory"]>

  export type ChurchIncomeHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    revId?: boolean
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncomeHistory"]>

  export type ChurchIncomeHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    revId?: boolean
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncomeHistory"]>

  export type ChurchIncomeHistorySelectScalar = {
    revId?: boolean
    id?: boolean
    incomeCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ChurchIncomeHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"revId" | "id" | "incomeCodeId" | "detail" | "funds" | "date" | "bill" | "billNumber" | "fundsType" | "deleted" | "createAt" | "createBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["churchIncomeHistory"]>
  export type ChurchIncomeHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
  }
  export type ChurchIncomeHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
  }
  export type ChurchIncomeHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCodeDefaultArgs<ExtArgs>
    churchIncomeHistoryCreateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs>
    churchIncomeHistoryUpdateByRel?: boolean | ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs>
  }

  export type $ChurchIncomeHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchIncomeHistory"
    objects: {
      churchIncomeCodeHistoryIdRel: Prisma.$ChurchIncomeCodePayload<ExtArgs>
      churchIncomeHistoryCreateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchIncomeHistoryUpdateByRel: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      revId: bigint
      id: bigint
      incomeCodeId: bigint
      detail: string | null
      funds: bigint
      date: Date
      bill: string | null
      billNumber: string | null
      fundsType: $Enums.Type
      deleted: boolean
      createAt: Date
      createBy: bigint | null
      updatedAt: Date
      updatedBy: bigint | null
    }, ExtArgs["result"]["churchIncomeHistory"]>
    composites: {}
  }

  type ChurchIncomeHistoryGetPayload<S extends boolean | null | undefined | ChurchIncomeHistoryDefaultArgs> = $Result.GetResult<Prisma.$ChurchIncomeHistoryPayload, S>

  type ChurchIncomeHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchIncomeHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchIncomeHistoryCountAggregateInputType | true
    }

  export interface ChurchIncomeHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchIncomeHistory'], meta: { name: 'ChurchIncomeHistory' } }
    /**
     * Find zero or one ChurchIncomeHistory that matches the filter.
     * @param {ChurchIncomeHistoryFindUniqueArgs} args - Arguments to find a ChurchIncomeHistory
     * @example
     * // Get one ChurchIncomeHistory
     * const churchIncomeHistory = await prisma.churchIncomeHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchIncomeHistoryFindUniqueArgs>(args: SelectSubset<T, ChurchIncomeHistoryFindUniqueArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ChurchIncomeHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchIncomeHistoryFindUniqueOrThrowArgs} args - Arguments to find a ChurchIncomeHistory
     * @example
     * // Get one ChurchIncomeHistory
     * const churchIncomeHistory = await prisma.churchIncomeHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchIncomeHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchIncomeHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchIncomeHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeHistoryFindFirstArgs} args - Arguments to find a ChurchIncomeHistory
     * @example
     * // Get one ChurchIncomeHistory
     * const churchIncomeHistory = await prisma.churchIncomeHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchIncomeHistoryFindFirstArgs>(args?: SelectSubset<T, ChurchIncomeHistoryFindFirstArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchIncomeHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeHistoryFindFirstOrThrowArgs} args - Arguments to find a ChurchIncomeHistory
     * @example
     * // Get one ChurchIncomeHistory
     * const churchIncomeHistory = await prisma.churchIncomeHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchIncomeHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchIncomeHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ChurchIncomeHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchIncomeHistories
     * const churchIncomeHistories = await prisma.churchIncomeHistory.findMany()
     * 
     * // Get first 10 ChurchIncomeHistories
     * const churchIncomeHistories = await prisma.churchIncomeHistory.findMany({ take: 10 })
     * 
     * // Only select the `revId`
     * const churchIncomeHistoryWithRevIdOnly = await prisma.churchIncomeHistory.findMany({ select: { revId: true } })
     * 
     */
    findMany<T extends ChurchIncomeHistoryFindManyArgs>(args?: SelectSubset<T, ChurchIncomeHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ChurchIncomeHistory.
     * @param {ChurchIncomeHistoryCreateArgs} args - Arguments to create a ChurchIncomeHistory.
     * @example
     * // Create one ChurchIncomeHistory
     * const ChurchIncomeHistory = await prisma.churchIncomeHistory.create({
     *   data: {
     *     // ... data to create a ChurchIncomeHistory
     *   }
     * })
     * 
     */
    create<T extends ChurchIncomeHistoryCreateArgs>(args: SelectSubset<T, ChurchIncomeHistoryCreateArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ChurchIncomeHistories.
     * @param {ChurchIncomeHistoryCreateManyArgs} args - Arguments to create many ChurchIncomeHistories.
     * @example
     * // Create many ChurchIncomeHistories
     * const churchIncomeHistory = await prisma.churchIncomeHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchIncomeHistoryCreateManyArgs>(args?: SelectSubset<T, ChurchIncomeHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchIncomeHistories and returns the data saved in the database.
     * @param {ChurchIncomeHistoryCreateManyAndReturnArgs} args - Arguments to create many ChurchIncomeHistories.
     * @example
     * // Create many ChurchIncomeHistories
     * const churchIncomeHistory = await prisma.churchIncomeHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchIncomeHistories and only return the `revId`
     * const churchIncomeHistoryWithRevIdOnly = await prisma.churchIncomeHistory.createManyAndReturn({
     *   select: { revId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchIncomeHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchIncomeHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ChurchIncomeHistory.
     * @param {ChurchIncomeHistoryDeleteArgs} args - Arguments to delete one ChurchIncomeHistory.
     * @example
     * // Delete one ChurchIncomeHistory
     * const ChurchIncomeHistory = await prisma.churchIncomeHistory.delete({
     *   where: {
     *     // ... filter to delete one ChurchIncomeHistory
     *   }
     * })
     * 
     */
    delete<T extends ChurchIncomeHistoryDeleteArgs>(args: SelectSubset<T, ChurchIncomeHistoryDeleteArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ChurchIncomeHistory.
     * @param {ChurchIncomeHistoryUpdateArgs} args - Arguments to update one ChurchIncomeHistory.
     * @example
     * // Update one ChurchIncomeHistory
     * const churchIncomeHistory = await prisma.churchIncomeHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchIncomeHistoryUpdateArgs>(args: SelectSubset<T, ChurchIncomeHistoryUpdateArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ChurchIncomeHistories.
     * @param {ChurchIncomeHistoryDeleteManyArgs} args - Arguments to filter ChurchIncomeHistories to delete.
     * @example
     * // Delete a few ChurchIncomeHistories
     * const { count } = await prisma.churchIncomeHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchIncomeHistoryDeleteManyArgs>(args?: SelectSubset<T, ChurchIncomeHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchIncomeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchIncomeHistories
     * const churchIncomeHistory = await prisma.churchIncomeHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchIncomeHistoryUpdateManyArgs>(args: SelectSubset<T, ChurchIncomeHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchIncomeHistories and returns the data updated in the database.
     * @param {ChurchIncomeHistoryUpdateManyAndReturnArgs} args - Arguments to update many ChurchIncomeHistories.
     * @example
     * // Update many ChurchIncomeHistories
     * const churchIncomeHistory = await prisma.churchIncomeHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchIncomeHistories and only return the `revId`
     * const churchIncomeHistoryWithRevIdOnly = await prisma.churchIncomeHistory.updateManyAndReturn({
     *   select: { revId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchIncomeHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchIncomeHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ChurchIncomeHistory.
     * @param {ChurchIncomeHistoryUpsertArgs} args - Arguments to update or create a ChurchIncomeHistory.
     * @example
     * // Update or create a ChurchIncomeHistory
     * const churchIncomeHistory = await prisma.churchIncomeHistory.upsert({
     *   create: {
     *     // ... data to create a ChurchIncomeHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchIncomeHistory we want to update
     *   }
     * })
     */
    upsert<T extends ChurchIncomeHistoryUpsertArgs>(args: SelectSubset<T, ChurchIncomeHistoryUpsertArgs<ExtArgs>>): Prisma__ChurchIncomeHistoryClient<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ChurchIncomeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeHistoryCountArgs} args - Arguments to filter ChurchIncomeHistories to count.
     * @example
     * // Count the number of ChurchIncomeHistories
     * const count = await prisma.churchIncomeHistory.count({
     *   where: {
     *     // ... the filter for the ChurchIncomeHistories we want to count
     *   }
     * })
    **/
    count<T extends ChurchIncomeHistoryCountArgs>(
      args?: Subset<T, ChurchIncomeHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchIncomeHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchIncomeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchIncomeHistoryAggregateArgs>(args: Subset<T, ChurchIncomeHistoryAggregateArgs>): Prisma.PrismaPromise<GetChurchIncomeHistoryAggregateType<T>>

    /**
     * Group by ChurchIncomeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchIncomeHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchIncomeHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ChurchIncomeHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchIncomeHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchIncomeHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchIncomeHistory model
   */
  readonly fields: ChurchIncomeHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchIncomeHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchIncomeHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    churchIncomeCodeHistoryIdRel<T extends ChurchIncomeCodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeCodeDefaultArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    churchIncomeHistoryCreateByRel<T extends ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchIncomeHistoryUpdateByRel<T extends ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchIncomeHistory model
   */ 
  interface ChurchIncomeHistoryFieldRefs {
    readonly revId: FieldRef<"ChurchIncomeHistory", 'BigInt'>
    readonly id: FieldRef<"ChurchIncomeHistory", 'BigInt'>
    readonly incomeCodeId: FieldRef<"ChurchIncomeHistory", 'BigInt'>
    readonly detail: FieldRef<"ChurchIncomeHistory", 'String'>
    readonly funds: FieldRef<"ChurchIncomeHistory", 'BigInt'>
    readonly date: FieldRef<"ChurchIncomeHistory", 'DateTime'>
    readonly bill: FieldRef<"ChurchIncomeHistory", 'String'>
    readonly billNumber: FieldRef<"ChurchIncomeHistory", 'String'>
    readonly fundsType: FieldRef<"ChurchIncomeHistory", 'Type'>
    readonly deleted: FieldRef<"ChurchIncomeHistory", 'Boolean'>
    readonly createAt: FieldRef<"ChurchIncomeHistory", 'DateTime'>
    readonly createBy: FieldRef<"ChurchIncomeHistory", 'BigInt'>
    readonly updatedAt: FieldRef<"ChurchIncomeHistory", 'DateTime'>
    readonly updatedBy: FieldRef<"ChurchIncomeHistory", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ChurchIncomeHistory findUnique
   */
  export type ChurchIncomeHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeHistory to fetch.
     */
    where: ChurchIncomeHistoryWhereUniqueInput
  }

  /**
   * ChurchIncomeHistory findUniqueOrThrow
   */
  export type ChurchIncomeHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeHistory to fetch.
     */
    where: ChurchIncomeHistoryWhereUniqueInput
  }

  /**
   * ChurchIncomeHistory findFirst
   */
  export type ChurchIncomeHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeHistory to fetch.
     */
    where?: ChurchIncomeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeHistories to fetch.
     */
    orderBy?: ChurchIncomeHistoryOrderByWithRelationInput | ChurchIncomeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchIncomeHistories.
     */
    cursor?: ChurchIncomeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchIncomeHistories.
     */
    distinct?: ChurchIncomeHistoryScalarFieldEnum | ChurchIncomeHistoryScalarFieldEnum[]
  }

  /**
   * ChurchIncomeHistory findFirstOrThrow
   */
  export type ChurchIncomeHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeHistory to fetch.
     */
    where?: ChurchIncomeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeHistories to fetch.
     */
    orderBy?: ChurchIncomeHistoryOrderByWithRelationInput | ChurchIncomeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchIncomeHistories.
     */
    cursor?: ChurchIncomeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchIncomeHistories.
     */
    distinct?: ChurchIncomeHistoryScalarFieldEnum | ChurchIncomeHistoryScalarFieldEnum[]
  }

  /**
   * ChurchIncomeHistory findMany
   */
  export type ChurchIncomeHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeHistories to fetch.
     */
    where?: ChurchIncomeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeHistories to fetch.
     */
    orderBy?: ChurchIncomeHistoryOrderByWithRelationInput | ChurchIncomeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchIncomeHistories.
     */
    cursor?: ChurchIncomeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeHistories.
     */
    skip?: number
    distinct?: ChurchIncomeHistoryScalarFieldEnum | ChurchIncomeHistoryScalarFieldEnum[]
  }

  /**
   * ChurchIncomeHistory create
   */
  export type ChurchIncomeHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchIncomeHistory.
     */
    data: XOR<ChurchIncomeHistoryCreateInput, ChurchIncomeHistoryUncheckedCreateInput>
  }

  /**
   * ChurchIncomeHistory createMany
   */
  export type ChurchIncomeHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchIncomeHistories.
     */
    data: ChurchIncomeHistoryCreateManyInput | ChurchIncomeHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchIncomeHistory createManyAndReturn
   */
  export type ChurchIncomeHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchIncomeHistories.
     */
    data: ChurchIncomeHistoryCreateManyInput | ChurchIncomeHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchIncomeHistory update
   */
  export type ChurchIncomeHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchIncomeHistory.
     */
    data: XOR<ChurchIncomeHistoryUpdateInput, ChurchIncomeHistoryUncheckedUpdateInput>
    /**
     * Choose, which ChurchIncomeHistory to update.
     */
    where: ChurchIncomeHistoryWhereUniqueInput
  }

  /**
   * ChurchIncomeHistory updateMany
   */
  export type ChurchIncomeHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchIncomeHistories.
     */
    data: XOR<ChurchIncomeHistoryUpdateManyMutationInput, ChurchIncomeHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ChurchIncomeHistories to update
     */
    where?: ChurchIncomeHistoryWhereInput
    /**
     * Limit how many ChurchIncomeHistories to update.
     */
    limit?: number
  }

  /**
   * ChurchIncomeHistory updateManyAndReturn
   */
  export type ChurchIncomeHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ChurchIncomeHistories.
     */
    data: XOR<ChurchIncomeHistoryUpdateManyMutationInput, ChurchIncomeHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ChurchIncomeHistories to update
     */
    where?: ChurchIncomeHistoryWhereInput
    /**
     * Limit how many ChurchIncomeHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchIncomeHistory upsert
   */
  export type ChurchIncomeHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchIncomeHistory to update in case it exists.
     */
    where: ChurchIncomeHistoryWhereUniqueInput
    /**
     * In case the ChurchIncomeHistory found by the `where` argument doesn't exist, create a new ChurchIncomeHistory with this data.
     */
    create: XOR<ChurchIncomeHistoryCreateInput, ChurchIncomeHistoryUncheckedCreateInput>
    /**
     * In case the ChurchIncomeHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchIncomeHistoryUpdateInput, ChurchIncomeHistoryUncheckedUpdateInput>
  }

  /**
   * ChurchIncomeHistory delete
   */
  export type ChurchIncomeHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    /**
     * Filter which ChurchIncomeHistory to delete.
     */
    where: ChurchIncomeHistoryWhereUniqueInput
  }

  /**
   * ChurchIncomeHistory deleteMany
   */
  export type ChurchIncomeHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchIncomeHistories to delete
     */
    where?: ChurchIncomeHistoryWhereInput
    /**
     * Limit how many ChurchIncomeHistories to delete.
     */
    limit?: number
  }

  /**
   * ChurchIncomeHistory.churchIncomeHistoryCreateByRel
   */
  export type ChurchIncomeHistory$churchIncomeHistoryCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchIncomeHistory.churchIncomeHistoryUpdateByRel
   */
  export type ChurchIncomeHistory$churchIncomeHistoryUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchIncomeHistory without action
   */
  export type ChurchIncomeHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ChurchIncomeCode
   */

  export type AggregateChurchIncomeCode = {
    _count: ChurchIncomeCodeCountAggregateOutputType | null
    _avg: ChurchIncomeCodeAvgAggregateOutputType | null
    _sum: ChurchIncomeCodeSumAggregateOutputType | null
    _min: ChurchIncomeCodeMinAggregateOutputType | null
    _max: ChurchIncomeCodeMaxAggregateOutputType | null
  }

  export type ChurchIncomeCodeAvgAggregateOutputType = {
    id: number | null
    createBy: number | null
    updatedBy: number | null
  }

  export type ChurchIncomeCodeSumAggregateOutputType = {
    id: bigint | null
    createBy: bigint | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeCodeMinAggregateOutputType = {
    id: bigint | null
    incomeCodeName: string | null
    code: string | null
    description: string | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeCodeMaxAggregateOutputType = {
    id: bigint | null
    incomeCodeName: string | null
    code: string | null
    description: string | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchIncomeCodeCountAggregateOutputType = {
    id: number
    incomeCodeName: number
    code: number
    description: number
    deleted: number
    createAt: number
    createBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ChurchIncomeCodeAvgAggregateInputType = {
    id?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchIncomeCodeSumAggregateInputType = {
    id?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchIncomeCodeMinAggregateInputType = {
    id?: true
    incomeCodeName?: true
    code?: true
    description?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchIncomeCodeMaxAggregateInputType = {
    id?: true
    incomeCodeName?: true
    code?: true
    description?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchIncomeCodeCountAggregateInputType = {
    id?: true
    incomeCodeName?: true
    code?: true
    description?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ChurchIncomeCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchIncomeCode to aggregate.
     */
    where?: ChurchIncomeCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeCodes to fetch.
     */
    orderBy?: ChurchIncomeCodeOrderByWithRelationInput | ChurchIncomeCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchIncomeCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchIncomeCodes
    **/
    _count?: true | ChurchIncomeCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChurchIncomeCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChurchIncomeCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchIncomeCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchIncomeCodeMaxAggregateInputType
  }

  export type GetChurchIncomeCodeAggregateType<T extends ChurchIncomeCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchIncomeCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchIncomeCode[P]>
      : GetScalarType<T[P], AggregateChurchIncomeCode[P]>
  }




  export type ChurchIncomeCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchIncomeCodeWhereInput
    orderBy?: ChurchIncomeCodeOrderByWithAggregationInput | ChurchIncomeCodeOrderByWithAggregationInput[]
    by: ChurchIncomeCodeScalarFieldEnum[] | ChurchIncomeCodeScalarFieldEnum
    having?: ChurchIncomeCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchIncomeCodeCountAggregateInputType | true
    _avg?: ChurchIncomeCodeAvgAggregateInputType
    _sum?: ChurchIncomeCodeSumAggregateInputType
    _min?: ChurchIncomeCodeMinAggregateInputType
    _max?: ChurchIncomeCodeMaxAggregateInputType
  }

  export type ChurchIncomeCodeGroupByOutputType = {
    id: bigint
    incomeCodeName: string
    code: string
    description: string
    deleted: boolean
    createAt: Date
    createBy: bigint | null
    updatedAt: Date
    updatedBy: bigint | null
    _count: ChurchIncomeCodeCountAggregateOutputType | null
    _avg: ChurchIncomeCodeAvgAggregateOutputType | null
    _sum: ChurchIncomeCodeSumAggregateOutputType | null
    _min: ChurchIncomeCodeMinAggregateOutputType | null
    _max: ChurchIncomeCodeMaxAggregateOutputType | null
  }

  type GetChurchIncomeCodeGroupByPayload<T extends ChurchIncomeCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchIncomeCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchIncomeCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchIncomeCodeGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchIncomeCodeGroupByOutputType[P]>
        }
      >
    >


  export type ChurchIncomeCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incomeCodeName?: boolean
    code?: boolean
    description?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeCreateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs>
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCode$churchIncomeCodeIdRelArgs<ExtArgs>
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCode$churchIncomeCodeHistoryIdRelArgs<ExtArgs>
    _count?: boolean | ChurchIncomeCodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncomeCode"]>

  export type ChurchIncomeCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incomeCodeName?: boolean
    code?: boolean
    description?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeCreateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncomeCode"]>

  export type ChurchIncomeCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incomeCodeName?: boolean
    code?: boolean
    description?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchIncomeCodeCreateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchIncomeCode"]>

  export type ChurchIncomeCodeSelectScalar = {
    id?: boolean
    incomeCodeName?: boolean
    code?: boolean
    description?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ChurchIncomeCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "incomeCodeName" | "code" | "description" | "deleted" | "createAt" | "createBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["churchIncomeCode"]>
  export type ChurchIncomeCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeCreateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs>
    churchIncomeCodeIdRel?: boolean | ChurchIncomeCode$churchIncomeCodeIdRelArgs<ExtArgs>
    churchIncomeCodeHistoryIdRel?: boolean | ChurchIncomeCode$churchIncomeCodeHistoryIdRelArgs<ExtArgs>
    _count?: boolean | ChurchIncomeCodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChurchIncomeCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeCreateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs>
  }
  export type ChurchIncomeCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchIncomeCodeCreateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs>
    churchIncomeCodeUpdateByRel?: boolean | ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs>
  }

  export type $ChurchIncomeCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchIncomeCode"
    objects: {
      churchIncomeCodeCreateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchIncomeCodeUpdateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchIncomeCodeIdRel: Prisma.$ChurchIncomePayload<ExtArgs>[]
      churchIncomeCodeHistoryIdRel: Prisma.$ChurchIncomeHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      incomeCodeName: string
      code: string
      description: string
      deleted: boolean
      createAt: Date
      createBy: bigint | null
      updatedAt: Date
      updatedBy: bigint | null
    }, ExtArgs["result"]["churchIncomeCode"]>
    composites: {}
  }

  type ChurchIncomeCodeGetPayload<S extends boolean | null | undefined | ChurchIncomeCodeDefaultArgs> = $Result.GetResult<Prisma.$ChurchIncomeCodePayload, S>

  type ChurchIncomeCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchIncomeCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchIncomeCodeCountAggregateInputType | true
    }

  export interface ChurchIncomeCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchIncomeCode'], meta: { name: 'ChurchIncomeCode' } }
    /**
     * Find zero or one ChurchIncomeCode that matches the filter.
     * @param {ChurchIncomeCodeFindUniqueArgs} args - Arguments to find a ChurchIncomeCode
     * @example
     * // Get one ChurchIncomeCode
     * const churchIncomeCode = await prisma.churchIncomeCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchIncomeCodeFindUniqueArgs>(args: SelectSubset<T, ChurchIncomeCodeFindUniqueArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ChurchIncomeCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchIncomeCodeFindUniqueOrThrowArgs} args - Arguments to find a ChurchIncomeCode
     * @example
     * // Get one ChurchIncomeCode
     * const churchIncomeCode = await prisma.churchIncomeCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchIncomeCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchIncomeCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchIncomeCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCodeFindFirstArgs} args - Arguments to find a ChurchIncomeCode
     * @example
     * // Get one ChurchIncomeCode
     * const churchIncomeCode = await prisma.churchIncomeCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchIncomeCodeFindFirstArgs>(args?: SelectSubset<T, ChurchIncomeCodeFindFirstArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchIncomeCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCodeFindFirstOrThrowArgs} args - Arguments to find a ChurchIncomeCode
     * @example
     * // Get one ChurchIncomeCode
     * const churchIncomeCode = await prisma.churchIncomeCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchIncomeCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchIncomeCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ChurchIncomeCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchIncomeCodes
     * const churchIncomeCodes = await prisma.churchIncomeCode.findMany()
     * 
     * // Get first 10 ChurchIncomeCodes
     * const churchIncomeCodes = await prisma.churchIncomeCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchIncomeCodeWithIdOnly = await prisma.churchIncomeCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchIncomeCodeFindManyArgs>(args?: SelectSubset<T, ChurchIncomeCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ChurchIncomeCode.
     * @param {ChurchIncomeCodeCreateArgs} args - Arguments to create a ChurchIncomeCode.
     * @example
     * // Create one ChurchIncomeCode
     * const ChurchIncomeCode = await prisma.churchIncomeCode.create({
     *   data: {
     *     // ... data to create a ChurchIncomeCode
     *   }
     * })
     * 
     */
    create<T extends ChurchIncomeCodeCreateArgs>(args: SelectSubset<T, ChurchIncomeCodeCreateArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ChurchIncomeCodes.
     * @param {ChurchIncomeCodeCreateManyArgs} args - Arguments to create many ChurchIncomeCodes.
     * @example
     * // Create many ChurchIncomeCodes
     * const churchIncomeCode = await prisma.churchIncomeCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchIncomeCodeCreateManyArgs>(args?: SelectSubset<T, ChurchIncomeCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchIncomeCodes and returns the data saved in the database.
     * @param {ChurchIncomeCodeCreateManyAndReturnArgs} args - Arguments to create many ChurchIncomeCodes.
     * @example
     * // Create many ChurchIncomeCodes
     * const churchIncomeCode = await prisma.churchIncomeCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchIncomeCodes and only return the `id`
     * const churchIncomeCodeWithIdOnly = await prisma.churchIncomeCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchIncomeCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchIncomeCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ChurchIncomeCode.
     * @param {ChurchIncomeCodeDeleteArgs} args - Arguments to delete one ChurchIncomeCode.
     * @example
     * // Delete one ChurchIncomeCode
     * const ChurchIncomeCode = await prisma.churchIncomeCode.delete({
     *   where: {
     *     // ... filter to delete one ChurchIncomeCode
     *   }
     * })
     * 
     */
    delete<T extends ChurchIncomeCodeDeleteArgs>(args: SelectSubset<T, ChurchIncomeCodeDeleteArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ChurchIncomeCode.
     * @param {ChurchIncomeCodeUpdateArgs} args - Arguments to update one ChurchIncomeCode.
     * @example
     * // Update one ChurchIncomeCode
     * const churchIncomeCode = await prisma.churchIncomeCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchIncomeCodeUpdateArgs>(args: SelectSubset<T, ChurchIncomeCodeUpdateArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ChurchIncomeCodes.
     * @param {ChurchIncomeCodeDeleteManyArgs} args - Arguments to filter ChurchIncomeCodes to delete.
     * @example
     * // Delete a few ChurchIncomeCodes
     * const { count } = await prisma.churchIncomeCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchIncomeCodeDeleteManyArgs>(args?: SelectSubset<T, ChurchIncomeCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchIncomeCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchIncomeCodes
     * const churchIncomeCode = await prisma.churchIncomeCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchIncomeCodeUpdateManyArgs>(args: SelectSubset<T, ChurchIncomeCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchIncomeCodes and returns the data updated in the database.
     * @param {ChurchIncomeCodeUpdateManyAndReturnArgs} args - Arguments to update many ChurchIncomeCodes.
     * @example
     * // Update many ChurchIncomeCodes
     * const churchIncomeCode = await prisma.churchIncomeCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchIncomeCodes and only return the `id`
     * const churchIncomeCodeWithIdOnly = await prisma.churchIncomeCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchIncomeCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchIncomeCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ChurchIncomeCode.
     * @param {ChurchIncomeCodeUpsertArgs} args - Arguments to update or create a ChurchIncomeCode.
     * @example
     * // Update or create a ChurchIncomeCode
     * const churchIncomeCode = await prisma.churchIncomeCode.upsert({
     *   create: {
     *     // ... data to create a ChurchIncomeCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchIncomeCode we want to update
     *   }
     * })
     */
    upsert<T extends ChurchIncomeCodeUpsertArgs>(args: SelectSubset<T, ChurchIncomeCodeUpsertArgs<ExtArgs>>): Prisma__ChurchIncomeCodeClient<$Result.GetResult<Prisma.$ChurchIncomeCodePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ChurchIncomeCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCodeCountArgs} args - Arguments to filter ChurchIncomeCodes to count.
     * @example
     * // Count the number of ChurchIncomeCodes
     * const count = await prisma.churchIncomeCode.count({
     *   where: {
     *     // ... the filter for the ChurchIncomeCodes we want to count
     *   }
     * })
    **/
    count<T extends ChurchIncomeCodeCountArgs>(
      args?: Subset<T, ChurchIncomeCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchIncomeCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchIncomeCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchIncomeCodeAggregateArgs>(args: Subset<T, ChurchIncomeCodeAggregateArgs>): Prisma.PrismaPromise<GetChurchIncomeCodeAggregateType<T>>

    /**
     * Group by ChurchIncomeCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchIncomeCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchIncomeCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchIncomeCodeGroupByArgs['orderBy'] }
        : { orderBy?: ChurchIncomeCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchIncomeCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchIncomeCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchIncomeCode model
   */
  readonly fields: ChurchIncomeCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchIncomeCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchIncomeCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    churchIncomeCodeCreateByRel<T extends ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchIncomeCodeUpdateByRel<T extends ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchIncomeCodeIdRel<T extends ChurchIncomeCode$churchIncomeCodeIdRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeCode$churchIncomeCodeIdRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchIncomeCodeHistoryIdRel<T extends ChurchIncomeCode$churchIncomeCodeHistoryIdRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchIncomeCode$churchIncomeCodeHistoryIdRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchIncomeHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchIncomeCode model
   */ 
  interface ChurchIncomeCodeFieldRefs {
    readonly id: FieldRef<"ChurchIncomeCode", 'BigInt'>
    readonly incomeCodeName: FieldRef<"ChurchIncomeCode", 'String'>
    readonly code: FieldRef<"ChurchIncomeCode", 'String'>
    readonly description: FieldRef<"ChurchIncomeCode", 'String'>
    readonly deleted: FieldRef<"ChurchIncomeCode", 'Boolean'>
    readonly createAt: FieldRef<"ChurchIncomeCode", 'DateTime'>
    readonly createBy: FieldRef<"ChurchIncomeCode", 'BigInt'>
    readonly updatedAt: FieldRef<"ChurchIncomeCode", 'DateTime'>
    readonly updatedBy: FieldRef<"ChurchIncomeCode", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ChurchIncomeCode findUnique
   */
  export type ChurchIncomeCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeCode to fetch.
     */
    where: ChurchIncomeCodeWhereUniqueInput
  }

  /**
   * ChurchIncomeCode findUniqueOrThrow
   */
  export type ChurchIncomeCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeCode to fetch.
     */
    where: ChurchIncomeCodeWhereUniqueInput
  }

  /**
   * ChurchIncomeCode findFirst
   */
  export type ChurchIncomeCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeCode to fetch.
     */
    where?: ChurchIncomeCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeCodes to fetch.
     */
    orderBy?: ChurchIncomeCodeOrderByWithRelationInput | ChurchIncomeCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchIncomeCodes.
     */
    cursor?: ChurchIncomeCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchIncomeCodes.
     */
    distinct?: ChurchIncomeCodeScalarFieldEnum | ChurchIncomeCodeScalarFieldEnum[]
  }

  /**
   * ChurchIncomeCode findFirstOrThrow
   */
  export type ChurchIncomeCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeCode to fetch.
     */
    where?: ChurchIncomeCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeCodes to fetch.
     */
    orderBy?: ChurchIncomeCodeOrderByWithRelationInput | ChurchIncomeCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchIncomeCodes.
     */
    cursor?: ChurchIncomeCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchIncomeCodes.
     */
    distinct?: ChurchIncomeCodeScalarFieldEnum | ChurchIncomeCodeScalarFieldEnum[]
  }

  /**
   * ChurchIncomeCode findMany
   */
  export type ChurchIncomeCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchIncomeCodes to fetch.
     */
    where?: ChurchIncomeCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchIncomeCodes to fetch.
     */
    orderBy?: ChurchIncomeCodeOrderByWithRelationInput | ChurchIncomeCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchIncomeCodes.
     */
    cursor?: ChurchIncomeCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchIncomeCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchIncomeCodes.
     */
    skip?: number
    distinct?: ChurchIncomeCodeScalarFieldEnum | ChurchIncomeCodeScalarFieldEnum[]
  }

  /**
   * ChurchIncomeCode create
   */
  export type ChurchIncomeCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchIncomeCode.
     */
    data: XOR<ChurchIncomeCodeCreateInput, ChurchIncomeCodeUncheckedCreateInput>
  }

  /**
   * ChurchIncomeCode createMany
   */
  export type ChurchIncomeCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchIncomeCodes.
     */
    data: ChurchIncomeCodeCreateManyInput | ChurchIncomeCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchIncomeCode createManyAndReturn
   */
  export type ChurchIncomeCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchIncomeCodes.
     */
    data: ChurchIncomeCodeCreateManyInput | ChurchIncomeCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchIncomeCode update
   */
  export type ChurchIncomeCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchIncomeCode.
     */
    data: XOR<ChurchIncomeCodeUpdateInput, ChurchIncomeCodeUncheckedUpdateInput>
    /**
     * Choose, which ChurchIncomeCode to update.
     */
    where: ChurchIncomeCodeWhereUniqueInput
  }

  /**
   * ChurchIncomeCode updateMany
   */
  export type ChurchIncomeCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchIncomeCodes.
     */
    data: XOR<ChurchIncomeCodeUpdateManyMutationInput, ChurchIncomeCodeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchIncomeCodes to update
     */
    where?: ChurchIncomeCodeWhereInput
    /**
     * Limit how many ChurchIncomeCodes to update.
     */
    limit?: number
  }

  /**
   * ChurchIncomeCode updateManyAndReturn
   */
  export type ChurchIncomeCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * The data used to update ChurchIncomeCodes.
     */
    data: XOR<ChurchIncomeCodeUpdateManyMutationInput, ChurchIncomeCodeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchIncomeCodes to update
     */
    where?: ChurchIncomeCodeWhereInput
    /**
     * Limit how many ChurchIncomeCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchIncomeCode upsert
   */
  export type ChurchIncomeCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchIncomeCode to update in case it exists.
     */
    where: ChurchIncomeCodeWhereUniqueInput
    /**
     * In case the ChurchIncomeCode found by the `where` argument doesn't exist, create a new ChurchIncomeCode with this data.
     */
    create: XOR<ChurchIncomeCodeCreateInput, ChurchIncomeCodeUncheckedCreateInput>
    /**
     * In case the ChurchIncomeCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchIncomeCodeUpdateInput, ChurchIncomeCodeUncheckedUpdateInput>
  }

  /**
   * ChurchIncomeCode delete
   */
  export type ChurchIncomeCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
    /**
     * Filter which ChurchIncomeCode to delete.
     */
    where: ChurchIncomeCodeWhereUniqueInput
  }

  /**
   * ChurchIncomeCode deleteMany
   */
  export type ChurchIncomeCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchIncomeCodes to delete
     */
    where?: ChurchIncomeCodeWhereInput
    /**
     * Limit how many ChurchIncomeCodes to delete.
     */
    limit?: number
  }

  /**
   * ChurchIncomeCode.churchIncomeCodeCreateByRel
   */
  export type ChurchIncomeCode$churchIncomeCodeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchIncomeCode.churchIncomeCodeUpdateByRel
   */
  export type ChurchIncomeCode$churchIncomeCodeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchIncomeCode.churchIncomeCodeIdRel
   */
  export type ChurchIncomeCode$churchIncomeCodeIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncome
     */
    select?: ChurchIncomeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncome
     */
    omit?: ChurchIncomeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeInclude<ExtArgs> | null
    where?: ChurchIncomeWhereInput
    orderBy?: ChurchIncomeOrderByWithRelationInput | ChurchIncomeOrderByWithRelationInput[]
    cursor?: ChurchIncomeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeScalarFieldEnum | ChurchIncomeScalarFieldEnum[]
  }

  /**
   * ChurchIncomeCode.churchIncomeCodeHistoryIdRel
   */
  export type ChurchIncomeCode$churchIncomeCodeHistoryIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeHistory
     */
    select?: ChurchIncomeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeHistory
     */
    omit?: ChurchIncomeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeHistoryInclude<ExtArgs> | null
    where?: ChurchIncomeHistoryWhereInput
    orderBy?: ChurchIncomeHistoryOrderByWithRelationInput | ChurchIncomeHistoryOrderByWithRelationInput[]
    cursor?: ChurchIncomeHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchIncomeHistoryScalarFieldEnum | ChurchIncomeHistoryScalarFieldEnum[]
  }

  /**
   * ChurchIncomeCode without action
   */
  export type ChurchIncomeCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchIncomeCode
     */
    select?: ChurchIncomeCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchIncomeCode
     */
    omit?: ChurchIncomeCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchIncomeCodeInclude<ExtArgs> | null
  }


  /**
   * Model ChurchSpending
   */

  export type AggregateChurchSpending = {
    _count: ChurchSpendingCountAggregateOutputType | null
    _avg: ChurchSpendingAvgAggregateOutputType | null
    _sum: ChurchSpendingSumAggregateOutputType | null
    _min: ChurchSpendingMinAggregateOutputType | null
    _max: ChurchSpendingMaxAggregateOutputType | null
  }

  export type ChurchSpendingAvgAggregateOutputType = {
    id: number | null
    spendingCodeId: number | null
    funds: number | null
    createBy: number | null
    updatedBy: number | null
  }

  export type ChurchSpendingSumAggregateOutputType = {
    id: bigint | null
    spendingCodeId: bigint | null
    funds: bigint | null
    createBy: bigint | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingMinAggregateOutputType = {
    id: bigint | null
    spendingCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingMaxAggregateOutputType = {
    id: bigint | null
    spendingCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingCountAggregateOutputType = {
    id: number
    spendingCodeId: number
    detail: number
    funds: number
    date: number
    bill: number
    billNumber: number
    fundsType: number
    deleted: number
    createAt: number
    createBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ChurchSpendingAvgAggregateInputType = {
    id?: true
    spendingCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchSpendingSumAggregateInputType = {
    id?: true
    spendingCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchSpendingMinAggregateInputType = {
    id?: true
    spendingCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchSpendingMaxAggregateInputType = {
    id?: true
    spendingCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchSpendingCountAggregateInputType = {
    id?: true
    spendingCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ChurchSpendingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchSpending to aggregate.
     */
    where?: ChurchSpendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendings to fetch.
     */
    orderBy?: ChurchSpendingOrderByWithRelationInput | ChurchSpendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchSpendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchSpendings
    **/
    _count?: true | ChurchSpendingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChurchSpendingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChurchSpendingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchSpendingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchSpendingMaxAggregateInputType
  }

  export type GetChurchSpendingAggregateType<T extends ChurchSpendingAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchSpending]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchSpending[P]>
      : GetScalarType<T[P], AggregateChurchSpending[P]>
  }




  export type ChurchSpendingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingWhereInput
    orderBy?: ChurchSpendingOrderByWithAggregationInput | ChurchSpendingOrderByWithAggregationInput[]
    by: ChurchSpendingScalarFieldEnum[] | ChurchSpendingScalarFieldEnum
    having?: ChurchSpendingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchSpendingCountAggregateInputType | true
    _avg?: ChurchSpendingAvgAggregateInputType
    _sum?: ChurchSpendingSumAggregateInputType
    _min?: ChurchSpendingMinAggregateInputType
    _max?: ChurchSpendingMaxAggregateInputType
  }

  export type ChurchSpendingGroupByOutputType = {
    id: bigint
    spendingCodeId: bigint
    detail: string | null
    funds: bigint
    date: Date
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type
    deleted: boolean
    createAt: Date
    createBy: bigint | null
    updatedAt: Date
    updatedBy: bigint | null
    _count: ChurchSpendingCountAggregateOutputType | null
    _avg: ChurchSpendingAvgAggregateOutputType | null
    _sum: ChurchSpendingSumAggregateOutputType | null
    _min: ChurchSpendingMinAggregateOutputType | null
    _max: ChurchSpendingMaxAggregateOutputType | null
  }

  type GetChurchSpendingGroupByPayload<T extends ChurchSpendingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchSpendingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchSpendingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchSpendingGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchSpendingGroupByOutputType[P]>
        }
      >
    >


  export type ChurchSpendingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpending"]>

  export type ChurchSpendingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpending"]>

  export type ChurchSpendingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpending"]>

  export type ChurchSpendingSelectScalar = {
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ChurchSpendingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spendingCodeId" | "detail" | "funds" | "date" | "bill" | "billNumber" | "fundsType" | "deleted" | "createAt" | "createBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["churchSpending"]>
  export type ChurchSpendingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs>
  }
  export type ChurchSpendingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs>
  }
  export type ChurchSpendingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingCreateByRel?: boolean | ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs>
    churchSpendingUpdateByRel?: boolean | ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs>
  }

  export type $ChurchSpendingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchSpending"
    objects: {
      churchSpendingCodeIdRel: Prisma.$ChurchSpendingCodePayload<ExtArgs>
      churchSpendingCreateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchSpendingUpdateByRel: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      spendingCodeId: bigint
      detail: string | null
      funds: bigint
      date: Date
      bill: string | null
      billNumber: string | null
      fundsType: $Enums.Type
      deleted: boolean
      createAt: Date
      createBy: bigint | null
      updatedAt: Date
      updatedBy: bigint | null
    }, ExtArgs["result"]["churchSpending"]>
    composites: {}
  }

  type ChurchSpendingGetPayload<S extends boolean | null | undefined | ChurchSpendingDefaultArgs> = $Result.GetResult<Prisma.$ChurchSpendingPayload, S>

  type ChurchSpendingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchSpendingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchSpendingCountAggregateInputType | true
    }

  export interface ChurchSpendingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchSpending'], meta: { name: 'ChurchSpending' } }
    /**
     * Find zero or one ChurchSpending that matches the filter.
     * @param {ChurchSpendingFindUniqueArgs} args - Arguments to find a ChurchSpending
     * @example
     * // Get one ChurchSpending
     * const churchSpending = await prisma.churchSpending.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchSpendingFindUniqueArgs>(args: SelectSubset<T, ChurchSpendingFindUniqueArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ChurchSpending that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchSpendingFindUniqueOrThrowArgs} args - Arguments to find a ChurchSpending
     * @example
     * // Get one ChurchSpending
     * const churchSpending = await prisma.churchSpending.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchSpendingFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchSpendingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchSpending that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingFindFirstArgs} args - Arguments to find a ChurchSpending
     * @example
     * // Get one ChurchSpending
     * const churchSpending = await prisma.churchSpending.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchSpendingFindFirstArgs>(args?: SelectSubset<T, ChurchSpendingFindFirstArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchSpending that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingFindFirstOrThrowArgs} args - Arguments to find a ChurchSpending
     * @example
     * // Get one ChurchSpending
     * const churchSpending = await prisma.churchSpending.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchSpendingFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchSpendingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ChurchSpendings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchSpendings
     * const churchSpendings = await prisma.churchSpending.findMany()
     * 
     * // Get first 10 ChurchSpendings
     * const churchSpendings = await prisma.churchSpending.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchSpendingWithIdOnly = await prisma.churchSpending.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchSpendingFindManyArgs>(args?: SelectSubset<T, ChurchSpendingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ChurchSpending.
     * @param {ChurchSpendingCreateArgs} args - Arguments to create a ChurchSpending.
     * @example
     * // Create one ChurchSpending
     * const ChurchSpending = await prisma.churchSpending.create({
     *   data: {
     *     // ... data to create a ChurchSpending
     *   }
     * })
     * 
     */
    create<T extends ChurchSpendingCreateArgs>(args: SelectSubset<T, ChurchSpendingCreateArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ChurchSpendings.
     * @param {ChurchSpendingCreateManyArgs} args - Arguments to create many ChurchSpendings.
     * @example
     * // Create many ChurchSpendings
     * const churchSpending = await prisma.churchSpending.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchSpendingCreateManyArgs>(args?: SelectSubset<T, ChurchSpendingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchSpendings and returns the data saved in the database.
     * @param {ChurchSpendingCreateManyAndReturnArgs} args - Arguments to create many ChurchSpendings.
     * @example
     * // Create many ChurchSpendings
     * const churchSpending = await prisma.churchSpending.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchSpendings and only return the `id`
     * const churchSpendingWithIdOnly = await prisma.churchSpending.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchSpendingCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchSpendingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ChurchSpending.
     * @param {ChurchSpendingDeleteArgs} args - Arguments to delete one ChurchSpending.
     * @example
     * // Delete one ChurchSpending
     * const ChurchSpending = await prisma.churchSpending.delete({
     *   where: {
     *     // ... filter to delete one ChurchSpending
     *   }
     * })
     * 
     */
    delete<T extends ChurchSpendingDeleteArgs>(args: SelectSubset<T, ChurchSpendingDeleteArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ChurchSpending.
     * @param {ChurchSpendingUpdateArgs} args - Arguments to update one ChurchSpending.
     * @example
     * // Update one ChurchSpending
     * const churchSpending = await prisma.churchSpending.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchSpendingUpdateArgs>(args: SelectSubset<T, ChurchSpendingUpdateArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ChurchSpendings.
     * @param {ChurchSpendingDeleteManyArgs} args - Arguments to filter ChurchSpendings to delete.
     * @example
     * // Delete a few ChurchSpendings
     * const { count } = await prisma.churchSpending.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchSpendingDeleteManyArgs>(args?: SelectSubset<T, ChurchSpendingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchSpendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchSpendings
     * const churchSpending = await prisma.churchSpending.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchSpendingUpdateManyArgs>(args: SelectSubset<T, ChurchSpendingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchSpendings and returns the data updated in the database.
     * @param {ChurchSpendingUpdateManyAndReturnArgs} args - Arguments to update many ChurchSpendings.
     * @example
     * // Update many ChurchSpendings
     * const churchSpending = await prisma.churchSpending.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchSpendings and only return the `id`
     * const churchSpendingWithIdOnly = await prisma.churchSpending.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchSpendingUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchSpendingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ChurchSpending.
     * @param {ChurchSpendingUpsertArgs} args - Arguments to update or create a ChurchSpending.
     * @example
     * // Update or create a ChurchSpending
     * const churchSpending = await prisma.churchSpending.upsert({
     *   create: {
     *     // ... data to create a ChurchSpending
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchSpending we want to update
     *   }
     * })
     */
    upsert<T extends ChurchSpendingUpsertArgs>(args: SelectSubset<T, ChurchSpendingUpsertArgs<ExtArgs>>): Prisma__ChurchSpendingClient<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ChurchSpendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCountArgs} args - Arguments to filter ChurchSpendings to count.
     * @example
     * // Count the number of ChurchSpendings
     * const count = await prisma.churchSpending.count({
     *   where: {
     *     // ... the filter for the ChurchSpendings we want to count
     *   }
     * })
    **/
    count<T extends ChurchSpendingCountArgs>(
      args?: Subset<T, ChurchSpendingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchSpendingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchSpending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchSpendingAggregateArgs>(args: Subset<T, ChurchSpendingAggregateArgs>): Prisma.PrismaPromise<GetChurchSpendingAggregateType<T>>

    /**
     * Group by ChurchSpending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchSpendingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchSpendingGroupByArgs['orderBy'] }
        : { orderBy?: ChurchSpendingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchSpendingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchSpendingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchSpending model
   */
  readonly fields: ChurchSpendingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchSpending.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchSpendingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    churchSpendingCodeIdRel<T extends ChurchSpendingCodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingCodeDefaultArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    churchSpendingCreateByRel<T extends ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchSpendingUpdateByRel<T extends ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchSpending model
   */ 
  interface ChurchSpendingFieldRefs {
    readonly id: FieldRef<"ChurchSpending", 'BigInt'>
    readonly spendingCodeId: FieldRef<"ChurchSpending", 'BigInt'>
    readonly detail: FieldRef<"ChurchSpending", 'String'>
    readonly funds: FieldRef<"ChurchSpending", 'BigInt'>
    readonly date: FieldRef<"ChurchSpending", 'DateTime'>
    readonly bill: FieldRef<"ChurchSpending", 'String'>
    readonly billNumber: FieldRef<"ChurchSpending", 'String'>
    readonly fundsType: FieldRef<"ChurchSpending", 'Type'>
    readonly deleted: FieldRef<"ChurchSpending", 'Boolean'>
    readonly createAt: FieldRef<"ChurchSpending", 'DateTime'>
    readonly createBy: FieldRef<"ChurchSpending", 'BigInt'>
    readonly updatedAt: FieldRef<"ChurchSpending", 'DateTime'>
    readonly updatedBy: FieldRef<"ChurchSpending", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ChurchSpending findUnique
   */
  export type ChurchSpendingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpending to fetch.
     */
    where: ChurchSpendingWhereUniqueInput
  }

  /**
   * ChurchSpending findUniqueOrThrow
   */
  export type ChurchSpendingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpending to fetch.
     */
    where: ChurchSpendingWhereUniqueInput
  }

  /**
   * ChurchSpending findFirst
   */
  export type ChurchSpendingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpending to fetch.
     */
    where?: ChurchSpendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendings to fetch.
     */
    orderBy?: ChurchSpendingOrderByWithRelationInput | ChurchSpendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchSpendings.
     */
    cursor?: ChurchSpendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchSpendings.
     */
    distinct?: ChurchSpendingScalarFieldEnum | ChurchSpendingScalarFieldEnum[]
  }

  /**
   * ChurchSpending findFirstOrThrow
   */
  export type ChurchSpendingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpending to fetch.
     */
    where?: ChurchSpendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendings to fetch.
     */
    orderBy?: ChurchSpendingOrderByWithRelationInput | ChurchSpendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchSpendings.
     */
    cursor?: ChurchSpendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchSpendings.
     */
    distinct?: ChurchSpendingScalarFieldEnum | ChurchSpendingScalarFieldEnum[]
  }

  /**
   * ChurchSpending findMany
   */
  export type ChurchSpendingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendings to fetch.
     */
    where?: ChurchSpendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendings to fetch.
     */
    orderBy?: ChurchSpendingOrderByWithRelationInput | ChurchSpendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchSpendings.
     */
    cursor?: ChurchSpendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendings.
     */
    skip?: number
    distinct?: ChurchSpendingScalarFieldEnum | ChurchSpendingScalarFieldEnum[]
  }

  /**
   * ChurchSpending create
   */
  export type ChurchSpendingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchSpending.
     */
    data: XOR<ChurchSpendingCreateInput, ChurchSpendingUncheckedCreateInput>
  }

  /**
   * ChurchSpending createMany
   */
  export type ChurchSpendingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchSpendings.
     */
    data: ChurchSpendingCreateManyInput | ChurchSpendingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchSpending createManyAndReturn
   */
  export type ChurchSpendingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchSpendings.
     */
    data: ChurchSpendingCreateManyInput | ChurchSpendingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchSpending update
   */
  export type ChurchSpendingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchSpending.
     */
    data: XOR<ChurchSpendingUpdateInput, ChurchSpendingUncheckedUpdateInput>
    /**
     * Choose, which ChurchSpending to update.
     */
    where: ChurchSpendingWhereUniqueInput
  }

  /**
   * ChurchSpending updateMany
   */
  export type ChurchSpendingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchSpendings.
     */
    data: XOR<ChurchSpendingUpdateManyMutationInput, ChurchSpendingUncheckedUpdateManyInput>
    /**
     * Filter which ChurchSpendings to update
     */
    where?: ChurchSpendingWhereInput
    /**
     * Limit how many ChurchSpendings to update.
     */
    limit?: number
  }

  /**
   * ChurchSpending updateManyAndReturn
   */
  export type ChurchSpendingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * The data used to update ChurchSpendings.
     */
    data: XOR<ChurchSpendingUpdateManyMutationInput, ChurchSpendingUncheckedUpdateManyInput>
    /**
     * Filter which ChurchSpendings to update
     */
    where?: ChurchSpendingWhereInput
    /**
     * Limit how many ChurchSpendings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchSpending upsert
   */
  export type ChurchSpendingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchSpending to update in case it exists.
     */
    where: ChurchSpendingWhereUniqueInput
    /**
     * In case the ChurchSpending found by the `where` argument doesn't exist, create a new ChurchSpending with this data.
     */
    create: XOR<ChurchSpendingCreateInput, ChurchSpendingUncheckedCreateInput>
    /**
     * In case the ChurchSpending was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchSpendingUpdateInput, ChurchSpendingUncheckedUpdateInput>
  }

  /**
   * ChurchSpending delete
   */
  export type ChurchSpendingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    /**
     * Filter which ChurchSpending to delete.
     */
    where: ChurchSpendingWhereUniqueInput
  }

  /**
   * ChurchSpending deleteMany
   */
  export type ChurchSpendingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchSpendings to delete
     */
    where?: ChurchSpendingWhereInput
    /**
     * Limit how many ChurchSpendings to delete.
     */
    limit?: number
  }

  /**
   * ChurchSpending.churchSpendingCreateByRel
   */
  export type ChurchSpending$churchSpendingCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchSpending.churchSpendingUpdateByRel
   */
  export type ChurchSpending$churchSpendingUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchSpending without action
   */
  export type ChurchSpendingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
  }


  /**
   * Model ChurchSpendingHistory
   */

  export type AggregateChurchSpendingHistory = {
    _count: ChurchSpendingHistoryCountAggregateOutputType | null
    _avg: ChurchSpendingHistoryAvgAggregateOutputType | null
    _sum: ChurchSpendingHistorySumAggregateOutputType | null
    _min: ChurchSpendingHistoryMinAggregateOutputType | null
    _max: ChurchSpendingHistoryMaxAggregateOutputType | null
  }

  export type ChurchSpendingHistoryAvgAggregateOutputType = {
    revId: number | null
    id: number | null
    spendingCodeId: number | null
    funds: number | null
    createBy: number | null
    updatedBy: number | null
  }

  export type ChurchSpendingHistorySumAggregateOutputType = {
    revId: bigint | null
    id: bigint | null
    spendingCodeId: bigint | null
    funds: bigint | null
    createBy: bigint | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingHistoryMinAggregateOutputType = {
    revId: bigint | null
    id: bigint | null
    spendingCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingHistoryMaxAggregateOutputType = {
    revId: bigint | null
    id: bigint | null
    spendingCodeId: bigint | null
    detail: string | null
    funds: bigint | null
    date: Date | null
    bill: string | null
    billNumber: string | null
    fundsType: $Enums.Type | null
    deleted: boolean | null
    createAt: Date | null
    createBy: bigint | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingHistoryCountAggregateOutputType = {
    revId: number
    id: number
    spendingCodeId: number
    detail: number
    funds: number
    date: number
    bill: number
    billNumber: number
    fundsType: number
    deleted: number
    createAt: number
    createBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ChurchSpendingHistoryAvgAggregateInputType = {
    revId?: true
    id?: true
    spendingCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchSpendingHistorySumAggregateInputType = {
    revId?: true
    id?: true
    spendingCodeId?: true
    funds?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchSpendingHistoryMinAggregateInputType = {
    revId?: true
    id?: true
    spendingCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchSpendingHistoryMaxAggregateInputType = {
    revId?: true
    id?: true
    spendingCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchSpendingHistoryCountAggregateInputType = {
    revId?: true
    id?: true
    spendingCodeId?: true
    detail?: true
    funds?: true
    date?: true
    bill?: true
    billNumber?: true
    fundsType?: true
    deleted?: true
    createAt?: true
    createBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ChurchSpendingHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchSpendingHistory to aggregate.
     */
    where?: ChurchSpendingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingHistories to fetch.
     */
    orderBy?: ChurchSpendingHistoryOrderByWithRelationInput | ChurchSpendingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchSpendingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchSpendingHistories
    **/
    _count?: true | ChurchSpendingHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChurchSpendingHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChurchSpendingHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchSpendingHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchSpendingHistoryMaxAggregateInputType
  }

  export type GetChurchSpendingHistoryAggregateType<T extends ChurchSpendingHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchSpendingHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchSpendingHistory[P]>
      : GetScalarType<T[P], AggregateChurchSpendingHistory[P]>
  }




  export type ChurchSpendingHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingHistoryWhereInput
    orderBy?: ChurchSpendingHistoryOrderByWithAggregationInput | ChurchSpendingHistoryOrderByWithAggregationInput[]
    by: ChurchSpendingHistoryScalarFieldEnum[] | ChurchSpendingHistoryScalarFieldEnum
    having?: ChurchSpendingHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchSpendingHistoryCountAggregateInputType | true
    _avg?: ChurchSpendingHistoryAvgAggregateInputType
    _sum?: ChurchSpendingHistorySumAggregateInputType
    _min?: ChurchSpendingHistoryMinAggregateInputType
    _max?: ChurchSpendingHistoryMaxAggregateInputType
  }

  export type ChurchSpendingHistoryGroupByOutputType = {
    revId: bigint
    id: bigint
    spendingCodeId: bigint
    detail: string | null
    funds: bigint
    date: Date
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted: boolean
    createAt: Date
    createBy: bigint | null
    updatedAt: Date
    updatedBy: bigint | null
    _count: ChurchSpendingHistoryCountAggregateOutputType | null
    _avg: ChurchSpendingHistoryAvgAggregateOutputType | null
    _sum: ChurchSpendingHistorySumAggregateOutputType | null
    _min: ChurchSpendingHistoryMinAggregateOutputType | null
    _max: ChurchSpendingHistoryMaxAggregateOutputType | null
  }

  type GetChurchSpendingHistoryGroupByPayload<T extends ChurchSpendingHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchSpendingHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchSpendingHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchSpendingHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchSpendingHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ChurchSpendingHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    revId?: boolean
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpendingHistory"]>

  export type ChurchSpendingHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    revId?: boolean
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpendingHistory"]>

  export type ChurchSpendingHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    revId?: boolean
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpendingHistory"]>

  export type ChurchSpendingHistorySelectScalar = {
    revId?: boolean
    id?: boolean
    spendingCodeId?: boolean
    detail?: boolean
    funds?: boolean
    date?: boolean
    bill?: boolean
    billNumber?: boolean
    fundsType?: boolean
    deleted?: boolean
    createAt?: boolean
    createBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ChurchSpendingHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"revId" | "id" | "spendingCodeId" | "detail" | "funds" | "date" | "bill" | "billNumber" | "fundsType" | "deleted" | "createAt" | "createBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["churchSpendingHistory"]>
  export type ChurchSpendingHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
  }
  export type ChurchSpendingHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
  }
  export type ChurchSpendingHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCodeDefaultArgs<ExtArgs>
    churchSpendingHistoryCreateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs>
    churchSpendingHistoryUpdateByRel?: boolean | ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs>
  }

  export type $ChurchSpendingHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchSpendingHistory"
    objects: {
      churchSpendingCodeHistoryIdRel: Prisma.$ChurchSpendingCodePayload<ExtArgs>
      churchSpendingHistoryCreateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchSpendingHistoryUpdateByRel: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      revId: bigint
      id: bigint
      spendingCodeId: bigint
      detail: string | null
      funds: bigint
      date: Date
      bill: string
      billNumber: string
      fundsType: $Enums.Type
      deleted: boolean
      createAt: Date
      createBy: bigint | null
      updatedAt: Date
      updatedBy: bigint | null
    }, ExtArgs["result"]["churchSpendingHistory"]>
    composites: {}
  }

  type ChurchSpendingHistoryGetPayload<S extends boolean | null | undefined | ChurchSpendingHistoryDefaultArgs> = $Result.GetResult<Prisma.$ChurchSpendingHistoryPayload, S>

  type ChurchSpendingHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchSpendingHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchSpendingHistoryCountAggregateInputType | true
    }

  export interface ChurchSpendingHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchSpendingHistory'], meta: { name: 'ChurchSpendingHistory' } }
    /**
     * Find zero or one ChurchSpendingHistory that matches the filter.
     * @param {ChurchSpendingHistoryFindUniqueArgs} args - Arguments to find a ChurchSpendingHistory
     * @example
     * // Get one ChurchSpendingHistory
     * const churchSpendingHistory = await prisma.churchSpendingHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchSpendingHistoryFindUniqueArgs>(args: SelectSubset<T, ChurchSpendingHistoryFindUniqueArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ChurchSpendingHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchSpendingHistoryFindUniqueOrThrowArgs} args - Arguments to find a ChurchSpendingHistory
     * @example
     * // Get one ChurchSpendingHistory
     * const churchSpendingHistory = await prisma.churchSpendingHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchSpendingHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchSpendingHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchSpendingHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingHistoryFindFirstArgs} args - Arguments to find a ChurchSpendingHistory
     * @example
     * // Get one ChurchSpendingHistory
     * const churchSpendingHistory = await prisma.churchSpendingHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchSpendingHistoryFindFirstArgs>(args?: SelectSubset<T, ChurchSpendingHistoryFindFirstArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchSpendingHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingHistoryFindFirstOrThrowArgs} args - Arguments to find a ChurchSpendingHistory
     * @example
     * // Get one ChurchSpendingHistory
     * const churchSpendingHistory = await prisma.churchSpendingHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchSpendingHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchSpendingHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ChurchSpendingHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchSpendingHistories
     * const churchSpendingHistories = await prisma.churchSpendingHistory.findMany()
     * 
     * // Get first 10 ChurchSpendingHistories
     * const churchSpendingHistories = await prisma.churchSpendingHistory.findMany({ take: 10 })
     * 
     * // Only select the `revId`
     * const churchSpendingHistoryWithRevIdOnly = await prisma.churchSpendingHistory.findMany({ select: { revId: true } })
     * 
     */
    findMany<T extends ChurchSpendingHistoryFindManyArgs>(args?: SelectSubset<T, ChurchSpendingHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ChurchSpendingHistory.
     * @param {ChurchSpendingHistoryCreateArgs} args - Arguments to create a ChurchSpendingHistory.
     * @example
     * // Create one ChurchSpendingHistory
     * const ChurchSpendingHistory = await prisma.churchSpendingHistory.create({
     *   data: {
     *     // ... data to create a ChurchSpendingHistory
     *   }
     * })
     * 
     */
    create<T extends ChurchSpendingHistoryCreateArgs>(args: SelectSubset<T, ChurchSpendingHistoryCreateArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ChurchSpendingHistories.
     * @param {ChurchSpendingHistoryCreateManyArgs} args - Arguments to create many ChurchSpendingHistories.
     * @example
     * // Create many ChurchSpendingHistories
     * const churchSpendingHistory = await prisma.churchSpendingHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchSpendingHistoryCreateManyArgs>(args?: SelectSubset<T, ChurchSpendingHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchSpendingHistories and returns the data saved in the database.
     * @param {ChurchSpendingHistoryCreateManyAndReturnArgs} args - Arguments to create many ChurchSpendingHistories.
     * @example
     * // Create many ChurchSpendingHistories
     * const churchSpendingHistory = await prisma.churchSpendingHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchSpendingHistories and only return the `revId`
     * const churchSpendingHistoryWithRevIdOnly = await prisma.churchSpendingHistory.createManyAndReturn({
     *   select: { revId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchSpendingHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchSpendingHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ChurchSpendingHistory.
     * @param {ChurchSpendingHistoryDeleteArgs} args - Arguments to delete one ChurchSpendingHistory.
     * @example
     * // Delete one ChurchSpendingHistory
     * const ChurchSpendingHistory = await prisma.churchSpendingHistory.delete({
     *   where: {
     *     // ... filter to delete one ChurchSpendingHistory
     *   }
     * })
     * 
     */
    delete<T extends ChurchSpendingHistoryDeleteArgs>(args: SelectSubset<T, ChurchSpendingHistoryDeleteArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ChurchSpendingHistory.
     * @param {ChurchSpendingHistoryUpdateArgs} args - Arguments to update one ChurchSpendingHistory.
     * @example
     * // Update one ChurchSpendingHistory
     * const churchSpendingHistory = await prisma.churchSpendingHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchSpendingHistoryUpdateArgs>(args: SelectSubset<T, ChurchSpendingHistoryUpdateArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ChurchSpendingHistories.
     * @param {ChurchSpendingHistoryDeleteManyArgs} args - Arguments to filter ChurchSpendingHistories to delete.
     * @example
     * // Delete a few ChurchSpendingHistories
     * const { count } = await prisma.churchSpendingHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchSpendingHistoryDeleteManyArgs>(args?: SelectSubset<T, ChurchSpendingHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchSpendingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchSpendingHistories
     * const churchSpendingHistory = await prisma.churchSpendingHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchSpendingHistoryUpdateManyArgs>(args: SelectSubset<T, ChurchSpendingHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchSpendingHistories and returns the data updated in the database.
     * @param {ChurchSpendingHistoryUpdateManyAndReturnArgs} args - Arguments to update many ChurchSpendingHistories.
     * @example
     * // Update many ChurchSpendingHistories
     * const churchSpendingHistory = await prisma.churchSpendingHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchSpendingHistories and only return the `revId`
     * const churchSpendingHistoryWithRevIdOnly = await prisma.churchSpendingHistory.updateManyAndReturn({
     *   select: { revId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchSpendingHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchSpendingHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ChurchSpendingHistory.
     * @param {ChurchSpendingHistoryUpsertArgs} args - Arguments to update or create a ChurchSpendingHistory.
     * @example
     * // Update or create a ChurchSpendingHistory
     * const churchSpendingHistory = await prisma.churchSpendingHistory.upsert({
     *   create: {
     *     // ... data to create a ChurchSpendingHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchSpendingHistory we want to update
     *   }
     * })
     */
    upsert<T extends ChurchSpendingHistoryUpsertArgs>(args: SelectSubset<T, ChurchSpendingHistoryUpsertArgs<ExtArgs>>): Prisma__ChurchSpendingHistoryClient<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ChurchSpendingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingHistoryCountArgs} args - Arguments to filter ChurchSpendingHistories to count.
     * @example
     * // Count the number of ChurchSpendingHistories
     * const count = await prisma.churchSpendingHistory.count({
     *   where: {
     *     // ... the filter for the ChurchSpendingHistories we want to count
     *   }
     * })
    **/
    count<T extends ChurchSpendingHistoryCountArgs>(
      args?: Subset<T, ChurchSpendingHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchSpendingHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchSpendingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchSpendingHistoryAggregateArgs>(args: Subset<T, ChurchSpendingHistoryAggregateArgs>): Prisma.PrismaPromise<GetChurchSpendingHistoryAggregateType<T>>

    /**
     * Group by ChurchSpendingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchSpendingHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchSpendingHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ChurchSpendingHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchSpendingHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchSpendingHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchSpendingHistory model
   */
  readonly fields: ChurchSpendingHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchSpendingHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchSpendingHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    churchSpendingCodeHistoryIdRel<T extends ChurchSpendingCodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingCodeDefaultArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    churchSpendingHistoryCreateByRel<T extends ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchSpendingHistoryUpdateByRel<T extends ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchSpendingHistory model
   */ 
  interface ChurchSpendingHistoryFieldRefs {
    readonly revId: FieldRef<"ChurchSpendingHistory", 'BigInt'>
    readonly id: FieldRef<"ChurchSpendingHistory", 'BigInt'>
    readonly spendingCodeId: FieldRef<"ChurchSpendingHistory", 'BigInt'>
    readonly detail: FieldRef<"ChurchSpendingHistory", 'String'>
    readonly funds: FieldRef<"ChurchSpendingHistory", 'BigInt'>
    readonly date: FieldRef<"ChurchSpendingHistory", 'DateTime'>
    readonly bill: FieldRef<"ChurchSpendingHistory", 'String'>
    readonly billNumber: FieldRef<"ChurchSpendingHistory", 'String'>
    readonly fundsType: FieldRef<"ChurchSpendingHistory", 'Type'>
    readonly deleted: FieldRef<"ChurchSpendingHistory", 'Boolean'>
    readonly createAt: FieldRef<"ChurchSpendingHistory", 'DateTime'>
    readonly createBy: FieldRef<"ChurchSpendingHistory", 'BigInt'>
    readonly updatedAt: FieldRef<"ChurchSpendingHistory", 'DateTime'>
    readonly updatedBy: FieldRef<"ChurchSpendingHistory", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ChurchSpendingHistory findUnique
   */
  export type ChurchSpendingHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingHistory to fetch.
     */
    where: ChurchSpendingHistoryWhereUniqueInput
  }

  /**
   * ChurchSpendingHistory findUniqueOrThrow
   */
  export type ChurchSpendingHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingHistory to fetch.
     */
    where: ChurchSpendingHistoryWhereUniqueInput
  }

  /**
   * ChurchSpendingHistory findFirst
   */
  export type ChurchSpendingHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingHistory to fetch.
     */
    where?: ChurchSpendingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingHistories to fetch.
     */
    orderBy?: ChurchSpendingHistoryOrderByWithRelationInput | ChurchSpendingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchSpendingHistories.
     */
    cursor?: ChurchSpendingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchSpendingHistories.
     */
    distinct?: ChurchSpendingHistoryScalarFieldEnum | ChurchSpendingHistoryScalarFieldEnum[]
  }

  /**
   * ChurchSpendingHistory findFirstOrThrow
   */
  export type ChurchSpendingHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingHistory to fetch.
     */
    where?: ChurchSpendingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingHistories to fetch.
     */
    orderBy?: ChurchSpendingHistoryOrderByWithRelationInput | ChurchSpendingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchSpendingHistories.
     */
    cursor?: ChurchSpendingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchSpendingHistories.
     */
    distinct?: ChurchSpendingHistoryScalarFieldEnum | ChurchSpendingHistoryScalarFieldEnum[]
  }

  /**
   * ChurchSpendingHistory findMany
   */
  export type ChurchSpendingHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingHistories to fetch.
     */
    where?: ChurchSpendingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingHistories to fetch.
     */
    orderBy?: ChurchSpendingHistoryOrderByWithRelationInput | ChurchSpendingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchSpendingHistories.
     */
    cursor?: ChurchSpendingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingHistories.
     */
    skip?: number
    distinct?: ChurchSpendingHistoryScalarFieldEnum | ChurchSpendingHistoryScalarFieldEnum[]
  }

  /**
   * ChurchSpendingHistory create
   */
  export type ChurchSpendingHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchSpendingHistory.
     */
    data: XOR<ChurchSpendingHistoryCreateInput, ChurchSpendingHistoryUncheckedCreateInput>
  }

  /**
   * ChurchSpendingHistory createMany
   */
  export type ChurchSpendingHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchSpendingHistories.
     */
    data: ChurchSpendingHistoryCreateManyInput | ChurchSpendingHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchSpendingHistory createManyAndReturn
   */
  export type ChurchSpendingHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchSpendingHistories.
     */
    data: ChurchSpendingHistoryCreateManyInput | ChurchSpendingHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchSpendingHistory update
   */
  export type ChurchSpendingHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchSpendingHistory.
     */
    data: XOR<ChurchSpendingHistoryUpdateInput, ChurchSpendingHistoryUncheckedUpdateInput>
    /**
     * Choose, which ChurchSpendingHistory to update.
     */
    where: ChurchSpendingHistoryWhereUniqueInput
  }

  /**
   * ChurchSpendingHistory updateMany
   */
  export type ChurchSpendingHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchSpendingHistories.
     */
    data: XOR<ChurchSpendingHistoryUpdateManyMutationInput, ChurchSpendingHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ChurchSpendingHistories to update
     */
    where?: ChurchSpendingHistoryWhereInput
    /**
     * Limit how many ChurchSpendingHistories to update.
     */
    limit?: number
  }

  /**
   * ChurchSpendingHistory updateManyAndReturn
   */
  export type ChurchSpendingHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ChurchSpendingHistories.
     */
    data: XOR<ChurchSpendingHistoryUpdateManyMutationInput, ChurchSpendingHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ChurchSpendingHistories to update
     */
    where?: ChurchSpendingHistoryWhereInput
    /**
     * Limit how many ChurchSpendingHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchSpendingHistory upsert
   */
  export type ChurchSpendingHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchSpendingHistory to update in case it exists.
     */
    where: ChurchSpendingHistoryWhereUniqueInput
    /**
     * In case the ChurchSpendingHistory found by the `where` argument doesn't exist, create a new ChurchSpendingHistory with this data.
     */
    create: XOR<ChurchSpendingHistoryCreateInput, ChurchSpendingHistoryUncheckedCreateInput>
    /**
     * In case the ChurchSpendingHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchSpendingHistoryUpdateInput, ChurchSpendingHistoryUncheckedUpdateInput>
  }

  /**
   * ChurchSpendingHistory delete
   */
  export type ChurchSpendingHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    /**
     * Filter which ChurchSpendingHistory to delete.
     */
    where: ChurchSpendingHistoryWhereUniqueInput
  }

  /**
   * ChurchSpendingHistory deleteMany
   */
  export type ChurchSpendingHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchSpendingHistories to delete
     */
    where?: ChurchSpendingHistoryWhereInput
    /**
     * Limit how many ChurchSpendingHistories to delete.
     */
    limit?: number
  }

  /**
   * ChurchSpendingHistory.churchSpendingHistoryCreateByRel
   */
  export type ChurchSpendingHistory$churchSpendingHistoryCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchSpendingHistory.churchSpendingHistoryUpdateByRel
   */
  export type ChurchSpendingHistory$churchSpendingHistoryUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchSpendingHistory without action
   */
  export type ChurchSpendingHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ChurchSpendingCode
   */

  export type AggregateChurchSpendingCode = {
    _count: ChurchSpendingCodeCountAggregateOutputType | null
    _avg: ChurchSpendingCodeAvgAggregateOutputType | null
    _sum: ChurchSpendingCodeSumAggregateOutputType | null
    _min: ChurchSpendingCodeMinAggregateOutputType | null
    _max: ChurchSpendingCodeMaxAggregateOutputType | null
  }

  export type ChurchSpendingCodeAvgAggregateOutputType = {
    id: number | null
    createBy: number | null
    updatedBy: number | null
  }

  export type ChurchSpendingCodeSumAggregateOutputType = {
    id: bigint | null
    createBy: bigint | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingCodeMinAggregateOutputType = {
    id: bigint | null
    spendingCodeName: string | null
    code: string | null
    description: string | null
    createAt: Date | null
    createBy: bigint | null
    deleted: boolean | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingCodeMaxAggregateOutputType = {
    id: bigint | null
    spendingCodeName: string | null
    code: string | null
    description: string | null
    createAt: Date | null
    createBy: bigint | null
    deleted: boolean | null
    updatedAt: Date | null
    updatedBy: bigint | null
  }

  export type ChurchSpendingCodeCountAggregateOutputType = {
    id: number
    spendingCodeName: number
    code: number
    description: number
    createAt: number
    createBy: number
    deleted: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ChurchSpendingCodeAvgAggregateInputType = {
    id?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchSpendingCodeSumAggregateInputType = {
    id?: true
    createBy?: true
    updatedBy?: true
  }

  export type ChurchSpendingCodeMinAggregateInputType = {
    id?: true
    spendingCodeName?: true
    code?: true
    description?: true
    createAt?: true
    createBy?: true
    deleted?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchSpendingCodeMaxAggregateInputType = {
    id?: true
    spendingCodeName?: true
    code?: true
    description?: true
    createAt?: true
    createBy?: true
    deleted?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ChurchSpendingCodeCountAggregateInputType = {
    id?: true
    spendingCodeName?: true
    code?: true
    description?: true
    createAt?: true
    createBy?: true
    deleted?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ChurchSpendingCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchSpendingCode to aggregate.
     */
    where?: ChurchSpendingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingCodes to fetch.
     */
    orderBy?: ChurchSpendingCodeOrderByWithRelationInput | ChurchSpendingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchSpendingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchSpendingCodes
    **/
    _count?: true | ChurchSpendingCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChurchSpendingCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChurchSpendingCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchSpendingCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchSpendingCodeMaxAggregateInputType
  }

  export type GetChurchSpendingCodeAggregateType<T extends ChurchSpendingCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchSpendingCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchSpendingCode[P]>
      : GetScalarType<T[P], AggregateChurchSpendingCode[P]>
  }




  export type ChurchSpendingCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchSpendingCodeWhereInput
    orderBy?: ChurchSpendingCodeOrderByWithAggregationInput | ChurchSpendingCodeOrderByWithAggregationInput[]
    by: ChurchSpendingCodeScalarFieldEnum[] | ChurchSpendingCodeScalarFieldEnum
    having?: ChurchSpendingCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchSpendingCodeCountAggregateInputType | true
    _avg?: ChurchSpendingCodeAvgAggregateInputType
    _sum?: ChurchSpendingCodeSumAggregateInputType
    _min?: ChurchSpendingCodeMinAggregateInputType
    _max?: ChurchSpendingCodeMaxAggregateInputType
  }

  export type ChurchSpendingCodeGroupByOutputType = {
    id: bigint
    spendingCodeName: string
    code: string
    description: string
    createAt: Date
    createBy: bigint | null
    deleted: boolean
    updatedAt: Date
    updatedBy: bigint | null
    _count: ChurchSpendingCodeCountAggregateOutputType | null
    _avg: ChurchSpendingCodeAvgAggregateOutputType | null
    _sum: ChurchSpendingCodeSumAggregateOutputType | null
    _min: ChurchSpendingCodeMinAggregateOutputType | null
    _max: ChurchSpendingCodeMaxAggregateOutputType | null
  }

  type GetChurchSpendingCodeGroupByPayload<T extends ChurchSpendingCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchSpendingCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchSpendingCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchSpendingCodeGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchSpendingCodeGroupByOutputType[P]>
        }
      >
    >


  export type ChurchSpendingCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spendingCodeName?: boolean
    code?: boolean
    description?: boolean
    createAt?: boolean
    createBy?: boolean
    deleted?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeCreateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs>
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCode$churchSpendingCodeIdRelArgs<ExtArgs>
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCode$churchSpendingCodeHistoryIdRelArgs<ExtArgs>
    _count?: boolean | ChurchSpendingCodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpendingCode"]>

  export type ChurchSpendingCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spendingCodeName?: boolean
    code?: boolean
    description?: boolean
    createAt?: boolean
    createBy?: boolean
    deleted?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeCreateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpendingCode"]>

  export type ChurchSpendingCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spendingCodeName?: boolean
    code?: boolean
    description?: boolean
    createAt?: boolean
    createBy?: boolean
    deleted?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    churchSpendingCodeCreateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs>
  }, ExtArgs["result"]["churchSpendingCode"]>

  export type ChurchSpendingCodeSelectScalar = {
    id?: boolean
    spendingCodeName?: boolean
    code?: boolean
    description?: boolean
    createAt?: boolean
    createBy?: boolean
    deleted?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ChurchSpendingCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "spendingCodeName" | "code" | "description" | "createAt" | "createBy" | "deleted" | "updatedAt" | "updatedBy", ExtArgs["result"]["churchSpendingCode"]>
  export type ChurchSpendingCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeCreateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs>
    churchSpendingCodeIdRel?: boolean | ChurchSpendingCode$churchSpendingCodeIdRelArgs<ExtArgs>
    churchSpendingCodeHistoryIdRel?: boolean | ChurchSpendingCode$churchSpendingCodeHistoryIdRelArgs<ExtArgs>
    _count?: boolean | ChurchSpendingCodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChurchSpendingCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeCreateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs>
  }
  export type ChurchSpendingCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    churchSpendingCodeCreateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs>
    churchSpendingCodeUpdateByRel?: boolean | ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs>
  }

  export type $ChurchSpendingCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchSpendingCode"
    objects: {
      churchSpendingCodeCreateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchSpendingCodeUpdateByRel: Prisma.$UserPayload<ExtArgs> | null
      churchSpendingCodeIdRel: Prisma.$ChurchSpendingPayload<ExtArgs>[]
      churchSpendingCodeHistoryIdRel: Prisma.$ChurchSpendingHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      spendingCodeName: string
      code: string
      description: string
      createAt: Date
      createBy: bigint | null
      deleted: boolean
      updatedAt: Date
      updatedBy: bigint | null
    }, ExtArgs["result"]["churchSpendingCode"]>
    composites: {}
  }

  type ChurchSpendingCodeGetPayload<S extends boolean | null | undefined | ChurchSpendingCodeDefaultArgs> = $Result.GetResult<Prisma.$ChurchSpendingCodePayload, S>

  type ChurchSpendingCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchSpendingCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchSpendingCodeCountAggregateInputType | true
    }

  export interface ChurchSpendingCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchSpendingCode'], meta: { name: 'ChurchSpendingCode' } }
    /**
     * Find zero or one ChurchSpendingCode that matches the filter.
     * @param {ChurchSpendingCodeFindUniqueArgs} args - Arguments to find a ChurchSpendingCode
     * @example
     * // Get one ChurchSpendingCode
     * const churchSpendingCode = await prisma.churchSpendingCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchSpendingCodeFindUniqueArgs>(args: SelectSubset<T, ChurchSpendingCodeFindUniqueArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ChurchSpendingCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchSpendingCodeFindUniqueOrThrowArgs} args - Arguments to find a ChurchSpendingCode
     * @example
     * // Get one ChurchSpendingCode
     * const churchSpendingCode = await prisma.churchSpendingCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchSpendingCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchSpendingCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchSpendingCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCodeFindFirstArgs} args - Arguments to find a ChurchSpendingCode
     * @example
     * // Get one ChurchSpendingCode
     * const churchSpendingCode = await prisma.churchSpendingCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchSpendingCodeFindFirstArgs>(args?: SelectSubset<T, ChurchSpendingCodeFindFirstArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ChurchSpendingCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCodeFindFirstOrThrowArgs} args - Arguments to find a ChurchSpendingCode
     * @example
     * // Get one ChurchSpendingCode
     * const churchSpendingCode = await prisma.churchSpendingCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchSpendingCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchSpendingCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ChurchSpendingCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchSpendingCodes
     * const churchSpendingCodes = await prisma.churchSpendingCode.findMany()
     * 
     * // Get first 10 ChurchSpendingCodes
     * const churchSpendingCodes = await prisma.churchSpendingCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchSpendingCodeWithIdOnly = await prisma.churchSpendingCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchSpendingCodeFindManyArgs>(args?: SelectSubset<T, ChurchSpendingCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ChurchSpendingCode.
     * @param {ChurchSpendingCodeCreateArgs} args - Arguments to create a ChurchSpendingCode.
     * @example
     * // Create one ChurchSpendingCode
     * const ChurchSpendingCode = await prisma.churchSpendingCode.create({
     *   data: {
     *     // ... data to create a ChurchSpendingCode
     *   }
     * })
     * 
     */
    create<T extends ChurchSpendingCodeCreateArgs>(args: SelectSubset<T, ChurchSpendingCodeCreateArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ChurchSpendingCodes.
     * @param {ChurchSpendingCodeCreateManyArgs} args - Arguments to create many ChurchSpendingCodes.
     * @example
     * // Create many ChurchSpendingCodes
     * const churchSpendingCode = await prisma.churchSpendingCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchSpendingCodeCreateManyArgs>(args?: SelectSubset<T, ChurchSpendingCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchSpendingCodes and returns the data saved in the database.
     * @param {ChurchSpendingCodeCreateManyAndReturnArgs} args - Arguments to create many ChurchSpendingCodes.
     * @example
     * // Create many ChurchSpendingCodes
     * const churchSpendingCode = await prisma.churchSpendingCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchSpendingCodes and only return the `id`
     * const churchSpendingCodeWithIdOnly = await prisma.churchSpendingCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchSpendingCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchSpendingCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ChurchSpendingCode.
     * @param {ChurchSpendingCodeDeleteArgs} args - Arguments to delete one ChurchSpendingCode.
     * @example
     * // Delete one ChurchSpendingCode
     * const ChurchSpendingCode = await prisma.churchSpendingCode.delete({
     *   where: {
     *     // ... filter to delete one ChurchSpendingCode
     *   }
     * })
     * 
     */
    delete<T extends ChurchSpendingCodeDeleteArgs>(args: SelectSubset<T, ChurchSpendingCodeDeleteArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ChurchSpendingCode.
     * @param {ChurchSpendingCodeUpdateArgs} args - Arguments to update one ChurchSpendingCode.
     * @example
     * // Update one ChurchSpendingCode
     * const churchSpendingCode = await prisma.churchSpendingCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchSpendingCodeUpdateArgs>(args: SelectSubset<T, ChurchSpendingCodeUpdateArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ChurchSpendingCodes.
     * @param {ChurchSpendingCodeDeleteManyArgs} args - Arguments to filter ChurchSpendingCodes to delete.
     * @example
     * // Delete a few ChurchSpendingCodes
     * const { count } = await prisma.churchSpendingCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchSpendingCodeDeleteManyArgs>(args?: SelectSubset<T, ChurchSpendingCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchSpendingCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchSpendingCodes
     * const churchSpendingCode = await prisma.churchSpendingCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchSpendingCodeUpdateManyArgs>(args: SelectSubset<T, ChurchSpendingCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchSpendingCodes and returns the data updated in the database.
     * @param {ChurchSpendingCodeUpdateManyAndReturnArgs} args - Arguments to update many ChurchSpendingCodes.
     * @example
     * // Update many ChurchSpendingCodes
     * const churchSpendingCode = await prisma.churchSpendingCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchSpendingCodes and only return the `id`
     * const churchSpendingCodeWithIdOnly = await prisma.churchSpendingCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchSpendingCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchSpendingCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ChurchSpendingCode.
     * @param {ChurchSpendingCodeUpsertArgs} args - Arguments to update or create a ChurchSpendingCode.
     * @example
     * // Update or create a ChurchSpendingCode
     * const churchSpendingCode = await prisma.churchSpendingCode.upsert({
     *   create: {
     *     // ... data to create a ChurchSpendingCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchSpendingCode we want to update
     *   }
     * })
     */
    upsert<T extends ChurchSpendingCodeUpsertArgs>(args: SelectSubset<T, ChurchSpendingCodeUpsertArgs<ExtArgs>>): Prisma__ChurchSpendingCodeClient<$Result.GetResult<Prisma.$ChurchSpendingCodePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ChurchSpendingCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCodeCountArgs} args - Arguments to filter ChurchSpendingCodes to count.
     * @example
     * // Count the number of ChurchSpendingCodes
     * const count = await prisma.churchSpendingCode.count({
     *   where: {
     *     // ... the filter for the ChurchSpendingCodes we want to count
     *   }
     * })
    **/
    count<T extends ChurchSpendingCodeCountArgs>(
      args?: Subset<T, ChurchSpendingCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchSpendingCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchSpendingCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchSpendingCodeAggregateArgs>(args: Subset<T, ChurchSpendingCodeAggregateArgs>): Prisma.PrismaPromise<GetChurchSpendingCodeAggregateType<T>>

    /**
     * Group by ChurchSpendingCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchSpendingCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchSpendingCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchSpendingCodeGroupByArgs['orderBy'] }
        : { orderBy?: ChurchSpendingCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchSpendingCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchSpendingCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchSpendingCode model
   */
  readonly fields: ChurchSpendingCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchSpendingCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchSpendingCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    churchSpendingCodeCreateByRel<T extends ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchSpendingCodeUpdateByRel<T extends ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    churchSpendingCodeIdRel<T extends ChurchSpendingCode$churchSpendingCodeIdRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingCode$churchSpendingCodeIdRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    churchSpendingCodeHistoryIdRel<T extends ChurchSpendingCode$churchSpendingCodeHistoryIdRelArgs<ExtArgs> = {}>(args?: Subset<T, ChurchSpendingCode$churchSpendingCodeHistoryIdRelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchSpendingHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchSpendingCode model
   */ 
  interface ChurchSpendingCodeFieldRefs {
    readonly id: FieldRef<"ChurchSpendingCode", 'BigInt'>
    readonly spendingCodeName: FieldRef<"ChurchSpendingCode", 'String'>
    readonly code: FieldRef<"ChurchSpendingCode", 'String'>
    readonly description: FieldRef<"ChurchSpendingCode", 'String'>
    readonly createAt: FieldRef<"ChurchSpendingCode", 'DateTime'>
    readonly createBy: FieldRef<"ChurchSpendingCode", 'BigInt'>
    readonly deleted: FieldRef<"ChurchSpendingCode", 'Boolean'>
    readonly updatedAt: FieldRef<"ChurchSpendingCode", 'DateTime'>
    readonly updatedBy: FieldRef<"ChurchSpendingCode", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ChurchSpendingCode findUnique
   */
  export type ChurchSpendingCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingCode to fetch.
     */
    where: ChurchSpendingCodeWhereUniqueInput
  }

  /**
   * ChurchSpendingCode findUniqueOrThrow
   */
  export type ChurchSpendingCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingCode to fetch.
     */
    where: ChurchSpendingCodeWhereUniqueInput
  }

  /**
   * ChurchSpendingCode findFirst
   */
  export type ChurchSpendingCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingCode to fetch.
     */
    where?: ChurchSpendingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingCodes to fetch.
     */
    orderBy?: ChurchSpendingCodeOrderByWithRelationInput | ChurchSpendingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchSpendingCodes.
     */
    cursor?: ChurchSpendingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchSpendingCodes.
     */
    distinct?: ChurchSpendingCodeScalarFieldEnum | ChurchSpendingCodeScalarFieldEnum[]
  }

  /**
   * ChurchSpendingCode findFirstOrThrow
   */
  export type ChurchSpendingCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingCode to fetch.
     */
    where?: ChurchSpendingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingCodes to fetch.
     */
    orderBy?: ChurchSpendingCodeOrderByWithRelationInput | ChurchSpendingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchSpendingCodes.
     */
    cursor?: ChurchSpendingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchSpendingCodes.
     */
    distinct?: ChurchSpendingCodeScalarFieldEnum | ChurchSpendingCodeScalarFieldEnum[]
  }

  /**
   * ChurchSpendingCode findMany
   */
  export type ChurchSpendingCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchSpendingCodes to fetch.
     */
    where?: ChurchSpendingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchSpendingCodes to fetch.
     */
    orderBy?: ChurchSpendingCodeOrderByWithRelationInput | ChurchSpendingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchSpendingCodes.
     */
    cursor?: ChurchSpendingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchSpendingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchSpendingCodes.
     */
    skip?: number
    distinct?: ChurchSpendingCodeScalarFieldEnum | ChurchSpendingCodeScalarFieldEnum[]
  }

  /**
   * ChurchSpendingCode create
   */
  export type ChurchSpendingCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchSpendingCode.
     */
    data: XOR<ChurchSpendingCodeCreateInput, ChurchSpendingCodeUncheckedCreateInput>
  }

  /**
   * ChurchSpendingCode createMany
   */
  export type ChurchSpendingCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchSpendingCodes.
     */
    data: ChurchSpendingCodeCreateManyInput | ChurchSpendingCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchSpendingCode createManyAndReturn
   */
  export type ChurchSpendingCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchSpendingCodes.
     */
    data: ChurchSpendingCodeCreateManyInput | ChurchSpendingCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchSpendingCode update
   */
  export type ChurchSpendingCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchSpendingCode.
     */
    data: XOR<ChurchSpendingCodeUpdateInput, ChurchSpendingCodeUncheckedUpdateInput>
    /**
     * Choose, which ChurchSpendingCode to update.
     */
    where: ChurchSpendingCodeWhereUniqueInput
  }

  /**
   * ChurchSpendingCode updateMany
   */
  export type ChurchSpendingCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchSpendingCodes.
     */
    data: XOR<ChurchSpendingCodeUpdateManyMutationInput, ChurchSpendingCodeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchSpendingCodes to update
     */
    where?: ChurchSpendingCodeWhereInput
    /**
     * Limit how many ChurchSpendingCodes to update.
     */
    limit?: number
  }

  /**
   * ChurchSpendingCode updateManyAndReturn
   */
  export type ChurchSpendingCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * The data used to update ChurchSpendingCodes.
     */
    data: XOR<ChurchSpendingCodeUpdateManyMutationInput, ChurchSpendingCodeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchSpendingCodes to update
     */
    where?: ChurchSpendingCodeWhereInput
    /**
     * Limit how many ChurchSpendingCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchSpendingCode upsert
   */
  export type ChurchSpendingCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchSpendingCode to update in case it exists.
     */
    where: ChurchSpendingCodeWhereUniqueInput
    /**
     * In case the ChurchSpendingCode found by the `where` argument doesn't exist, create a new ChurchSpendingCode with this data.
     */
    create: XOR<ChurchSpendingCodeCreateInput, ChurchSpendingCodeUncheckedCreateInput>
    /**
     * In case the ChurchSpendingCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchSpendingCodeUpdateInput, ChurchSpendingCodeUncheckedUpdateInput>
  }

  /**
   * ChurchSpendingCode delete
   */
  export type ChurchSpendingCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
    /**
     * Filter which ChurchSpendingCode to delete.
     */
    where: ChurchSpendingCodeWhereUniqueInput
  }

  /**
   * ChurchSpendingCode deleteMany
   */
  export type ChurchSpendingCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchSpendingCodes to delete
     */
    where?: ChurchSpendingCodeWhereInput
    /**
     * Limit how many ChurchSpendingCodes to delete.
     */
    limit?: number
  }

  /**
   * ChurchSpendingCode.churchSpendingCodeCreateByRel
   */
  export type ChurchSpendingCode$churchSpendingCodeCreateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchSpendingCode.churchSpendingCodeUpdateByRel
   */
  export type ChurchSpendingCode$churchSpendingCodeUpdateByRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChurchSpendingCode.churchSpendingCodeIdRel
   */
  export type ChurchSpendingCode$churchSpendingCodeIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpending
     */
    select?: ChurchSpendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpending
     */
    omit?: ChurchSpendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingInclude<ExtArgs> | null
    where?: ChurchSpendingWhereInput
    orderBy?: ChurchSpendingOrderByWithRelationInput | ChurchSpendingOrderByWithRelationInput[]
    cursor?: ChurchSpendingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingScalarFieldEnum | ChurchSpendingScalarFieldEnum[]
  }

  /**
   * ChurchSpendingCode.churchSpendingCodeHistoryIdRel
   */
  export type ChurchSpendingCode$churchSpendingCodeHistoryIdRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingHistory
     */
    select?: ChurchSpendingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingHistory
     */
    omit?: ChurchSpendingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingHistoryInclude<ExtArgs> | null
    where?: ChurchSpendingHistoryWhereInput
    orderBy?: ChurchSpendingHistoryOrderByWithRelationInput | ChurchSpendingHistoryOrderByWithRelationInput[]
    cursor?: ChurchSpendingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchSpendingHistoryScalarFieldEnum | ChurchSpendingHistoryScalarFieldEnum[]
  }

  /**
   * ChurchSpendingCode without action
   */
  export type ChurchSpendingCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchSpendingCode
     */
    select?: ChurchSpendingCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchSpendingCode
     */
    omit?: ChurchSpendingCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchSpendingCodeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    address: 'address',
    deleted: 'deleted',
    createAt: 'createAt',
    createBy: 'createBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deleted: 'deleted',
    oldData: 'oldData',
    newData: 'newData'
  };

  export type UserHistoryScalarFieldEnum = (typeof UserHistoryScalarFieldEnum)[keyof typeof UserHistoryScalarFieldEnum]


  export const ChurchIncomeScalarFieldEnum: {
    id: 'id',
    incomeCodeId: 'incomeCodeId',
    detail: 'detail',
    funds: 'funds',
    date: 'date',
    bill: 'bill',
    billNumber: 'billNumber',
    fundsType: 'fundsType',
    deleted: 'deleted',
    createAt: 'createAt',
    createBy: 'createBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ChurchIncomeScalarFieldEnum = (typeof ChurchIncomeScalarFieldEnum)[keyof typeof ChurchIncomeScalarFieldEnum]


  export const ChurchIncomeHistoryScalarFieldEnum: {
    revId: 'revId',
    id: 'id',
    incomeCodeId: 'incomeCodeId',
    detail: 'detail',
    funds: 'funds',
    date: 'date',
    bill: 'bill',
    billNumber: 'billNumber',
    fundsType: 'fundsType',
    deleted: 'deleted',
    createAt: 'createAt',
    createBy: 'createBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ChurchIncomeHistoryScalarFieldEnum = (typeof ChurchIncomeHistoryScalarFieldEnum)[keyof typeof ChurchIncomeHistoryScalarFieldEnum]


  export const ChurchIncomeCodeScalarFieldEnum: {
    id: 'id',
    incomeCodeName: 'incomeCodeName',
    code: 'code',
    description: 'description',
    deleted: 'deleted',
    createAt: 'createAt',
    createBy: 'createBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ChurchIncomeCodeScalarFieldEnum = (typeof ChurchIncomeCodeScalarFieldEnum)[keyof typeof ChurchIncomeCodeScalarFieldEnum]


  export const ChurchSpendingScalarFieldEnum: {
    id: 'id',
    spendingCodeId: 'spendingCodeId',
    detail: 'detail',
    funds: 'funds',
    date: 'date',
    bill: 'bill',
    billNumber: 'billNumber',
    fundsType: 'fundsType',
    deleted: 'deleted',
    createAt: 'createAt',
    createBy: 'createBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ChurchSpendingScalarFieldEnum = (typeof ChurchSpendingScalarFieldEnum)[keyof typeof ChurchSpendingScalarFieldEnum]


  export const ChurchSpendingHistoryScalarFieldEnum: {
    revId: 'revId',
    id: 'id',
    spendingCodeId: 'spendingCodeId',
    detail: 'detail',
    funds: 'funds',
    date: 'date',
    bill: 'bill',
    billNumber: 'billNumber',
    fundsType: 'fundsType',
    deleted: 'deleted',
    createAt: 'createAt',
    createBy: 'createBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ChurchSpendingHistoryScalarFieldEnum = (typeof ChurchSpendingHistoryScalarFieldEnum)[keyof typeof ChurchSpendingHistoryScalarFieldEnum]


  export const ChurchSpendingCodeScalarFieldEnum: {
    id: 'id',
    spendingCodeName: 'spendingCodeName',
    code: 'code',
    description: 'description',
    createAt: 'createAt',
    createBy: 'createBy',
    deleted: 'deleted',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ChurchSpendingCodeScalarFieldEnum = (typeof ChurchSpendingCodeScalarFieldEnum)[keyof typeof ChurchSpendingCodeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Type'
   */
  export type EnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type'>
    


  /**
   * Reference to a field of type 'Type[]'
   */
  export type ListEnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: BigIntFilter<"User"> | bigint | number
    userName?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    deleted?: BoolFilter<"User"> | boolean
    createAt?: DateTimeFilter<"User"> | Date | string
    createBy?: BigIntNullableFilter<"User"> | bigint | number | null
    updatedAt?: DateTimeFilter<"User"> | Date | string
    updatedBy?: BigIntNullableFilter<"User"> | bigint | number | null
    createdByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    selfCreatedByRel?: UserListRelationFilter
    updatedByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    selfUpdatedByRel?: UserListRelationFilter
    churchIncomeCreateByRel?: ChurchIncomeListRelationFilter
    churchIncomeUpdateByRel?: ChurchIncomeListRelationFilter
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeListRelationFilter
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeListRelationFilter
    churchSpendingCreateByRel?: ChurchSpendingListRelationFilter
    churchSpendingUpdateByRel?: ChurchSpendingListRelationFilter
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeListRelationFilter
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeListRelationFilter
    userHistoryCreatedByRel?: UserHistoryListRelationFilter
    userHistoryUpdatedByRel?: UserHistoryListRelationFilter
    userHistoryIdRel?: UserHistoryListRelationFilter
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryListRelationFilter
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryListRelationFilter
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryListRelationFilter
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    createdByRel?: UserOrderByWithRelationInput
    selfCreatedByRel?: UserOrderByRelationAggregateInput
    updatedByRel?: UserOrderByWithRelationInput
    selfUpdatedByRel?: UserOrderByRelationAggregateInput
    churchIncomeCreateByRel?: ChurchIncomeOrderByRelationAggregateInput
    churchIncomeUpdateByRel?: ChurchIncomeOrderByRelationAggregateInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeOrderByRelationAggregateInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeOrderByRelationAggregateInput
    churchSpendingCreateByRel?: ChurchSpendingOrderByRelationAggregateInput
    churchSpendingUpdateByRel?: ChurchSpendingOrderByRelationAggregateInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeOrderByRelationAggregateInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeOrderByRelationAggregateInput
    userHistoryCreatedByRel?: UserHistoryOrderByRelationAggregateInput
    userHistoryUpdatedByRel?: UserHistoryOrderByRelationAggregateInput
    userHistoryIdRel?: UserHistoryOrderByRelationAggregateInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryOrderByRelationAggregateInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryOrderByRelationAggregateInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryOrderByRelationAggregateInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userName?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    deleted?: BoolFilter<"User"> | boolean
    createAt?: DateTimeFilter<"User"> | Date | string
    createBy?: BigIntNullableFilter<"User"> | bigint | number | null
    updatedAt?: DateTimeFilter<"User"> | Date | string
    updatedBy?: BigIntNullableFilter<"User"> | bigint | number | null
    createdByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    selfCreatedByRel?: UserListRelationFilter
    updatedByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    selfUpdatedByRel?: UserListRelationFilter
    churchIncomeCreateByRel?: ChurchIncomeListRelationFilter
    churchIncomeUpdateByRel?: ChurchIncomeListRelationFilter
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeListRelationFilter
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeListRelationFilter
    churchSpendingCreateByRel?: ChurchSpendingListRelationFilter
    churchSpendingUpdateByRel?: ChurchSpendingListRelationFilter
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeListRelationFilter
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeListRelationFilter
    userHistoryCreatedByRel?: UserHistoryListRelationFilter
    userHistoryUpdatedByRel?: UserHistoryListRelationFilter
    userHistoryIdRel?: UserHistoryListRelationFilter
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryListRelationFilter
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryListRelationFilter
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryListRelationFilter
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"User"> | bigint | number
    userName?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    deleted?: BoolWithAggregatesFilter<"User"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createBy?: BigIntNullableWithAggregatesFilter<"User"> | bigint | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"User"> | bigint | number | null
  }

  export type UserHistoryWhereInput = {
    AND?: UserHistoryWhereInput | UserHistoryWhereInput[]
    OR?: UserHistoryWhereInput[]
    NOT?: UserHistoryWhereInput | UserHistoryWhereInput[]
    id?: BigIntFilter<"UserHistory"> | bigint | number
    userId?: BigIntFilter<"UserHistory"> | bigint | number
    createdAt?: DateTimeFilter<"UserHistory"> | Date | string
    createdBy?: BigIntNullableFilter<"UserHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"UserHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"UserHistory"> | bigint | number | null
    deleted?: BoolFilter<"UserHistory"> | boolean
    oldData?: JsonFilter<"UserHistory">
    newData?: JsonFilter<"UserHistory">
    userHistoryCreatedByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userHistoryUpdatedByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userHistoryIdRel?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deleted?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    userHistoryCreatedByRel?: UserOrderByWithRelationInput
    userHistoryUpdatedByRel?: UserOrderByWithRelationInput
    userHistoryIdRel?: UserOrderByWithRelationInput
  }

  export type UserHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: UserHistoryWhereInput | UserHistoryWhereInput[]
    OR?: UserHistoryWhereInput[]
    NOT?: UserHistoryWhereInput | UserHistoryWhereInput[]
    userId?: BigIntFilter<"UserHistory"> | bigint | number
    createdAt?: DateTimeFilter<"UserHistory"> | Date | string
    createdBy?: BigIntNullableFilter<"UserHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"UserHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"UserHistory"> | bigint | number | null
    deleted?: BoolFilter<"UserHistory"> | boolean
    oldData?: JsonFilter<"UserHistory">
    newData?: JsonFilter<"UserHistory">
    userHistoryCreatedByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userHistoryUpdatedByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userHistoryIdRel?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deleted?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    _count?: UserHistoryCountOrderByAggregateInput
    _avg?: UserHistoryAvgOrderByAggregateInput
    _max?: UserHistoryMaxOrderByAggregateInput
    _min?: UserHistoryMinOrderByAggregateInput
    _sum?: UserHistorySumOrderByAggregateInput
  }

  export type UserHistoryScalarWhereWithAggregatesInput = {
    AND?: UserHistoryScalarWhereWithAggregatesInput | UserHistoryScalarWhereWithAggregatesInput[]
    OR?: UserHistoryScalarWhereWithAggregatesInput[]
    NOT?: UserHistoryScalarWhereWithAggregatesInput | UserHistoryScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"UserHistory"> | bigint | number
    userId?: BigIntWithAggregatesFilter<"UserHistory"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"UserHistory"> | Date | string
    createdBy?: BigIntNullableWithAggregatesFilter<"UserHistory"> | bigint | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"UserHistory"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"UserHistory"> | bigint | number | null
    deleted?: BoolWithAggregatesFilter<"UserHistory"> | boolean
    oldData?: JsonWithAggregatesFilter<"UserHistory">
    newData?: JsonWithAggregatesFilter<"UserHistory">
  }

  export type ChurchIncomeWhereInput = {
    AND?: ChurchIncomeWhereInput | ChurchIncomeWhereInput[]
    OR?: ChurchIncomeWhereInput[]
    NOT?: ChurchIncomeWhereInput | ChurchIncomeWhereInput[]
    id?: BigIntFilter<"ChurchIncome"> | bigint | number
    incomeCodeId?: BigIntFilter<"ChurchIncome"> | bigint | number
    detail?: StringNullableFilter<"ChurchIncome"> | string | null
    funds?: BigIntFilter<"ChurchIncome"> | bigint | number
    date?: DateTimeFilter<"ChurchIncome"> | Date | string
    bill?: StringNullableFilter<"ChurchIncome"> | string | null
    billNumber?: StringNullableFilter<"ChurchIncome"> | string | null
    fundsType?: EnumTypeFilter<"ChurchIncome"> | $Enums.Type
    deleted?: BoolFilter<"ChurchIncome"> | boolean
    createAt?: DateTimeFilter<"ChurchIncome"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncome"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncome"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncome"> | bigint | number | null
    churchIncomeCodeIdRel?: XOR<ChurchIncomeCodeScalarRelationFilter, ChurchIncomeCodeWhereInput>
    churchIncomeCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ChurchIncomeOrderByWithRelationInput = {
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    churchIncomeCodeIdRel?: ChurchIncomeCodeOrderByWithRelationInput
    churchIncomeCreateByRel?: UserOrderByWithRelationInput
    churchIncomeUpdateByRel?: UserOrderByWithRelationInput
  }

  export type ChurchIncomeWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ChurchIncomeWhereInput | ChurchIncomeWhereInput[]
    OR?: ChurchIncomeWhereInput[]
    NOT?: ChurchIncomeWhereInput | ChurchIncomeWhereInput[]
    incomeCodeId?: BigIntFilter<"ChurchIncome"> | bigint | number
    detail?: StringNullableFilter<"ChurchIncome"> | string | null
    funds?: BigIntFilter<"ChurchIncome"> | bigint | number
    date?: DateTimeFilter<"ChurchIncome"> | Date | string
    bill?: StringNullableFilter<"ChurchIncome"> | string | null
    billNumber?: StringNullableFilter<"ChurchIncome"> | string | null
    fundsType?: EnumTypeFilter<"ChurchIncome"> | $Enums.Type
    deleted?: BoolFilter<"ChurchIncome"> | boolean
    createAt?: DateTimeFilter<"ChurchIncome"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncome"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncome"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncome"> | bigint | number | null
    churchIncomeCodeIdRel?: XOR<ChurchIncomeCodeScalarRelationFilter, ChurchIncomeCodeWhereInput>
    churchIncomeCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ChurchIncomeOrderByWithAggregationInput = {
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ChurchIncomeCountOrderByAggregateInput
    _avg?: ChurchIncomeAvgOrderByAggregateInput
    _max?: ChurchIncomeMaxOrderByAggregateInput
    _min?: ChurchIncomeMinOrderByAggregateInput
    _sum?: ChurchIncomeSumOrderByAggregateInput
  }

  export type ChurchIncomeScalarWhereWithAggregatesInput = {
    AND?: ChurchIncomeScalarWhereWithAggregatesInput | ChurchIncomeScalarWhereWithAggregatesInput[]
    OR?: ChurchIncomeScalarWhereWithAggregatesInput[]
    NOT?: ChurchIncomeScalarWhereWithAggregatesInput | ChurchIncomeScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ChurchIncome"> | bigint | number
    incomeCodeId?: BigIntWithAggregatesFilter<"ChurchIncome"> | bigint | number
    detail?: StringNullableWithAggregatesFilter<"ChurchIncome"> | string | null
    funds?: BigIntWithAggregatesFilter<"ChurchIncome"> | bigint | number
    date?: DateTimeWithAggregatesFilter<"ChurchIncome"> | Date | string
    bill?: StringNullableWithAggregatesFilter<"ChurchIncome"> | string | null
    billNumber?: StringNullableWithAggregatesFilter<"ChurchIncome"> | string | null
    fundsType?: EnumTypeWithAggregatesFilter<"ChurchIncome"> | $Enums.Type
    deleted?: BoolWithAggregatesFilter<"ChurchIncome"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"ChurchIncome"> | Date | string
    createBy?: BigIntNullableWithAggregatesFilter<"ChurchIncome"> | bigint | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchIncome"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"ChurchIncome"> | bigint | number | null
  }

  export type ChurchIncomeHistoryWhereInput = {
    AND?: ChurchIncomeHistoryWhereInput | ChurchIncomeHistoryWhereInput[]
    OR?: ChurchIncomeHistoryWhereInput[]
    NOT?: ChurchIncomeHistoryWhereInput | ChurchIncomeHistoryWhereInput[]
    revId?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    id?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    incomeCodeId?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    detail?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    funds?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    date?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    bill?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    billNumber?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    fundsType?: EnumTypeFilter<"ChurchIncomeHistory"> | $Enums.Type
    deleted?: BoolFilter<"ChurchIncomeHistory"> | boolean
    createAt?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncomeHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncomeHistory"> | bigint | number | null
    churchIncomeCodeHistoryIdRel?: XOR<ChurchIncomeCodeScalarRelationFilter, ChurchIncomeCodeWhereInput>
    churchIncomeHistoryCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeHistoryUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ChurchIncomeHistoryOrderByWithRelationInput = {
    revId?: SortOrder
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    churchIncomeCodeHistoryIdRel?: ChurchIncomeCodeOrderByWithRelationInput
    churchIncomeHistoryCreateByRel?: UserOrderByWithRelationInput
    churchIncomeHistoryUpdateByRel?: UserOrderByWithRelationInput
  }

  export type ChurchIncomeHistoryWhereUniqueInput = Prisma.AtLeast<{
    revId?: bigint | number
    AND?: ChurchIncomeHistoryWhereInput | ChurchIncomeHistoryWhereInput[]
    OR?: ChurchIncomeHistoryWhereInput[]
    NOT?: ChurchIncomeHistoryWhereInput | ChurchIncomeHistoryWhereInput[]
    id?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    incomeCodeId?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    detail?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    funds?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    date?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    bill?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    billNumber?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    fundsType?: EnumTypeFilter<"ChurchIncomeHistory"> | $Enums.Type
    deleted?: BoolFilter<"ChurchIncomeHistory"> | boolean
    createAt?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncomeHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncomeHistory"> | bigint | number | null
    churchIncomeCodeHistoryIdRel?: XOR<ChurchIncomeCodeScalarRelationFilter, ChurchIncomeCodeWhereInput>
    churchIncomeHistoryCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeHistoryUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "revId">

  export type ChurchIncomeHistoryOrderByWithAggregationInput = {
    revId?: SortOrder
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ChurchIncomeHistoryCountOrderByAggregateInput
    _avg?: ChurchIncomeHistoryAvgOrderByAggregateInput
    _max?: ChurchIncomeHistoryMaxOrderByAggregateInput
    _min?: ChurchIncomeHistoryMinOrderByAggregateInput
    _sum?: ChurchIncomeHistorySumOrderByAggregateInput
  }

  export type ChurchIncomeHistoryScalarWhereWithAggregatesInput = {
    AND?: ChurchIncomeHistoryScalarWhereWithAggregatesInput | ChurchIncomeHistoryScalarWhereWithAggregatesInput[]
    OR?: ChurchIncomeHistoryScalarWhereWithAggregatesInput[]
    NOT?: ChurchIncomeHistoryScalarWhereWithAggregatesInput | ChurchIncomeHistoryScalarWhereWithAggregatesInput[]
    revId?: BigIntWithAggregatesFilter<"ChurchIncomeHistory"> | bigint | number
    id?: BigIntWithAggregatesFilter<"ChurchIncomeHistory"> | bigint | number
    incomeCodeId?: BigIntWithAggregatesFilter<"ChurchIncomeHistory"> | bigint | number
    detail?: StringNullableWithAggregatesFilter<"ChurchIncomeHistory"> | string | null
    funds?: BigIntWithAggregatesFilter<"ChurchIncomeHistory"> | bigint | number
    date?: DateTimeWithAggregatesFilter<"ChurchIncomeHistory"> | Date | string
    bill?: StringNullableWithAggregatesFilter<"ChurchIncomeHistory"> | string | null
    billNumber?: StringNullableWithAggregatesFilter<"ChurchIncomeHistory"> | string | null
    fundsType?: EnumTypeWithAggregatesFilter<"ChurchIncomeHistory"> | $Enums.Type
    deleted?: BoolWithAggregatesFilter<"ChurchIncomeHistory"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"ChurchIncomeHistory"> | Date | string
    createBy?: BigIntNullableWithAggregatesFilter<"ChurchIncomeHistory"> | bigint | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchIncomeHistory"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"ChurchIncomeHistory"> | bigint | number | null
  }

  export type ChurchIncomeCodeWhereInput = {
    AND?: ChurchIncomeCodeWhereInput | ChurchIncomeCodeWhereInput[]
    OR?: ChurchIncomeCodeWhereInput[]
    NOT?: ChurchIncomeCodeWhereInput | ChurchIncomeCodeWhereInput[]
    id?: BigIntFilter<"ChurchIncomeCode"> | bigint | number
    incomeCodeName?: StringFilter<"ChurchIncomeCode"> | string
    code?: StringFilter<"ChurchIncomeCode"> | string
    description?: StringFilter<"ChurchIncomeCode"> | string
    deleted?: BoolFilter<"ChurchIncomeCode"> | boolean
    createAt?: DateTimeFilter<"ChurchIncomeCode"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncomeCode"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncomeCode"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncomeCode"> | bigint | number | null
    churchIncomeCodeCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeCodeUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeCodeIdRel?: ChurchIncomeListRelationFilter
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryListRelationFilter
  }

  export type ChurchIncomeCodeOrderByWithRelationInput = {
    id?: SortOrder
    incomeCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    churchIncomeCodeCreateByRel?: UserOrderByWithRelationInput
    churchIncomeCodeUpdateByRel?: UserOrderByWithRelationInput
    churchIncomeCodeIdRel?: ChurchIncomeOrderByRelationAggregateInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryOrderByRelationAggregateInput
  }

  export type ChurchIncomeCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ChurchIncomeCodeWhereInput | ChurchIncomeCodeWhereInput[]
    OR?: ChurchIncomeCodeWhereInput[]
    NOT?: ChurchIncomeCodeWhereInput | ChurchIncomeCodeWhereInput[]
    incomeCodeName?: StringFilter<"ChurchIncomeCode"> | string
    code?: StringFilter<"ChurchIncomeCode"> | string
    description?: StringFilter<"ChurchIncomeCode"> | string
    deleted?: BoolFilter<"ChurchIncomeCode"> | boolean
    createAt?: DateTimeFilter<"ChurchIncomeCode"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncomeCode"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncomeCode"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncomeCode"> | bigint | number | null
    churchIncomeCodeCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeCodeUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchIncomeCodeIdRel?: ChurchIncomeListRelationFilter
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryListRelationFilter
  }, "id">

  export type ChurchIncomeCodeOrderByWithAggregationInput = {
    id?: SortOrder
    incomeCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ChurchIncomeCodeCountOrderByAggregateInput
    _avg?: ChurchIncomeCodeAvgOrderByAggregateInput
    _max?: ChurchIncomeCodeMaxOrderByAggregateInput
    _min?: ChurchIncomeCodeMinOrderByAggregateInput
    _sum?: ChurchIncomeCodeSumOrderByAggregateInput
  }

  export type ChurchIncomeCodeScalarWhereWithAggregatesInput = {
    AND?: ChurchIncomeCodeScalarWhereWithAggregatesInput | ChurchIncomeCodeScalarWhereWithAggregatesInput[]
    OR?: ChurchIncomeCodeScalarWhereWithAggregatesInput[]
    NOT?: ChurchIncomeCodeScalarWhereWithAggregatesInput | ChurchIncomeCodeScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ChurchIncomeCode"> | bigint | number
    incomeCodeName?: StringWithAggregatesFilter<"ChurchIncomeCode"> | string
    code?: StringWithAggregatesFilter<"ChurchIncomeCode"> | string
    description?: StringWithAggregatesFilter<"ChurchIncomeCode"> | string
    deleted?: BoolWithAggregatesFilter<"ChurchIncomeCode"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"ChurchIncomeCode"> | Date | string
    createBy?: BigIntNullableWithAggregatesFilter<"ChurchIncomeCode"> | bigint | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchIncomeCode"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"ChurchIncomeCode"> | bigint | number | null
  }

  export type ChurchSpendingWhereInput = {
    AND?: ChurchSpendingWhereInput | ChurchSpendingWhereInput[]
    OR?: ChurchSpendingWhereInput[]
    NOT?: ChurchSpendingWhereInput | ChurchSpendingWhereInput[]
    id?: BigIntFilter<"ChurchSpending"> | bigint | number
    spendingCodeId?: BigIntFilter<"ChurchSpending"> | bigint | number
    detail?: StringNullableFilter<"ChurchSpending"> | string | null
    funds?: BigIntFilter<"ChurchSpending"> | bigint | number
    date?: DateTimeFilter<"ChurchSpending"> | Date | string
    bill?: StringNullableFilter<"ChurchSpending"> | string | null
    billNumber?: StringNullableFilter<"ChurchSpending"> | string | null
    fundsType?: EnumTypeFilter<"ChurchSpending"> | $Enums.Type
    deleted?: BoolFilter<"ChurchSpending"> | boolean
    createAt?: DateTimeFilter<"ChurchSpending"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpending"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchSpending"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpending"> | bigint | number | null
    churchSpendingCodeIdRel?: XOR<ChurchSpendingCodeScalarRelationFilter, ChurchSpendingCodeWhereInput>
    churchSpendingCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ChurchSpendingOrderByWithRelationInput = {
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    churchSpendingCodeIdRel?: ChurchSpendingCodeOrderByWithRelationInput
    churchSpendingCreateByRel?: UserOrderByWithRelationInput
    churchSpendingUpdateByRel?: UserOrderByWithRelationInput
  }

  export type ChurchSpendingWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ChurchSpendingWhereInput | ChurchSpendingWhereInput[]
    OR?: ChurchSpendingWhereInput[]
    NOT?: ChurchSpendingWhereInput | ChurchSpendingWhereInput[]
    spendingCodeId?: BigIntFilter<"ChurchSpending"> | bigint | number
    detail?: StringNullableFilter<"ChurchSpending"> | string | null
    funds?: BigIntFilter<"ChurchSpending"> | bigint | number
    date?: DateTimeFilter<"ChurchSpending"> | Date | string
    bill?: StringNullableFilter<"ChurchSpending"> | string | null
    billNumber?: StringNullableFilter<"ChurchSpending"> | string | null
    fundsType?: EnumTypeFilter<"ChurchSpending"> | $Enums.Type
    deleted?: BoolFilter<"ChurchSpending"> | boolean
    createAt?: DateTimeFilter<"ChurchSpending"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpending"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchSpending"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpending"> | bigint | number | null
    churchSpendingCodeIdRel?: XOR<ChurchSpendingCodeScalarRelationFilter, ChurchSpendingCodeWhereInput>
    churchSpendingCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ChurchSpendingOrderByWithAggregationInput = {
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrderInput | SortOrder
    billNumber?: SortOrderInput | SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ChurchSpendingCountOrderByAggregateInput
    _avg?: ChurchSpendingAvgOrderByAggregateInput
    _max?: ChurchSpendingMaxOrderByAggregateInput
    _min?: ChurchSpendingMinOrderByAggregateInput
    _sum?: ChurchSpendingSumOrderByAggregateInput
  }

  export type ChurchSpendingScalarWhereWithAggregatesInput = {
    AND?: ChurchSpendingScalarWhereWithAggregatesInput | ChurchSpendingScalarWhereWithAggregatesInput[]
    OR?: ChurchSpendingScalarWhereWithAggregatesInput[]
    NOT?: ChurchSpendingScalarWhereWithAggregatesInput | ChurchSpendingScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ChurchSpending"> | bigint | number
    spendingCodeId?: BigIntWithAggregatesFilter<"ChurchSpending"> | bigint | number
    detail?: StringNullableWithAggregatesFilter<"ChurchSpending"> | string | null
    funds?: BigIntWithAggregatesFilter<"ChurchSpending"> | bigint | number
    date?: DateTimeWithAggregatesFilter<"ChurchSpending"> | Date | string
    bill?: StringNullableWithAggregatesFilter<"ChurchSpending"> | string | null
    billNumber?: StringNullableWithAggregatesFilter<"ChurchSpending"> | string | null
    fundsType?: EnumTypeWithAggregatesFilter<"ChurchSpending"> | $Enums.Type
    deleted?: BoolWithAggregatesFilter<"ChurchSpending"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"ChurchSpending"> | Date | string
    createBy?: BigIntNullableWithAggregatesFilter<"ChurchSpending"> | bigint | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchSpending"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"ChurchSpending"> | bigint | number | null
  }

  export type ChurchSpendingHistoryWhereInput = {
    AND?: ChurchSpendingHistoryWhereInput | ChurchSpendingHistoryWhereInput[]
    OR?: ChurchSpendingHistoryWhereInput[]
    NOT?: ChurchSpendingHistoryWhereInput | ChurchSpendingHistoryWhereInput[]
    revId?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    id?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    spendingCodeId?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    detail?: StringNullableFilter<"ChurchSpendingHistory"> | string | null
    funds?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    date?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    bill?: StringFilter<"ChurchSpendingHistory"> | string
    billNumber?: StringFilter<"ChurchSpendingHistory"> | string
    fundsType?: EnumTypeFilter<"ChurchSpendingHistory"> | $Enums.Type
    deleted?: BoolFilter<"ChurchSpendingHistory"> | boolean
    createAt?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpendingHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpendingHistory"> | bigint | number | null
    churchSpendingCodeHistoryIdRel?: XOR<ChurchSpendingCodeScalarRelationFilter, ChurchSpendingCodeWhereInput>
    churchSpendingHistoryCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingHistoryUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ChurchSpendingHistoryOrderByWithRelationInput = {
    revId?: SortOrder
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    churchSpendingCodeHistoryIdRel?: ChurchSpendingCodeOrderByWithRelationInput
    churchSpendingHistoryCreateByRel?: UserOrderByWithRelationInput
    churchSpendingHistoryUpdateByRel?: UserOrderByWithRelationInput
  }

  export type ChurchSpendingHistoryWhereUniqueInput = Prisma.AtLeast<{
    revId?: bigint | number
    AND?: ChurchSpendingHistoryWhereInput | ChurchSpendingHistoryWhereInput[]
    OR?: ChurchSpendingHistoryWhereInput[]
    NOT?: ChurchSpendingHistoryWhereInput | ChurchSpendingHistoryWhereInput[]
    id?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    spendingCodeId?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    detail?: StringNullableFilter<"ChurchSpendingHistory"> | string | null
    funds?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    date?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    bill?: StringFilter<"ChurchSpendingHistory"> | string
    billNumber?: StringFilter<"ChurchSpendingHistory"> | string
    fundsType?: EnumTypeFilter<"ChurchSpendingHistory"> | $Enums.Type
    deleted?: BoolFilter<"ChurchSpendingHistory"> | boolean
    createAt?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpendingHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpendingHistory"> | bigint | number | null
    churchSpendingCodeHistoryIdRel?: XOR<ChurchSpendingCodeScalarRelationFilter, ChurchSpendingCodeWhereInput>
    churchSpendingHistoryCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingHistoryUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "revId">

  export type ChurchSpendingHistoryOrderByWithAggregationInput = {
    revId?: SortOrder
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrderInput | SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ChurchSpendingHistoryCountOrderByAggregateInput
    _avg?: ChurchSpendingHistoryAvgOrderByAggregateInput
    _max?: ChurchSpendingHistoryMaxOrderByAggregateInput
    _min?: ChurchSpendingHistoryMinOrderByAggregateInput
    _sum?: ChurchSpendingHistorySumOrderByAggregateInput
  }

  export type ChurchSpendingHistoryScalarWhereWithAggregatesInput = {
    AND?: ChurchSpendingHistoryScalarWhereWithAggregatesInput | ChurchSpendingHistoryScalarWhereWithAggregatesInput[]
    OR?: ChurchSpendingHistoryScalarWhereWithAggregatesInput[]
    NOT?: ChurchSpendingHistoryScalarWhereWithAggregatesInput | ChurchSpendingHistoryScalarWhereWithAggregatesInput[]
    revId?: BigIntWithAggregatesFilter<"ChurchSpendingHistory"> | bigint | number
    id?: BigIntWithAggregatesFilter<"ChurchSpendingHistory"> | bigint | number
    spendingCodeId?: BigIntWithAggregatesFilter<"ChurchSpendingHistory"> | bigint | number
    detail?: StringNullableWithAggregatesFilter<"ChurchSpendingHistory"> | string | null
    funds?: BigIntWithAggregatesFilter<"ChurchSpendingHistory"> | bigint | number
    date?: DateTimeWithAggregatesFilter<"ChurchSpendingHistory"> | Date | string
    bill?: StringWithAggregatesFilter<"ChurchSpendingHistory"> | string
    billNumber?: StringWithAggregatesFilter<"ChurchSpendingHistory"> | string
    fundsType?: EnumTypeWithAggregatesFilter<"ChurchSpendingHistory"> | $Enums.Type
    deleted?: BoolWithAggregatesFilter<"ChurchSpendingHistory"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"ChurchSpendingHistory"> | Date | string
    createBy?: BigIntNullableWithAggregatesFilter<"ChurchSpendingHistory"> | bigint | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchSpendingHistory"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"ChurchSpendingHistory"> | bigint | number | null
  }

  export type ChurchSpendingCodeWhereInput = {
    AND?: ChurchSpendingCodeWhereInput | ChurchSpendingCodeWhereInput[]
    OR?: ChurchSpendingCodeWhereInput[]
    NOT?: ChurchSpendingCodeWhereInput | ChurchSpendingCodeWhereInput[]
    id?: BigIntFilter<"ChurchSpendingCode"> | bigint | number
    spendingCodeName?: StringFilter<"ChurchSpendingCode"> | string
    code?: StringFilter<"ChurchSpendingCode"> | string
    description?: StringFilter<"ChurchSpendingCode"> | string
    createAt?: DateTimeFilter<"ChurchSpendingCode"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpendingCode"> | bigint | number | null
    deleted?: BoolFilter<"ChurchSpendingCode"> | boolean
    updatedAt?: DateTimeFilter<"ChurchSpendingCode"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpendingCode"> | bigint | number | null
    churchSpendingCodeCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingCodeUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingCodeIdRel?: ChurchSpendingListRelationFilter
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryListRelationFilter
  }

  export type ChurchSpendingCodeOrderByWithRelationInput = {
    id?: SortOrder
    spendingCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    deleted?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    churchSpendingCodeCreateByRel?: UserOrderByWithRelationInput
    churchSpendingCodeUpdateByRel?: UserOrderByWithRelationInput
    churchSpendingCodeIdRel?: ChurchSpendingOrderByRelationAggregateInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryOrderByRelationAggregateInput
  }

  export type ChurchSpendingCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ChurchSpendingCodeWhereInput | ChurchSpendingCodeWhereInput[]
    OR?: ChurchSpendingCodeWhereInput[]
    NOT?: ChurchSpendingCodeWhereInput | ChurchSpendingCodeWhereInput[]
    spendingCodeName?: StringFilter<"ChurchSpendingCode"> | string
    code?: StringFilter<"ChurchSpendingCode"> | string
    description?: StringFilter<"ChurchSpendingCode"> | string
    createAt?: DateTimeFilter<"ChurchSpendingCode"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpendingCode"> | bigint | number | null
    deleted?: BoolFilter<"ChurchSpendingCode"> | boolean
    updatedAt?: DateTimeFilter<"ChurchSpendingCode"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpendingCode"> | bigint | number | null
    churchSpendingCodeCreateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingCodeUpdateByRel?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    churchSpendingCodeIdRel?: ChurchSpendingListRelationFilter
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryListRelationFilter
  }, "id">

  export type ChurchSpendingCodeOrderByWithAggregationInput = {
    id?: SortOrder
    spendingCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrderInput | SortOrder
    deleted?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ChurchSpendingCodeCountOrderByAggregateInput
    _avg?: ChurchSpendingCodeAvgOrderByAggregateInput
    _max?: ChurchSpendingCodeMaxOrderByAggregateInput
    _min?: ChurchSpendingCodeMinOrderByAggregateInput
    _sum?: ChurchSpendingCodeSumOrderByAggregateInput
  }

  export type ChurchSpendingCodeScalarWhereWithAggregatesInput = {
    AND?: ChurchSpendingCodeScalarWhereWithAggregatesInput | ChurchSpendingCodeScalarWhereWithAggregatesInput[]
    OR?: ChurchSpendingCodeScalarWhereWithAggregatesInput[]
    NOT?: ChurchSpendingCodeScalarWhereWithAggregatesInput | ChurchSpendingCodeScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ChurchSpendingCode"> | bigint | number
    spendingCodeName?: StringWithAggregatesFilter<"ChurchSpendingCode"> | string
    code?: StringWithAggregatesFilter<"ChurchSpendingCode"> | string
    description?: StringWithAggregatesFilter<"ChurchSpendingCode"> | string
    createAt?: DateTimeWithAggregatesFilter<"ChurchSpendingCode"> | Date | string
    createBy?: BigIntNullableWithAggregatesFilter<"ChurchSpendingCode"> | bigint | number | null
    deleted?: BoolWithAggregatesFilter<"ChurchSpendingCode"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchSpendingCode"> | Date | string
    updatedBy?: BigIntNullableWithAggregatesFilter<"ChurchSpendingCode"> | bigint | number | null
  }

  export type UserCreateInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserCreateManyInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type UserUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type UserHistoryCreateInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
    userHistoryCreatedByRel?: UserCreateNestedOneWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserCreateNestedOneWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel: UserCreateNestedOneWithoutUserHistoryIdRelInput
  }

  export type UserHistoryUncheckedCreateInput = {
    id?: bigint | number
    userId: bigint | number
    createdAt?: Date | string
    createdBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
    userHistoryCreatedByRel?: UserUpdateOneWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserUpdateOneWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserUpdateOneRequiredWithoutUserHistoryIdRelNestedInput
  }

  export type UserHistoryUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryCreateManyInput = {
    id?: bigint | number
    userId: bigint | number
    createdAt?: Date | string
    createdBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type ChurchIncomeCreateInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeIdRel: ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeIdRelInput
    churchIncomeCreateByRel?: UserCreateNestedOneWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeUpdateByRelInput
  }

  export type ChurchIncomeUncheckedCreateInput = {
    id?: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeIdRel?: ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCreateByRel?: UserUpdateOneWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: UserUpdateOneWithoutChurchIncomeUpdateByRelNestedInput
  }

  export type ChurchIncomeUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeCreateManyInput = {
    id?: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeHistoryCreateInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeHistoryIdRel: ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: UserCreateNestedOneWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeHistoryUpdateByRelInput
  }

  export type ChurchIncomeHistoryUncheckedCreateInput = {
    revId?: bigint | number
    id: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeHistoryUpdateInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeHistoryIdRel?: ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: UserUpdateOneWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: UserUpdateOneWithoutChurchIncomeHistoryUpdateByRelNestedInput
  }

  export type ChurchIncomeHistoryUncheckedUpdateInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeHistoryCreateManyInput = {
    revId?: bigint | number
    id: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeHistoryUpdateManyMutationInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeHistoryUncheckedUpdateManyInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeCodeCreateInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeCreateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeUpdateByRelInput
    churchIncomeCodeIdRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCodeIdRelInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeUncheckedCreateInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCodeIdRelInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeCreateByRel?: UserUpdateOneWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: UserUpdateOneWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchIncomeCodeIdRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type ChurchIncomeCodeUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type ChurchIncomeCodeCreateManyInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeCodeUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeCodeUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingCreateInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingCodeIdRel: ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeIdRelInput
    churchSpendingCreateByRel?: UserCreateNestedOneWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingUpdateByRelInput
  }

  export type ChurchSpendingUncheckedCreateInput = {
    id?: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeIdRel?: ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCreateByRel?: UserUpdateOneWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: UserUpdateOneWithoutChurchSpendingUpdateByRelNestedInput
  }

  export type ChurchSpendingUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingCreateManyInput = {
    id?: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingHistoryCreateInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingCodeHistoryIdRel: ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeHistoryIdRelInput
    churchSpendingHistoryCreateByRel?: UserCreateNestedOneWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type ChurchSpendingHistoryUncheckedCreateInput = {
    revId?: bigint | number
    id: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingHistoryUpdateInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeHistoryIdRel?: ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeHistoryIdRelNestedInput
    churchSpendingHistoryCreateByRel?: UserUpdateOneWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: UserUpdateOneWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchSpendingHistoryUncheckedUpdateInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingHistoryCreateManyInput = {
    revId?: bigint | number
    id: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingHistoryUpdateManyMutationInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingHistoryUncheckedUpdateManyInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingCodeCreateInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    deleted?: boolean
    updatedAt?: Date | string
    churchSpendingCodeCreateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeUpdateByRelInput
    churchSpendingCodeIdRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCodeIdRelInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeUncheckedCreateInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    createBy?: bigint | number | null
    deleted?: boolean
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCodeIdRelInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeCreateByRel?: UserUpdateOneWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: UserUpdateOneWithoutChurchSpendingCodeUpdateByRelNestedInput
    churchSpendingCodeIdRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type ChurchSpendingCodeUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type ChurchSpendingCodeCreateManyInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    createBy?: bigint | number | null
    deleted?: boolean
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingCodeUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingCodeUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ChurchIncomeListRelationFilter = {
    every?: ChurchIncomeWhereInput
    some?: ChurchIncomeWhereInput
    none?: ChurchIncomeWhereInput
  }

  export type ChurchIncomeCodeListRelationFilter = {
    every?: ChurchIncomeCodeWhereInput
    some?: ChurchIncomeCodeWhereInput
    none?: ChurchIncomeCodeWhereInput
  }

  export type ChurchSpendingListRelationFilter = {
    every?: ChurchSpendingWhereInput
    some?: ChurchSpendingWhereInput
    none?: ChurchSpendingWhereInput
  }

  export type ChurchSpendingCodeListRelationFilter = {
    every?: ChurchSpendingCodeWhereInput
    some?: ChurchSpendingCodeWhereInput
    none?: ChurchSpendingCodeWhereInput
  }

  export type UserHistoryListRelationFilter = {
    every?: UserHistoryWhereInput
    some?: UserHistoryWhereInput
    none?: UserHistoryWhereInput
  }

  export type ChurchIncomeHistoryListRelationFilter = {
    every?: ChurchIncomeHistoryWhereInput
    some?: ChurchIncomeHistoryWhereInput
    none?: ChurchIncomeHistoryWhereInput
  }

  export type ChurchSpendingHistoryListRelationFilter = {
    every?: ChurchSpendingHistoryWhereInput
    some?: ChurchSpendingHistoryWhereInput
    none?: ChurchSpendingHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchIncomeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchIncomeCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchSpendingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchSpendingCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchIncomeHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchSpendingHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deleted?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
  }

  export type UserHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deleted?: SortOrder
  }

  export type UserHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deleted?: SortOrder
  }

  export type UserHistorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type ChurchIncomeCodeScalarRelationFilter = {
    is?: ChurchIncomeCodeWhereInput
    isNot?: ChurchIncomeCodeWhereInput
  }

  export type ChurchIncomeCountOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeAvgOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeMaxOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeMinOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeSumOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type ChurchIncomeHistoryCountOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeHistoryAvgOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    incomeCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeHistoryMaxOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeHistoryMinOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    incomeCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeHistorySumOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    incomeCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeCodeCountOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeCodeMinOrderByAggregateInput = {
    id?: SortOrder
    incomeCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchIncomeCodeSumOrderByAggregateInput = {
    id?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingCodeScalarRelationFilter = {
    is?: ChurchSpendingCodeWhereInput
    isNot?: ChurchSpendingCodeWhereInput
  }

  export type ChurchSpendingCountOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingAvgOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingMaxOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingMinOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingSumOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingHistoryCountOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingHistoryAvgOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    spendingCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingHistoryMaxOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingHistoryMinOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    spendingCodeId?: SortOrder
    detail?: SortOrder
    funds?: SortOrder
    date?: SortOrder
    bill?: SortOrder
    billNumber?: SortOrder
    fundsType?: SortOrder
    deleted?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingHistorySumOrderByAggregateInput = {
    revId?: SortOrder
    id?: SortOrder
    spendingCodeId?: SortOrder
    funds?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingCodeCountOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    deleted?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    deleted?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingCodeMinOrderByAggregateInput = {
    id?: SortOrder
    spendingCodeName?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createAt?: SortOrder
    createBy?: SortOrder
    deleted?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ChurchSpendingCodeSumOrderByAggregateInput = {
    id?: SortOrder
    createBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserCreateNestedOneWithoutSelfCreatedByRelInput = {
    create?: XOR<UserCreateWithoutSelfCreatedByRelInput, UserUncheckedCreateWithoutSelfCreatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelfCreatedByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutCreatedByRelInput = {
    create?: XOR<UserCreateWithoutCreatedByRelInput, UserUncheckedCreateWithoutCreatedByRelInput> | UserCreateWithoutCreatedByRelInput[] | UserUncheckedCreateWithoutCreatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByRelInput | UserCreateOrConnectWithoutCreatedByRelInput[]
    createMany?: UserCreateManyCreatedByRelInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutSelfUpdatedByRelInput = {
    create?: XOR<UserCreateWithoutSelfUpdatedByRelInput, UserUncheckedCreateWithoutSelfUpdatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelfUpdatedByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutUpdatedByRelInput = {
    create?: XOR<UserCreateWithoutUpdatedByRelInput, UserUncheckedCreateWithoutUpdatedByRelInput> | UserCreateWithoutUpdatedByRelInput[] | UserUncheckedCreateWithoutUpdatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByRelInput | UserCreateOrConnectWithoutUpdatedByRelInput[]
    createMany?: UserCreateManyUpdatedByRelInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCreateByRelInputEnvelope
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
  }

  export type ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeUpdateByRelInputEnvelope
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
  }

  export type ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInputEnvelope
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
  }

  export type ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInputEnvelope
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
  }

  export type ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCreateByRelInputEnvelope
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
  }

  export type ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingUpdateByRelInputEnvelope
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
  }

  export type ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInputEnvelope
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
  }

  export type ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInputEnvelope
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
  }

  export type UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput> | UserHistoryCreateWithoutUserHistoryCreatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryCreatedByRelInputEnvelope
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
  }

  export type UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput> | UserHistoryCreateWithoutUserHistoryUpdatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryUpdatedByRelInputEnvelope
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
  }

  export type UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryIdRelInput, UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput> | UserHistoryCreateWithoutUserHistoryIdRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput | UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryIdRelInputEnvelope
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
  }

  export type ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInputEnvelope
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
  }

  export type ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInputEnvelope
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
  }

  export type ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInputEnvelope
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
  }

  export type ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInputEnvelope
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCreatedByRelInput = {
    create?: XOR<UserCreateWithoutCreatedByRelInput, UserUncheckedCreateWithoutCreatedByRelInput> | UserCreateWithoutCreatedByRelInput[] | UserUncheckedCreateWithoutCreatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByRelInput | UserCreateOrConnectWithoutCreatedByRelInput[]
    createMany?: UserCreateManyCreatedByRelInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutUpdatedByRelInput = {
    create?: XOR<UserCreateWithoutUpdatedByRelInput, UserUncheckedCreateWithoutUpdatedByRelInput> | UserCreateWithoutUpdatedByRelInput[] | UserUncheckedCreateWithoutUpdatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByRelInput | UserCreateOrConnectWithoutUpdatedByRelInput[]
    createMany?: UserCreateManyUpdatedByRelInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCreateByRelInputEnvelope
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
  }

  export type ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeUpdateByRelInputEnvelope
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
  }

  export type ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInputEnvelope
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
  }

  export type ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInputEnvelope
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
  }

  export type ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCreateByRelInputEnvelope
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
  }

  export type ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingUpdateByRelInputEnvelope
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
  }

  export type ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInputEnvelope
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
  }

  export type ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInputEnvelope
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
  }

  export type UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput> | UserHistoryCreateWithoutUserHistoryCreatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryCreatedByRelInputEnvelope
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
  }

  export type UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput> | UserHistoryCreateWithoutUserHistoryUpdatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryUpdatedByRelInputEnvelope
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
  }

  export type UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryIdRelInput, UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput> | UserHistoryCreateWithoutUserHistoryIdRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput | UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryIdRelInputEnvelope
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
  }

  export type ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInputEnvelope
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
  }

  export type ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInputEnvelope
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
  }

  export type ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInputEnvelope
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
  }

  export type ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInputEnvelope
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutSelfCreatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutSelfCreatedByRelInput, UserUncheckedCreateWithoutSelfCreatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelfCreatedByRelInput
    upsert?: UserUpsertWithoutSelfCreatedByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSelfCreatedByRelInput, UserUpdateWithoutSelfCreatedByRelInput>, UserUncheckedUpdateWithoutSelfCreatedByRelInput>
  }

  export type UserUpdateManyWithoutCreatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByRelInput, UserUncheckedCreateWithoutCreatedByRelInput> | UserCreateWithoutCreatedByRelInput[] | UserUncheckedCreateWithoutCreatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByRelInput | UserCreateOrConnectWithoutCreatedByRelInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByRelInput | UserUpsertWithWhereUniqueWithoutCreatedByRelInput[]
    createMany?: UserCreateManyCreatedByRelInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByRelInput | UserUpdateWithWhereUniqueWithoutCreatedByRelInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByRelInput | UserUpdateManyWithWhereWithoutCreatedByRelInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateOneWithoutSelfUpdatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutSelfUpdatedByRelInput, UserUncheckedCreateWithoutSelfUpdatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelfUpdatedByRelInput
    upsert?: UserUpsertWithoutSelfUpdatedByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSelfUpdatedByRelInput, UserUpdateWithoutSelfUpdatedByRelInput>, UserUncheckedUpdateWithoutSelfUpdatedByRelInput>
  }

  export type UserUpdateManyWithoutUpdatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedByRelInput, UserUncheckedCreateWithoutUpdatedByRelInput> | UserCreateWithoutUpdatedByRelInput[] | UserUncheckedCreateWithoutUpdatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByRelInput | UserCreateOrConnectWithoutUpdatedByRelInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUpdatedByRelInput | UserUpsertWithWhereUniqueWithoutUpdatedByRelInput[]
    createMany?: UserCreateManyUpdatedByRelInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUpdatedByRelInput | UserUpdateWithWhereUniqueWithoutUpdatedByRelInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUpdatedByRelInput | UserUpdateManyWithWhereWithoutUpdatedByRelInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput[]
    upsert?: ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCreateByRelInput | ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCreateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCreateByRelInputEnvelope
    set?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    disconnect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    delete?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    update?: ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCreateByRelInput | ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCreateByRelInput[]
    updateMany?: ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCreateByRelInput | ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCreateByRelInput[]
    deleteMany?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
  }

  export type ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput[]
    upsert?: ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeUpdateByRelInput | ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeUpdateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeUpdateByRelInputEnvelope
    set?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    disconnect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    delete?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    update?: ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeUpdateByRelInput | ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeUpdateByRelInput[]
    updateMany?: ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeUpdateByRelInput | ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeUpdateByRelInput[]
    deleteMany?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
  }

  export type ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput[]
    upsert?: ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInputEnvelope
    set?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    disconnect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    delete?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    update?: ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput[]
    updateMany?: ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeCreateByRelInput[]
    deleteMany?: ChurchIncomeCodeScalarWhereInput | ChurchIncomeCodeScalarWhereInput[]
  }

  export type ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput[]
    upsert?: ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInputEnvelope
    set?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    disconnect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    delete?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    update?: ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput[]
    updateMany?: ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeUpdateByRelInput[]
    deleteMany?: ChurchIncomeCodeScalarWhereInput | ChurchIncomeCodeScalarWhereInput[]
  }

  export type ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput[]
    upsert?: ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCreateByRelInput | ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCreateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCreateByRelInputEnvelope
    set?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    disconnect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    delete?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    update?: ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCreateByRelInput | ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCreateByRelInput[]
    updateMany?: ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCreateByRelInput | ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCreateByRelInput[]
    deleteMany?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
  }

  export type ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput[]
    upsert?: ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingUpdateByRelInput | ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingUpdateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingUpdateByRelInputEnvelope
    set?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    disconnect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    delete?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    update?: ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingUpdateByRelInput | ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingUpdateByRelInput[]
    updateMany?: ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingUpdateByRelInput | ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingUpdateByRelInput[]
    deleteMany?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
  }

  export type ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput[]
    upsert?: ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInputEnvelope
    set?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    disconnect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    delete?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    update?: ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput[]
    updateMany?: ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeCreateByRelInput[]
    deleteMany?: ChurchSpendingCodeScalarWhereInput | ChurchSpendingCodeScalarWhereInput[]
  }

  export type ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput[]
    upsert?: ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInputEnvelope
    set?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    disconnect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    delete?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    update?: ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput[]
    updateMany?: ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeUpdateByRelInput[]
    deleteMany?: ChurchSpendingCodeScalarWhereInput | ChurchSpendingCodeScalarWhereInput[]
  }

  export type UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput> | UserHistoryCreateWithoutUserHistoryCreatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput[]
    upsert?: UserHistoryUpsertWithWhereUniqueWithoutUserHistoryCreatedByRelInput | UserHistoryUpsertWithWhereUniqueWithoutUserHistoryCreatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryCreatedByRelInputEnvelope
    set?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    disconnect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    delete?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    update?: UserHistoryUpdateWithWhereUniqueWithoutUserHistoryCreatedByRelInput | UserHistoryUpdateWithWhereUniqueWithoutUserHistoryCreatedByRelInput[]
    updateMany?: UserHistoryUpdateManyWithWhereWithoutUserHistoryCreatedByRelInput | UserHistoryUpdateManyWithWhereWithoutUserHistoryCreatedByRelInput[]
    deleteMany?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
  }

  export type UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput> | UserHistoryCreateWithoutUserHistoryUpdatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput[]
    upsert?: UserHistoryUpsertWithWhereUniqueWithoutUserHistoryUpdatedByRelInput | UserHistoryUpsertWithWhereUniqueWithoutUserHistoryUpdatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryUpdatedByRelInputEnvelope
    set?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    disconnect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    delete?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    update?: UserHistoryUpdateWithWhereUniqueWithoutUserHistoryUpdatedByRelInput | UserHistoryUpdateWithWhereUniqueWithoutUserHistoryUpdatedByRelInput[]
    updateMany?: UserHistoryUpdateManyWithWhereWithoutUserHistoryUpdatedByRelInput | UserHistoryUpdateManyWithWhereWithoutUserHistoryUpdatedByRelInput[]
    deleteMany?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
  }

  export type UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryIdRelInput, UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput> | UserHistoryCreateWithoutUserHistoryIdRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput | UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput[]
    upsert?: UserHistoryUpsertWithWhereUniqueWithoutUserHistoryIdRelInput | UserHistoryUpsertWithWhereUniqueWithoutUserHistoryIdRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryIdRelInputEnvelope
    set?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    disconnect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    delete?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    update?: UserHistoryUpdateWithWhereUniqueWithoutUserHistoryIdRelInput | UserHistoryUpdateWithWhereUniqueWithoutUserHistoryIdRelInput[]
    updateMany?: UserHistoryUpdateManyWithWhereWithoutUserHistoryIdRelInput | UserHistoryUpdateManyWithWhereWithoutUserHistoryIdRelInput[]
    deleteMany?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
  }

  export type ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput[]
    upsert?: ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInputEnvelope
    set?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    disconnect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    delete?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    update?: ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput[]
    updateMany?: ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryCreateByRelInput[]
    deleteMany?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
  }

  export type ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput[]
    upsert?: ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInputEnvelope
    set?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    disconnect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    delete?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    update?: ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput[]
    updateMany?: ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryUpdateByRelInput[]
    deleteMany?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
  }

  export type ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput[]
    upsert?: ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInputEnvelope
    set?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    disconnect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    delete?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    update?: ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput[]
    updateMany?: ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryCreateByRelInput[]
    deleteMany?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
  }

  export type ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput[]
    upsert?: ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInputEnvelope
    set?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    disconnect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    delete?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    update?: ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput[]
    updateMany?: ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryUpdateByRelInput[]
    deleteMany?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUncheckedUpdateManyWithoutCreatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByRelInput, UserUncheckedCreateWithoutCreatedByRelInput> | UserCreateWithoutCreatedByRelInput[] | UserUncheckedCreateWithoutCreatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByRelInput | UserCreateOrConnectWithoutCreatedByRelInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByRelInput | UserUpsertWithWhereUniqueWithoutCreatedByRelInput[]
    createMany?: UserCreateManyCreatedByRelInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByRelInput | UserUpdateWithWhereUniqueWithoutCreatedByRelInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByRelInput | UserUpdateManyWithWhereWithoutCreatedByRelInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedByRelInput, UserUncheckedCreateWithoutUpdatedByRelInput> | UserCreateWithoutUpdatedByRelInput[] | UserUncheckedCreateWithoutUpdatedByRelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByRelInput | UserCreateOrConnectWithoutUpdatedByRelInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUpdatedByRelInput | UserUpsertWithWhereUniqueWithoutUpdatedByRelInput[]
    createMany?: UserCreateManyUpdatedByRelInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUpdatedByRelInput | UserUpdateWithWhereUniqueWithoutUpdatedByRelInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUpdatedByRelInput | UserUpdateManyWithWhereWithoutUpdatedByRelInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput[]
    upsert?: ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCreateByRelInput | ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCreateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCreateByRelInputEnvelope
    set?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    disconnect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    delete?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    update?: ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCreateByRelInput | ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCreateByRelInput[]
    updateMany?: ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCreateByRelInput | ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCreateByRelInput[]
    deleteMany?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
  }

  export type ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput> | ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput[]
    upsert?: ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeUpdateByRelInput | ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeUpdateByRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeUpdateByRelInputEnvelope
    set?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    disconnect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    delete?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    update?: ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeUpdateByRelInput | ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeUpdateByRelInput[]
    updateMany?: ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeUpdateByRelInput | ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeUpdateByRelInput[]
    deleteMany?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
  }

  export type ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput[]
    upsert?: ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInputEnvelope
    set?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    disconnect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    delete?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    update?: ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput[]
    updateMany?: ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeCreateByRelInput[]
    deleteMany?: ChurchIncomeCodeScalarWhereInput | ChurchIncomeCodeScalarWhereInput[]
  }

  export type ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput> | ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput[] | ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput[]
    upsert?: ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput[]
    createMany?: ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInputEnvelope
    set?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    disconnect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    delete?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    connect?: ChurchIncomeCodeWhereUniqueInput | ChurchIncomeCodeWhereUniqueInput[]
    update?: ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput[]
    updateMany?: ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeUpdateByRelInput[]
    deleteMany?: ChurchIncomeCodeScalarWhereInput | ChurchIncomeCodeScalarWhereInput[]
  }

  export type ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput[]
    upsert?: ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCreateByRelInput | ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCreateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCreateByRelInputEnvelope
    set?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    disconnect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    delete?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    update?: ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCreateByRelInput | ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCreateByRelInput[]
    updateMany?: ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCreateByRelInput | ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCreateByRelInput[]
    deleteMany?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
  }

  export type ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput> | ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput[]
    upsert?: ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingUpdateByRelInput | ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingUpdateByRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingUpdateByRelInputEnvelope
    set?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    disconnect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    delete?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    update?: ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingUpdateByRelInput | ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingUpdateByRelInput[]
    updateMany?: ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingUpdateByRelInput | ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingUpdateByRelInput[]
    deleteMany?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
  }

  export type ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput[]
    upsert?: ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInputEnvelope
    set?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    disconnect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    delete?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    update?: ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput[]
    updateMany?: ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeCreateByRelInput[]
    deleteMany?: ChurchSpendingCodeScalarWhereInput | ChurchSpendingCodeScalarWhereInput[]
  }

  export type ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput> | ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput[] | ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput[]
    upsert?: ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput[]
    createMany?: ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInputEnvelope
    set?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    disconnect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    delete?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    connect?: ChurchSpendingCodeWhereUniqueInput | ChurchSpendingCodeWhereUniqueInput[]
    update?: ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput[]
    updateMany?: ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeUpdateByRelInput[]
    deleteMany?: ChurchSpendingCodeScalarWhereInput | ChurchSpendingCodeScalarWhereInput[]
  }

  export type UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput> | UserHistoryCreateWithoutUserHistoryCreatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput[]
    upsert?: UserHistoryUpsertWithWhereUniqueWithoutUserHistoryCreatedByRelInput | UserHistoryUpsertWithWhereUniqueWithoutUserHistoryCreatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryCreatedByRelInputEnvelope
    set?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    disconnect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    delete?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    update?: UserHistoryUpdateWithWhereUniqueWithoutUserHistoryCreatedByRelInput | UserHistoryUpdateWithWhereUniqueWithoutUserHistoryCreatedByRelInput[]
    updateMany?: UserHistoryUpdateManyWithWhereWithoutUserHistoryCreatedByRelInput | UserHistoryUpdateManyWithWhereWithoutUserHistoryCreatedByRelInput[]
    deleteMany?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
  }

  export type UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput> | UserHistoryCreateWithoutUserHistoryUpdatedByRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput | UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput[]
    upsert?: UserHistoryUpsertWithWhereUniqueWithoutUserHistoryUpdatedByRelInput | UserHistoryUpsertWithWhereUniqueWithoutUserHistoryUpdatedByRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryUpdatedByRelInputEnvelope
    set?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    disconnect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    delete?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    update?: UserHistoryUpdateWithWhereUniqueWithoutUserHistoryUpdatedByRelInput | UserHistoryUpdateWithWhereUniqueWithoutUserHistoryUpdatedByRelInput[]
    updateMany?: UserHistoryUpdateManyWithWhereWithoutUserHistoryUpdatedByRelInput | UserHistoryUpdateManyWithWhereWithoutUserHistoryUpdatedByRelInput[]
    deleteMany?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
  }

  export type UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput = {
    create?: XOR<UserHistoryCreateWithoutUserHistoryIdRelInput, UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput> | UserHistoryCreateWithoutUserHistoryIdRelInput[] | UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput[]
    connectOrCreate?: UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput | UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput[]
    upsert?: UserHistoryUpsertWithWhereUniqueWithoutUserHistoryIdRelInput | UserHistoryUpsertWithWhereUniqueWithoutUserHistoryIdRelInput[]
    createMany?: UserHistoryCreateManyUserHistoryIdRelInputEnvelope
    set?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    disconnect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    delete?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    connect?: UserHistoryWhereUniqueInput | UserHistoryWhereUniqueInput[]
    update?: UserHistoryUpdateWithWhereUniqueWithoutUserHistoryIdRelInput | UserHistoryUpdateWithWhereUniqueWithoutUserHistoryIdRelInput[]
    updateMany?: UserHistoryUpdateManyWithWhereWithoutUserHistoryIdRelInput | UserHistoryUpdateManyWithWhereWithoutUserHistoryIdRelInput[]
    deleteMany?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
  }

  export type ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput[]
    upsert?: ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInputEnvelope
    set?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    disconnect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    delete?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    update?: ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput[]
    updateMany?: ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryCreateByRelInput[]
    deleteMany?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
  }

  export type ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput[]
    upsert?: ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInputEnvelope
    set?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    disconnect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    delete?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    update?: ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput[]
    updateMany?: ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryUpdateByRelInput[]
    deleteMany?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
  }

  export type ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput[]
    upsert?: ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInputEnvelope
    set?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    disconnect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    delete?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    update?: ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput[]
    updateMany?: ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryCreateByRelInput[]
    deleteMany?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
  }

  export type ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput[]
    upsert?: ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInputEnvelope
    set?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    disconnect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    delete?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    update?: ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput[]
    updateMany?: ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryUpdateByRelInput[]
    deleteMany?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserHistoryCreatedByRelInput = {
    create?: XOR<UserCreateWithoutUserHistoryCreatedByRelInput, UserUncheckedCreateWithoutUserHistoryCreatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserHistoryCreatedByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserHistoryUpdatedByRelInput = {
    create?: XOR<UserCreateWithoutUserHistoryUpdatedByRelInput, UserUncheckedCreateWithoutUserHistoryUpdatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserHistoryUpdatedByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserHistoryIdRelInput = {
    create?: XOR<UserCreateWithoutUserHistoryIdRelInput, UserUncheckedCreateWithoutUserHistoryIdRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserHistoryIdRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutUserHistoryCreatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutUserHistoryCreatedByRelInput, UserUncheckedCreateWithoutUserHistoryCreatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserHistoryCreatedByRelInput
    upsert?: UserUpsertWithoutUserHistoryCreatedByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserHistoryCreatedByRelInput, UserUpdateWithoutUserHistoryCreatedByRelInput>, UserUncheckedUpdateWithoutUserHistoryCreatedByRelInput>
  }

  export type UserUpdateOneWithoutUserHistoryUpdatedByRelNestedInput = {
    create?: XOR<UserCreateWithoutUserHistoryUpdatedByRelInput, UserUncheckedCreateWithoutUserHistoryUpdatedByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserHistoryUpdatedByRelInput
    upsert?: UserUpsertWithoutUserHistoryUpdatedByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserHistoryUpdatedByRelInput, UserUpdateWithoutUserHistoryUpdatedByRelInput>, UserUncheckedUpdateWithoutUserHistoryUpdatedByRelInput>
  }

  export type UserUpdateOneRequiredWithoutUserHistoryIdRelNestedInput = {
    create?: XOR<UserCreateWithoutUserHistoryIdRelInput, UserUncheckedCreateWithoutUserHistoryIdRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserHistoryIdRelInput
    upsert?: UserUpsertWithoutUserHistoryIdRelInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserHistoryIdRelInput, UserUpdateWithoutUserHistoryIdRelInput>, UserUncheckedUpdateWithoutUserHistoryIdRelInput>
  }

  export type ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeIdRelInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeIdRelInput>
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeIdRelInput
    connect?: ChurchIncomeCodeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchIncomeCreateByRelInput = {
    create?: XOR<UserCreateWithoutChurchIncomeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeCreateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchIncomeUpdateByRelInput = {
    create?: XOR<UserCreateWithoutChurchIncomeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeUpdateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumTypeFieldUpdateOperationsInput = {
    set?: $Enums.Type
  }

  export type ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeIdRelNestedInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeIdRelInput>
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeIdRelInput
    upsert?: ChurchIncomeCodeUpsertWithoutChurchIncomeCodeIdRelInput
    connect?: ChurchIncomeCodeWhereUniqueInput
    update?: XOR<XOR<ChurchIncomeCodeUpdateToOneWithWhereWithoutChurchIncomeCodeIdRelInput, ChurchIncomeCodeUpdateWithoutChurchIncomeCodeIdRelInput>, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeIdRelInput>
  }

  export type UserUpdateOneWithoutChurchIncomeCreateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchIncomeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeCreateByRelInput
    upsert?: UserUpsertWithoutChurchIncomeCreateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchIncomeCreateByRelInput, UserUpdateWithoutChurchIncomeCreateByRelInput>, UserUncheckedUpdateWithoutChurchIncomeCreateByRelInput>
  }

  export type UserUpdateOneWithoutChurchIncomeUpdateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchIncomeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeUpdateByRelInput
    upsert?: UserUpsertWithoutChurchIncomeUpdateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchIncomeUpdateByRelInput, UserUpdateWithoutChurchIncomeUpdateByRelInput>, UserUncheckedUpdateWithoutChurchIncomeUpdateByRelInput>
  }

  export type ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeHistoryIdRelInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput>
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput
    connect?: ChurchIncomeCodeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchIncomeHistoryCreateByRelInput = {
    create?: XOR<UserCreateWithoutChurchIncomeHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchIncomeHistoryUpdateByRelInput = {
    create?: XOR<UserCreateWithoutChurchIncomeHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeHistoryIdRelNestedInput = {
    create?: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput>
    connectOrCreate?: ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput
    upsert?: ChurchIncomeCodeUpsertWithoutChurchIncomeCodeHistoryIdRelInput
    connect?: ChurchIncomeCodeWhereUniqueInput
    update?: XOR<XOR<ChurchIncomeCodeUpdateToOneWithWhereWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeCodeUpdateWithoutChurchIncomeCodeHistoryIdRelInput>, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeHistoryIdRelInput>
  }

  export type UserUpdateOneWithoutChurchIncomeHistoryCreateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchIncomeHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput
    upsert?: UserUpsertWithoutChurchIncomeHistoryCreateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchIncomeHistoryCreateByRelInput, UserUpdateWithoutChurchIncomeHistoryCreateByRelInput>, UserUncheckedUpdateWithoutChurchIncomeHistoryCreateByRelInput>
  }

  export type UserUpdateOneWithoutChurchIncomeHistoryUpdateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchIncomeHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput
    upsert?: UserUpsertWithoutChurchIncomeHistoryUpdateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchIncomeHistoryUpdateByRelInput, UserUpdateWithoutChurchIncomeHistoryUpdateByRelInput>, UserUncheckedUpdateWithoutChurchIncomeHistoryUpdateByRelInput>
  }

  export type UserCreateNestedOneWithoutChurchIncomeCodeCreateByRelInput = {
    create?: XOR<UserCreateWithoutChurchIncomeCodeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchIncomeCodeUpdateByRelInput = {
    create?: XOR<UserCreateWithoutChurchIncomeCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchIncomeCreateNestedManyWithoutChurchIncomeCodeIdRelInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput> | ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCodeIdRelInputEnvelope
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
  }

  export type ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInputEnvelope
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
  }

  export type ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCodeIdRelInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput> | ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCodeIdRelInputEnvelope
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
  }

  export type ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInputEnvelope
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutChurchIncomeCodeCreateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchIncomeCodeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput
    upsert?: UserUpsertWithoutChurchIncomeCodeCreateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchIncomeCodeCreateByRelInput, UserUpdateWithoutChurchIncomeCodeCreateByRelInput>, UserUncheckedUpdateWithoutChurchIncomeCodeCreateByRelInput>
  }

  export type UserUpdateOneWithoutChurchIncomeCodeUpdateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchIncomeCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput
    upsert?: UserUpsertWithoutChurchIncomeCodeUpdateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchIncomeCodeUpdateByRelInput, UserUpdateWithoutChurchIncomeCodeUpdateByRelInput>, UserUncheckedUpdateWithoutChurchIncomeCodeUpdateByRelInput>
  }

  export type ChurchIncomeUpdateManyWithoutChurchIncomeCodeIdRelNestedInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput> | ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput[]
    upsert?: ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCodeIdRelInput | ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCodeIdRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCodeIdRelInputEnvelope
    set?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    disconnect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    delete?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    update?: ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCodeIdRelInput | ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCodeIdRelInput[]
    updateMany?: ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCodeIdRelInput | ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCodeIdRelInput[]
    deleteMany?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
  }

  export type ChurchIncomeHistoryUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput[]
    upsert?: ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInputEnvelope
    set?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    disconnect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    delete?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    update?: ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput[]
    updateMany?: ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeCodeHistoryIdRelInput[]
    deleteMany?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
  }

  export type ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCodeIdRelNestedInput = {
    create?: XOR<ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput> | ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput[] | ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput[]
    connectOrCreate?: ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput | ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput[]
    upsert?: ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCodeIdRelInput | ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCodeIdRelInput[]
    createMany?: ChurchIncomeCreateManyChurchIncomeCodeIdRelInputEnvelope
    set?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    disconnect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    delete?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    connect?: ChurchIncomeWhereUniqueInput | ChurchIncomeWhereUniqueInput[]
    update?: ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCodeIdRelInput | ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCodeIdRelInput[]
    updateMany?: ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCodeIdRelInput | ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCodeIdRelInput[]
    deleteMany?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
  }

  export type ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput = {
    create?: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput> | ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput[] | ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput[]
    upsert?: ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput[]
    createMany?: ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInputEnvelope
    set?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    disconnect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    delete?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    connect?: ChurchIncomeHistoryWhereUniqueInput | ChurchIncomeHistoryWhereUniqueInput[]
    update?: ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput[]
    updateMany?: ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeCodeHistoryIdRelInput[]
    deleteMany?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
  }

  export type ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeIdRelInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeIdRelInput>
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeIdRelInput
    connect?: ChurchSpendingCodeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchSpendingCreateByRelInput = {
    create?: XOR<UserCreateWithoutChurchSpendingCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingCreateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchSpendingUpdateByRelInput = {
    create?: XOR<UserCreateWithoutChurchSpendingUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingUpdateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeIdRelNestedInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeIdRelInput>
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeIdRelInput
    upsert?: ChurchSpendingCodeUpsertWithoutChurchSpendingCodeIdRelInput
    connect?: ChurchSpendingCodeWhereUniqueInput
    update?: XOR<XOR<ChurchSpendingCodeUpdateToOneWithWhereWithoutChurchSpendingCodeIdRelInput, ChurchSpendingCodeUpdateWithoutChurchSpendingCodeIdRelInput>, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeIdRelInput>
  }

  export type UserUpdateOneWithoutChurchSpendingCreateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchSpendingCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingCreateByRelInput
    upsert?: UserUpsertWithoutChurchSpendingCreateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchSpendingCreateByRelInput, UserUpdateWithoutChurchSpendingCreateByRelInput>, UserUncheckedUpdateWithoutChurchSpendingCreateByRelInput>
  }

  export type UserUpdateOneWithoutChurchSpendingUpdateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchSpendingUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingUpdateByRelInput
    upsert?: UserUpsertWithoutChurchSpendingUpdateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchSpendingUpdateByRelInput, UserUpdateWithoutChurchSpendingUpdateByRelInput>, UserUncheckedUpdateWithoutChurchSpendingUpdateByRelInput>
  }

  export type ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeHistoryIdRelInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput>
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput
    connect?: ChurchSpendingCodeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchSpendingHistoryCreateByRelInput = {
    create?: XOR<UserCreateWithoutChurchSpendingHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchSpendingHistoryUpdateByRelInput = {
    create?: XOR<UserCreateWithoutChurchSpendingHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeHistoryIdRelNestedInput = {
    create?: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput>
    connectOrCreate?: ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput
    upsert?: ChurchSpendingCodeUpsertWithoutChurchSpendingCodeHistoryIdRelInput
    connect?: ChurchSpendingCodeWhereUniqueInput
    update?: XOR<XOR<ChurchSpendingCodeUpdateToOneWithWhereWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingCodeUpdateWithoutChurchSpendingCodeHistoryIdRelInput>, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeHistoryIdRelInput>
  }

  export type UserUpdateOneWithoutChurchSpendingHistoryCreateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchSpendingHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput
    upsert?: UserUpsertWithoutChurchSpendingHistoryCreateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchSpendingHistoryCreateByRelInput, UserUpdateWithoutChurchSpendingHistoryCreateByRelInput>, UserUncheckedUpdateWithoutChurchSpendingHistoryCreateByRelInput>
  }

  export type UserUpdateOneWithoutChurchSpendingHistoryUpdateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchSpendingHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput
    upsert?: UserUpsertWithoutChurchSpendingHistoryUpdateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchSpendingHistoryUpdateByRelInput, UserUpdateWithoutChurchSpendingHistoryUpdateByRelInput>, UserUncheckedUpdateWithoutChurchSpendingHistoryUpdateByRelInput>
  }

  export type UserCreateNestedOneWithoutChurchSpendingCodeCreateByRelInput = {
    create?: XOR<UserCreateWithoutChurchSpendingCodeCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChurchSpendingCodeUpdateByRelInput = {
    create?: XOR<UserCreateWithoutChurchSpendingCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchSpendingCreateNestedManyWithoutChurchSpendingCodeIdRelInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput> | ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCodeIdRelInputEnvelope
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
  }

  export type ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInputEnvelope
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
  }

  export type ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCodeIdRelInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput> | ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCodeIdRelInputEnvelope
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
  }

  export type ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInputEnvelope
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutChurchSpendingCodeCreateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchSpendingCodeCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput
    upsert?: UserUpsertWithoutChurchSpendingCodeCreateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchSpendingCodeCreateByRelInput, UserUpdateWithoutChurchSpendingCodeCreateByRelInput>, UserUncheckedUpdateWithoutChurchSpendingCodeCreateByRelInput>
  }

  export type UserUpdateOneWithoutChurchSpendingCodeUpdateByRelNestedInput = {
    create?: XOR<UserCreateWithoutChurchSpendingCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput
    upsert?: UserUpsertWithoutChurchSpendingCodeUpdateByRelInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchSpendingCodeUpdateByRelInput, UserUpdateWithoutChurchSpendingCodeUpdateByRelInput>, UserUncheckedUpdateWithoutChurchSpendingCodeUpdateByRelInput>
  }

  export type ChurchSpendingUpdateManyWithoutChurchSpendingCodeIdRelNestedInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput> | ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput[]
    upsert?: ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCodeIdRelInput | ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCodeIdRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCodeIdRelInputEnvelope
    set?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    disconnect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    delete?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    update?: ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCodeIdRelInput | ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCodeIdRelInput[]
    updateMany?: ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCodeIdRelInput | ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCodeIdRelInput[]
    deleteMany?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
  }

  export type ChurchSpendingHistoryUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput[]
    upsert?: ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInputEnvelope
    set?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    disconnect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    delete?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    update?: ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput[]
    updateMany?: ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingCodeHistoryIdRelInput[]
    deleteMany?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
  }

  export type ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCodeIdRelNestedInput = {
    create?: XOR<ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput> | ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput[] | ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput[]
    connectOrCreate?: ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput | ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput[]
    upsert?: ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCodeIdRelInput | ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCodeIdRelInput[]
    createMany?: ChurchSpendingCreateManyChurchSpendingCodeIdRelInputEnvelope
    set?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    disconnect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    delete?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    connect?: ChurchSpendingWhereUniqueInput | ChurchSpendingWhereUniqueInput[]
    update?: ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCodeIdRelInput | ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCodeIdRelInput[]
    updateMany?: ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCodeIdRelInput | ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCodeIdRelInput[]
    deleteMany?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
  }

  export type ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput = {
    create?: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput> | ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput[] | ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput[]
    connectOrCreate?: ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput[]
    upsert?: ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput[]
    createMany?: ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInputEnvelope
    set?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    disconnect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    delete?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    connect?: ChurchSpendingHistoryWhereUniqueInput | ChurchSpendingHistoryWhereUniqueInput[]
    update?: ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput[]
    updateMany?: ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingCodeHistoryIdRelInput[]
    deleteMany?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type UserCreateWithoutSelfCreatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutSelfCreatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutSelfCreatedByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSelfCreatedByRelInput, UserUncheckedCreateWithoutSelfCreatedByRelInput>
  }

  export type UserCreateWithoutCreatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutCreatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutCreatedByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedByRelInput, UserUncheckedCreateWithoutCreatedByRelInput>
  }

  export type UserCreateManyCreatedByRelInputEnvelope = {
    data: UserCreateManyCreatedByRelInput | UserCreateManyCreatedByRelInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutSelfUpdatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutSelfUpdatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutSelfUpdatedByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSelfUpdatedByRelInput, UserUncheckedCreateWithoutSelfUpdatedByRelInput>
  }

  export type UserCreateWithoutUpdatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutUpdatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutUpdatedByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedByRelInput, UserUncheckedCreateWithoutUpdatedByRelInput>
  }

  export type UserCreateManyUpdatedByRelInputEnvelope = {
    data: UserCreateManyUpdatedByRelInput | UserCreateManyUpdatedByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeIdRel: ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeIdRelInput
    churchIncomeUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeUpdateByRelInput
  }

  export type ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput = {
    id?: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeCreateOrConnectWithoutChurchIncomeCreateByRelInput = {
    where: ChurchIncomeWhereUniqueInput
    create: XOR<ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput>
  }

  export type ChurchIncomeCreateManyChurchIncomeCreateByRelInputEnvelope = {
    data: ChurchIncomeCreateManyChurchIncomeCreateByRelInput | ChurchIncomeCreateManyChurchIncomeCreateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeIdRel: ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeIdRelInput
    churchIncomeCreateByRel?: UserCreateNestedOneWithoutChurchIncomeCreateByRelInput
  }

  export type ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput = {
    id?: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchIncomeCreateOrConnectWithoutChurchIncomeUpdateByRelInput = {
    where: ChurchIncomeWhereUniqueInput
    create: XOR<ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput>
  }

  export type ChurchIncomeCreateManyChurchIncomeUpdateByRelInputEnvelope = {
    data: ChurchIncomeCreateManyChurchIncomeUpdateByRelInput | ChurchIncomeCreateManyChurchIncomeUpdateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeUpdateByRelInput
    churchIncomeCodeIdRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCodeIdRelInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCodeIdRelInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput>
  }

  export type ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInputEnvelope = {
    data: ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInput | ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeCreateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeIdRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCodeIdRelInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCodeIdRelInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput>
  }

  export type ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInputEnvelope = {
    data: ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInput | ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingCodeIdRel: ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeIdRelInput
    churchSpendingUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingUpdateByRelInput
  }

  export type ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput = {
    id?: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingCreateOrConnectWithoutChurchSpendingCreateByRelInput = {
    where: ChurchSpendingWhereUniqueInput
    create: XOR<ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput>
  }

  export type ChurchSpendingCreateManyChurchSpendingCreateByRelInputEnvelope = {
    data: ChurchSpendingCreateManyChurchSpendingCreateByRelInput | ChurchSpendingCreateManyChurchSpendingCreateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingCodeIdRel: ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeIdRelInput
    churchSpendingCreateByRel?: UserCreateNestedOneWithoutChurchSpendingCreateByRelInput
  }

  export type ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput = {
    id?: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchSpendingCreateOrConnectWithoutChurchSpendingUpdateByRelInput = {
    where: ChurchSpendingWhereUniqueInput
    create: XOR<ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput>
  }

  export type ChurchSpendingCreateManyChurchSpendingUpdateByRelInputEnvelope = {
    data: ChurchSpendingCreateManyChurchSpendingUpdateByRelInput | ChurchSpendingCreateManyChurchSpendingUpdateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    deleted?: boolean
    updatedAt?: Date | string
    churchSpendingCodeUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeUpdateByRelInput
    churchSpendingCodeIdRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCodeIdRelInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    deleted?: boolean
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCodeIdRelInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput>
  }

  export type ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInputEnvelope = {
    data: ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInput | ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    deleted?: boolean
    updatedAt?: Date | string
    churchSpendingCodeCreateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeIdRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCodeIdRelInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    createBy?: bigint | number | null
    deleted?: boolean
    updatedAt?: Date | string
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCodeIdRelInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput>
  }

  export type ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInputEnvelope = {
    data: ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInput | ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInput[]
    skipDuplicates?: boolean
  }

  export type UserHistoryCreateWithoutUserHistoryCreatedByRelInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
    userHistoryUpdatedByRel?: UserCreateNestedOneWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel: UserCreateNestedOneWithoutUserHistoryIdRelInput
  }

  export type UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput = {
    id?: bigint | number
    userId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryCreateOrConnectWithoutUserHistoryCreatedByRelInput = {
    where: UserHistoryWhereUniqueInput
    create: XOR<UserHistoryCreateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput>
  }

  export type UserHistoryCreateManyUserHistoryCreatedByRelInputEnvelope = {
    data: UserHistoryCreateManyUserHistoryCreatedByRelInput | UserHistoryCreateManyUserHistoryCreatedByRelInput[]
    skipDuplicates?: boolean
  }

  export type UserHistoryCreateWithoutUserHistoryUpdatedByRelInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
    userHistoryCreatedByRel?: UserCreateNestedOneWithoutUserHistoryCreatedByRelInput
    userHistoryIdRel: UserCreateNestedOneWithoutUserHistoryIdRelInput
  }

  export type UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput = {
    id?: bigint | number
    userId: bigint | number
    createdAt?: Date | string
    createdBy?: bigint | number | null
    updatedAt?: Date | string
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryCreateOrConnectWithoutUserHistoryUpdatedByRelInput = {
    where: UserHistoryWhereUniqueInput
    create: XOR<UserHistoryCreateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput>
  }

  export type UserHistoryCreateManyUserHistoryUpdatedByRelInputEnvelope = {
    data: UserHistoryCreateManyUserHistoryUpdatedByRelInput | UserHistoryCreateManyUserHistoryUpdatedByRelInput[]
    skipDuplicates?: boolean
  }

  export type UserHistoryCreateWithoutUserHistoryIdRelInput = {
    id?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
    userHistoryCreatedByRel?: UserCreateNestedOneWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserCreateNestedOneWithoutUserHistoryUpdatedByRelInput
  }

  export type UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput = {
    id?: bigint | number
    createdAt?: Date | string
    createdBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryCreateOrConnectWithoutUserHistoryIdRelInput = {
    where: UserHistoryWhereUniqueInput
    create: XOR<UserHistoryCreateWithoutUserHistoryIdRelInput, UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput>
  }

  export type UserHistoryCreateManyUserHistoryIdRelInputEnvelope = {
    data: UserHistoryCreateManyUserHistoryIdRelInput | UserHistoryCreateManyUserHistoryIdRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeHistoryIdRel: ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeHistoryIdRelInput
    churchIncomeHistoryUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeHistoryUpdateByRelInput
  }

  export type ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    create: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput>
  }

  export type ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInputEnvelope = {
    data: ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInput | ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeHistoryIdRel: ChurchIncomeCodeCreateNestedOneWithoutChurchIncomeCodeHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: UserCreateNestedOneWithoutChurchIncomeHistoryCreateByRelInput
  }

  export type ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    create: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput>
  }

  export type ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInputEnvelope = {
    data: ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInput | ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingCodeHistoryIdRel: ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeHistoryIdRelInput
    churchSpendingHistoryUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    create: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput>
  }

  export type ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInputEnvelope = {
    data: ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInput | ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingCodeHistoryIdRel: ChurchSpendingCodeCreateNestedOneWithoutChurchSpendingCodeHistoryIdRelInput
    churchSpendingHistoryCreateByRel?: UserCreateNestedOneWithoutChurchSpendingHistoryCreateByRelInput
  }

  export type ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    create: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput>
  }

  export type ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInputEnvelope = {
    data: ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInput | ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSelfCreatedByRelInput = {
    update: XOR<UserUpdateWithoutSelfCreatedByRelInput, UserUncheckedUpdateWithoutSelfCreatedByRelInput>
    create: XOR<UserCreateWithoutSelfCreatedByRelInput, UserUncheckedCreateWithoutSelfCreatedByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSelfCreatedByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSelfCreatedByRelInput, UserUncheckedUpdateWithoutSelfCreatedByRelInput>
  }

  export type UserUpdateWithoutSelfCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutSelfCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutCreatedByRelInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCreatedByRelInput, UserUncheckedUpdateWithoutCreatedByRelInput>
    create: XOR<UserCreateWithoutCreatedByRelInput, UserUncheckedCreateWithoutCreatedByRelInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCreatedByRelInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCreatedByRelInput, UserUncheckedUpdateWithoutCreatedByRelInput>
  }

  export type UserUpdateManyWithWhereWithoutCreatedByRelInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCreatedByRelInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: BigIntFilter<"User"> | bigint | number
    userName?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    deleted?: BoolFilter<"User"> | boolean
    createAt?: DateTimeFilter<"User"> | Date | string
    createBy?: BigIntNullableFilter<"User"> | bigint | number | null
    updatedAt?: DateTimeFilter<"User"> | Date | string
    updatedBy?: BigIntNullableFilter<"User"> | bigint | number | null
  }

  export type UserUpsertWithoutSelfUpdatedByRelInput = {
    update: XOR<UserUpdateWithoutSelfUpdatedByRelInput, UserUncheckedUpdateWithoutSelfUpdatedByRelInput>
    create: XOR<UserCreateWithoutSelfUpdatedByRelInput, UserUncheckedCreateWithoutSelfUpdatedByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSelfUpdatedByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSelfUpdatedByRelInput, UserUncheckedUpdateWithoutSelfUpdatedByRelInput>
  }

  export type UserUpdateWithoutSelfUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutSelfUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutUpdatedByRelInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUpdatedByRelInput, UserUncheckedUpdateWithoutUpdatedByRelInput>
    create: XOR<UserCreateWithoutUpdatedByRelInput, UserUncheckedCreateWithoutUpdatedByRelInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUpdatedByRelInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUpdatedByRelInput, UserUncheckedUpdateWithoutUpdatedByRelInput>
  }

  export type UserUpdateManyWithWhereWithoutUpdatedByRelInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUpdatedByRelInput>
  }

  export type ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCreateByRelInput = {
    where: ChurchIncomeWhereUniqueInput
    update: XOR<ChurchIncomeUpdateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedUpdateWithoutChurchIncomeCreateByRelInput>
    create: XOR<ChurchIncomeCreateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCreateByRelInput>
  }

  export type ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCreateByRelInput = {
    where: ChurchIncomeWhereUniqueInput
    data: XOR<ChurchIncomeUpdateWithoutChurchIncomeCreateByRelInput, ChurchIncomeUncheckedUpdateWithoutChurchIncomeCreateByRelInput>
  }

  export type ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCreateByRelInput = {
    where: ChurchIncomeScalarWhereInput
    data: XOR<ChurchIncomeUpdateManyMutationInput, ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelInput>
  }

  export type ChurchIncomeScalarWhereInput = {
    AND?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
    OR?: ChurchIncomeScalarWhereInput[]
    NOT?: ChurchIncomeScalarWhereInput | ChurchIncomeScalarWhereInput[]
    id?: BigIntFilter<"ChurchIncome"> | bigint | number
    incomeCodeId?: BigIntFilter<"ChurchIncome"> | bigint | number
    detail?: StringNullableFilter<"ChurchIncome"> | string | null
    funds?: BigIntFilter<"ChurchIncome"> | bigint | number
    date?: DateTimeFilter<"ChurchIncome"> | Date | string
    bill?: StringNullableFilter<"ChurchIncome"> | string | null
    billNumber?: StringNullableFilter<"ChurchIncome"> | string | null
    fundsType?: EnumTypeFilter<"ChurchIncome"> | $Enums.Type
    deleted?: BoolFilter<"ChurchIncome"> | boolean
    createAt?: DateTimeFilter<"ChurchIncome"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncome"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncome"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncome"> | bigint | number | null
  }

  export type ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeUpdateByRelInput = {
    where: ChurchIncomeWhereUniqueInput
    update: XOR<ChurchIncomeUpdateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedUpdateWithoutChurchIncomeUpdateByRelInput>
    create: XOR<ChurchIncomeCreateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeUpdateByRelInput>
  }

  export type ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeUpdateByRelInput = {
    where: ChurchIncomeWhereUniqueInput
    data: XOR<ChurchIncomeUpdateWithoutChurchIncomeUpdateByRelInput, ChurchIncomeUncheckedUpdateWithoutChurchIncomeUpdateByRelInput>
  }

  export type ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeUpdateByRelInput = {
    where: ChurchIncomeScalarWhereInput
    data: XOR<ChurchIncomeUpdateManyMutationInput, ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelInput>
  }

  export type ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    update: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeCreateByRelInput>
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput>
  }

  export type ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeCreateByRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    data: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeCreateByRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeCreateByRelInput>
  }

  export type ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeCreateByRelInput = {
    where: ChurchIncomeCodeScalarWhereInput
    data: XOR<ChurchIncomeCodeUpdateManyMutationInput, ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelInput>
  }

  export type ChurchIncomeCodeScalarWhereInput = {
    AND?: ChurchIncomeCodeScalarWhereInput | ChurchIncomeCodeScalarWhereInput[]
    OR?: ChurchIncomeCodeScalarWhereInput[]
    NOT?: ChurchIncomeCodeScalarWhereInput | ChurchIncomeCodeScalarWhereInput[]
    id?: BigIntFilter<"ChurchIncomeCode"> | bigint | number
    incomeCodeName?: StringFilter<"ChurchIncomeCode"> | string
    code?: StringFilter<"ChurchIncomeCode"> | string
    description?: StringFilter<"ChurchIncomeCode"> | string
    deleted?: BoolFilter<"ChurchIncomeCode"> | boolean
    createAt?: DateTimeFilter<"ChurchIncomeCode"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncomeCode"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncomeCode"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncomeCode"> | bigint | number | null
  }

  export type ChurchIncomeCodeUpsertWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    update: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeUpdateByRelInput>
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput>
  }

  export type ChurchIncomeCodeUpdateWithWhereUniqueWithoutChurchIncomeCodeUpdateByRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    data: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeUpdateByRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeUpdateByRelInput>
  }

  export type ChurchIncomeCodeUpdateManyWithWhereWithoutChurchIncomeCodeUpdateByRelInput = {
    where: ChurchIncomeCodeScalarWhereInput
    data: XOR<ChurchIncomeCodeUpdateManyMutationInput, ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelInput>
  }

  export type ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCreateByRelInput = {
    where: ChurchSpendingWhereUniqueInput
    update: XOR<ChurchSpendingUpdateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedUpdateWithoutChurchSpendingCreateByRelInput>
    create: XOR<ChurchSpendingCreateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCreateByRelInput>
  }

  export type ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCreateByRelInput = {
    where: ChurchSpendingWhereUniqueInput
    data: XOR<ChurchSpendingUpdateWithoutChurchSpendingCreateByRelInput, ChurchSpendingUncheckedUpdateWithoutChurchSpendingCreateByRelInput>
  }

  export type ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCreateByRelInput = {
    where: ChurchSpendingScalarWhereInput
    data: XOR<ChurchSpendingUpdateManyMutationInput, ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelInput>
  }

  export type ChurchSpendingScalarWhereInput = {
    AND?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
    OR?: ChurchSpendingScalarWhereInput[]
    NOT?: ChurchSpendingScalarWhereInput | ChurchSpendingScalarWhereInput[]
    id?: BigIntFilter<"ChurchSpending"> | bigint | number
    spendingCodeId?: BigIntFilter<"ChurchSpending"> | bigint | number
    detail?: StringNullableFilter<"ChurchSpending"> | string | null
    funds?: BigIntFilter<"ChurchSpending"> | bigint | number
    date?: DateTimeFilter<"ChurchSpending"> | Date | string
    bill?: StringNullableFilter<"ChurchSpending"> | string | null
    billNumber?: StringNullableFilter<"ChurchSpending"> | string | null
    fundsType?: EnumTypeFilter<"ChurchSpending"> | $Enums.Type
    deleted?: BoolFilter<"ChurchSpending"> | boolean
    createAt?: DateTimeFilter<"ChurchSpending"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpending"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchSpending"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpending"> | bigint | number | null
  }

  export type ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingUpdateByRelInput = {
    where: ChurchSpendingWhereUniqueInput
    update: XOR<ChurchSpendingUpdateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedUpdateWithoutChurchSpendingUpdateByRelInput>
    create: XOR<ChurchSpendingCreateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingUpdateByRelInput>
  }

  export type ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingUpdateByRelInput = {
    where: ChurchSpendingWhereUniqueInput
    data: XOR<ChurchSpendingUpdateWithoutChurchSpendingUpdateByRelInput, ChurchSpendingUncheckedUpdateWithoutChurchSpendingUpdateByRelInput>
  }

  export type ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingUpdateByRelInput = {
    where: ChurchSpendingScalarWhereInput
    data: XOR<ChurchSpendingUpdateManyMutationInput, ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelInput>
  }

  export type ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    update: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeCreateByRelInput>
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput>
  }

  export type ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeCreateByRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    data: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeCreateByRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeCreateByRelInput>
  }

  export type ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeCreateByRelInput = {
    where: ChurchSpendingCodeScalarWhereInput
    data: XOR<ChurchSpendingCodeUpdateManyMutationInput, ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelInput>
  }

  export type ChurchSpendingCodeScalarWhereInput = {
    AND?: ChurchSpendingCodeScalarWhereInput | ChurchSpendingCodeScalarWhereInput[]
    OR?: ChurchSpendingCodeScalarWhereInput[]
    NOT?: ChurchSpendingCodeScalarWhereInput | ChurchSpendingCodeScalarWhereInput[]
    id?: BigIntFilter<"ChurchSpendingCode"> | bigint | number
    spendingCodeName?: StringFilter<"ChurchSpendingCode"> | string
    code?: StringFilter<"ChurchSpendingCode"> | string
    description?: StringFilter<"ChurchSpendingCode"> | string
    createAt?: DateTimeFilter<"ChurchSpendingCode"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpendingCode"> | bigint | number | null
    deleted?: BoolFilter<"ChurchSpendingCode"> | boolean
    updatedAt?: DateTimeFilter<"ChurchSpendingCode"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpendingCode"> | bigint | number | null
  }

  export type ChurchSpendingCodeUpsertWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    update: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeUpdateByRelInput>
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput>
  }

  export type ChurchSpendingCodeUpdateWithWhereUniqueWithoutChurchSpendingCodeUpdateByRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    data: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeUpdateByRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeUpdateByRelInput>
  }

  export type ChurchSpendingCodeUpdateManyWithWhereWithoutChurchSpendingCodeUpdateByRelInput = {
    where: ChurchSpendingCodeScalarWhereInput
    data: XOR<ChurchSpendingCodeUpdateManyMutationInput, ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelInput>
  }

  export type UserHistoryUpsertWithWhereUniqueWithoutUserHistoryCreatedByRelInput = {
    where: UserHistoryWhereUniqueInput
    update: XOR<UserHistoryUpdateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedUpdateWithoutUserHistoryCreatedByRelInput>
    create: XOR<UserHistoryCreateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryCreatedByRelInput>
  }

  export type UserHistoryUpdateWithWhereUniqueWithoutUserHistoryCreatedByRelInput = {
    where: UserHistoryWhereUniqueInput
    data: XOR<UserHistoryUpdateWithoutUserHistoryCreatedByRelInput, UserHistoryUncheckedUpdateWithoutUserHistoryCreatedByRelInput>
  }

  export type UserHistoryUpdateManyWithWhereWithoutUserHistoryCreatedByRelInput = {
    where: UserHistoryScalarWhereInput
    data: XOR<UserHistoryUpdateManyMutationInput, UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelInput>
  }

  export type UserHistoryScalarWhereInput = {
    AND?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
    OR?: UserHistoryScalarWhereInput[]
    NOT?: UserHistoryScalarWhereInput | UserHistoryScalarWhereInput[]
    id?: BigIntFilter<"UserHistory"> | bigint | number
    userId?: BigIntFilter<"UserHistory"> | bigint | number
    createdAt?: DateTimeFilter<"UserHistory"> | Date | string
    createdBy?: BigIntNullableFilter<"UserHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"UserHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"UserHistory"> | bigint | number | null
    deleted?: BoolFilter<"UserHistory"> | boolean
    oldData?: JsonFilter<"UserHistory">
    newData?: JsonFilter<"UserHistory">
  }

  export type UserHistoryUpsertWithWhereUniqueWithoutUserHistoryUpdatedByRelInput = {
    where: UserHistoryWhereUniqueInput
    update: XOR<UserHistoryUpdateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedUpdateWithoutUserHistoryUpdatedByRelInput>
    create: XOR<UserHistoryCreateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedCreateWithoutUserHistoryUpdatedByRelInput>
  }

  export type UserHistoryUpdateWithWhereUniqueWithoutUserHistoryUpdatedByRelInput = {
    where: UserHistoryWhereUniqueInput
    data: XOR<UserHistoryUpdateWithoutUserHistoryUpdatedByRelInput, UserHistoryUncheckedUpdateWithoutUserHistoryUpdatedByRelInput>
  }

  export type UserHistoryUpdateManyWithWhereWithoutUserHistoryUpdatedByRelInput = {
    where: UserHistoryScalarWhereInput
    data: XOR<UserHistoryUpdateManyMutationInput, UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelInput>
  }

  export type UserHistoryUpsertWithWhereUniqueWithoutUserHistoryIdRelInput = {
    where: UserHistoryWhereUniqueInput
    update: XOR<UserHistoryUpdateWithoutUserHistoryIdRelInput, UserHistoryUncheckedUpdateWithoutUserHistoryIdRelInput>
    create: XOR<UserHistoryCreateWithoutUserHistoryIdRelInput, UserHistoryUncheckedCreateWithoutUserHistoryIdRelInput>
  }

  export type UserHistoryUpdateWithWhereUniqueWithoutUserHistoryIdRelInput = {
    where: UserHistoryWhereUniqueInput
    data: XOR<UserHistoryUpdateWithoutUserHistoryIdRelInput, UserHistoryUncheckedUpdateWithoutUserHistoryIdRelInput>
  }

  export type UserHistoryUpdateManyWithWhereWithoutUserHistoryIdRelInput = {
    where: UserHistoryScalarWhereInput
    data: XOR<UserHistoryUpdateManyMutationInput, UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelInput>
  }

  export type ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    update: XOR<ChurchIncomeHistoryUpdateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeHistoryCreateByRelInput>
    create: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput>
  }

  export type ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryCreateByRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    data: XOR<ChurchIncomeHistoryUpdateWithoutChurchIncomeHistoryCreateByRelInput, ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeHistoryCreateByRelInput>
  }

  export type ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryCreateByRelInput = {
    where: ChurchIncomeHistoryScalarWhereInput
    data: XOR<ChurchIncomeHistoryUpdateManyMutationInput, ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelInput>
  }

  export type ChurchIncomeHistoryScalarWhereInput = {
    AND?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
    OR?: ChurchIncomeHistoryScalarWhereInput[]
    NOT?: ChurchIncomeHistoryScalarWhereInput | ChurchIncomeHistoryScalarWhereInput[]
    revId?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    id?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    incomeCodeId?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    detail?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    funds?: BigIntFilter<"ChurchIncomeHistory"> | bigint | number
    date?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    bill?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    billNumber?: StringNullableFilter<"ChurchIncomeHistory"> | string | null
    fundsType?: EnumTypeFilter<"ChurchIncomeHistory"> | $Enums.Type
    deleted?: BoolFilter<"ChurchIncomeHistory"> | boolean
    createAt?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchIncomeHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchIncomeHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchIncomeHistory"> | bigint | number | null
  }

  export type ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    update: XOR<ChurchIncomeHistoryUpdateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeHistoryUpdateByRelInput>
    create: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput>
  }

  export type ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeHistoryUpdateByRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    data: XOR<ChurchIncomeHistoryUpdateWithoutChurchIncomeHistoryUpdateByRelInput, ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeHistoryUpdateByRelInput>
  }

  export type ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeHistoryUpdateByRelInput = {
    where: ChurchIncomeHistoryScalarWhereInput
    data: XOR<ChurchIncomeHistoryUpdateManyMutationInput, ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelInput>
  }

  export type ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    update: XOR<ChurchSpendingHistoryUpdateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingHistoryCreateByRelInput>
    create: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput>
  }

  export type ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryCreateByRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    data: XOR<ChurchSpendingHistoryUpdateWithoutChurchSpendingHistoryCreateByRelInput, ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingHistoryCreateByRelInput>
  }

  export type ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryCreateByRelInput = {
    where: ChurchSpendingHistoryScalarWhereInput
    data: XOR<ChurchSpendingHistoryUpdateManyMutationInput, ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelInput>
  }

  export type ChurchSpendingHistoryScalarWhereInput = {
    AND?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
    OR?: ChurchSpendingHistoryScalarWhereInput[]
    NOT?: ChurchSpendingHistoryScalarWhereInput | ChurchSpendingHistoryScalarWhereInput[]
    revId?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    id?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    spendingCodeId?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    detail?: StringNullableFilter<"ChurchSpendingHistory"> | string | null
    funds?: BigIntFilter<"ChurchSpendingHistory"> | bigint | number
    date?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    bill?: StringFilter<"ChurchSpendingHistory"> | string
    billNumber?: StringFilter<"ChurchSpendingHistory"> | string
    fundsType?: EnumTypeFilter<"ChurchSpendingHistory"> | $Enums.Type
    deleted?: BoolFilter<"ChurchSpendingHistory"> | boolean
    createAt?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    createBy?: BigIntNullableFilter<"ChurchSpendingHistory"> | bigint | number | null
    updatedAt?: DateTimeFilter<"ChurchSpendingHistory"> | Date | string
    updatedBy?: BigIntNullableFilter<"ChurchSpendingHistory"> | bigint | number | null
  }

  export type ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    update: XOR<ChurchSpendingHistoryUpdateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingHistoryUpdateByRelInput>
    create: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput>
  }

  export type ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingHistoryUpdateByRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    data: XOR<ChurchSpendingHistoryUpdateWithoutChurchSpendingHistoryUpdateByRelInput, ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingHistoryUpdateByRelInput>
  }

  export type ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingHistoryUpdateByRelInput = {
    where: ChurchSpendingHistoryScalarWhereInput
    data: XOR<ChurchSpendingHistoryUpdateManyMutationInput, ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelInput>
  }

  export type UserCreateWithoutUserHistoryCreatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutUserHistoryCreatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutUserHistoryCreatedByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserHistoryCreatedByRelInput, UserUncheckedCreateWithoutUserHistoryCreatedByRelInput>
  }

  export type UserCreateWithoutUserHistoryUpdatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutUserHistoryUpdatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutUserHistoryUpdatedByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserHistoryUpdatedByRelInput, UserUncheckedCreateWithoutUserHistoryUpdatedByRelInput>
  }

  export type UserCreateWithoutUserHistoryIdRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutUserHistoryIdRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutUserHistoryIdRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserHistoryIdRelInput, UserUncheckedCreateWithoutUserHistoryIdRelInput>
  }

  export type UserUpsertWithoutUserHistoryCreatedByRelInput = {
    update: XOR<UserUpdateWithoutUserHistoryCreatedByRelInput, UserUncheckedUpdateWithoutUserHistoryCreatedByRelInput>
    create: XOR<UserCreateWithoutUserHistoryCreatedByRelInput, UserUncheckedCreateWithoutUserHistoryCreatedByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserHistoryCreatedByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserHistoryCreatedByRelInput, UserUncheckedUpdateWithoutUserHistoryCreatedByRelInput>
  }

  export type UserUpdateWithoutUserHistoryCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutUserHistoryCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutUserHistoryUpdatedByRelInput = {
    update: XOR<UserUpdateWithoutUserHistoryUpdatedByRelInput, UserUncheckedUpdateWithoutUserHistoryUpdatedByRelInput>
    create: XOR<UserCreateWithoutUserHistoryUpdatedByRelInput, UserUncheckedCreateWithoutUserHistoryUpdatedByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserHistoryUpdatedByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserHistoryUpdatedByRelInput, UserUncheckedUpdateWithoutUserHistoryUpdatedByRelInput>
  }

  export type UserUpdateWithoutUserHistoryUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutUserHistoryUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutUserHistoryIdRelInput = {
    update: XOR<UserUpdateWithoutUserHistoryIdRelInput, UserUncheckedUpdateWithoutUserHistoryIdRelInput>
    create: XOR<UserCreateWithoutUserHistoryIdRelInput, UserUncheckedCreateWithoutUserHistoryIdRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserHistoryIdRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserHistoryIdRelInput, UserUncheckedUpdateWithoutUserHistoryIdRelInput>
  }

  export type UserUpdateWithoutUserHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutUserHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchIncomeCodeCreateWithoutChurchIncomeCodeIdRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeCreateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeUpdateByRelInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeIdRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeCodeHistoryIdRelInput
  }

  export type ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeIdRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeIdRelInput>
  }

  export type UserCreateWithoutChurchIncomeCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchIncomeCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchIncomeCreateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchIncomeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCreateByRelInput>
  }

  export type UserCreateWithoutChurchIncomeUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchIncomeUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchIncomeUpdateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchIncomeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeUpdateByRelInput>
  }

  export type ChurchIncomeCodeUpsertWithoutChurchIncomeCodeIdRelInput = {
    update: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeIdRelInput>
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeIdRelInput>
    where?: ChurchIncomeCodeWhereInput
  }

  export type ChurchIncomeCodeUpdateToOneWithWhereWithoutChurchIncomeCodeIdRelInput = {
    where?: ChurchIncomeCodeWhereInput
    data: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeIdRelInput>
  }

  export type ChurchIncomeCodeUpdateWithoutChurchIncomeCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeCreateByRel?: UserUpdateOneWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: UserUpdateOneWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type UserUpsertWithoutChurchIncomeCreateByRelInput = {
    update: XOR<UserUpdateWithoutChurchIncomeCreateByRelInput, UserUncheckedUpdateWithoutChurchIncomeCreateByRelInput>
    create: XOR<UserCreateWithoutChurchIncomeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCreateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchIncomeCreateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchIncomeCreateByRelInput, UserUncheckedUpdateWithoutChurchIncomeCreateByRelInput>
  }

  export type UserUpdateWithoutChurchIncomeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchIncomeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutChurchIncomeUpdateByRelInput = {
    update: XOR<UserUpdateWithoutChurchIncomeUpdateByRelInput, UserUncheckedUpdateWithoutChurchIncomeUpdateByRelInput>
    create: XOR<UserCreateWithoutChurchIncomeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeUpdateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchIncomeUpdateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchIncomeUpdateByRelInput, UserUncheckedUpdateWithoutChurchIncomeUpdateByRelInput>
  }

  export type UserUpdateWithoutChurchIncomeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchIncomeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchIncomeCodeCreateWithoutChurchIncomeCodeHistoryIdRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCodeCreateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeCodeUpdateByRelInput
    churchIncomeCodeIdRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCodeIdRelInput
  }

  export type ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCodeIdRelInput
  }

  export type ChurchIncomeCodeCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput = {
    where: ChurchIncomeCodeWhereUniqueInput
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput>
  }

  export type UserCreateWithoutChurchIncomeHistoryCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchIncomeHistoryCreateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchIncomeHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput>
  }

  export type UserCreateWithoutChurchIncomeHistoryUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchIncomeHistoryUpdateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchIncomeHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput>
  }

  export type ChurchIncomeCodeUpsertWithoutChurchIncomeCodeHistoryIdRelInput = {
    update: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeHistoryIdRelInput>
    create: XOR<ChurchIncomeCodeCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeCodeUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput>
    where?: ChurchIncomeCodeWhereInput
  }

  export type ChurchIncomeCodeUpdateToOneWithWhereWithoutChurchIncomeCodeHistoryIdRelInput = {
    where?: ChurchIncomeCodeWhereInput
    data: XOR<ChurchIncomeCodeUpdateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeHistoryIdRelInput>
  }

  export type ChurchIncomeCodeUpdateWithoutChurchIncomeCodeHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeCreateByRel?: UserUpdateOneWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: UserUpdateOneWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchIncomeCodeIdRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
  }

  export type ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
  }

  export type UserUpsertWithoutChurchIncomeHistoryCreateByRelInput = {
    update: XOR<UserUpdateWithoutChurchIncomeHistoryCreateByRelInput, UserUncheckedUpdateWithoutChurchIncomeHistoryCreateByRelInput>
    create: XOR<UserCreateWithoutChurchIncomeHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryCreateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchIncomeHistoryCreateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchIncomeHistoryCreateByRelInput, UserUncheckedUpdateWithoutChurchIncomeHistoryCreateByRelInput>
  }

  export type UserUpdateWithoutChurchIncomeHistoryCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchIncomeHistoryCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutChurchIncomeHistoryUpdateByRelInput = {
    update: XOR<UserUpdateWithoutChurchIncomeHistoryUpdateByRelInput, UserUncheckedUpdateWithoutChurchIncomeHistoryUpdateByRelInput>
    create: XOR<UserCreateWithoutChurchIncomeHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeHistoryUpdateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchIncomeHistoryUpdateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchIncomeHistoryUpdateByRelInput, UserUncheckedUpdateWithoutChurchIncomeHistoryUpdateByRelInput>
  }

  export type UserUpdateWithoutChurchIncomeHistoryUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchIncomeHistoryUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserCreateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchIncomeCodeCreateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchIncomeCodeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput>
  }

  export type UserCreateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchIncomeCodeUpdateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchIncomeCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput>
  }

  export type ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeCreateByRel?: UserCreateNestedOneWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeUpdateByRelInput
  }

  export type ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeCreateOrConnectWithoutChurchIncomeCodeIdRelInput = {
    where: ChurchIncomeWhereUniqueInput
    create: XOR<ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput>
  }

  export type ChurchIncomeCreateManyChurchIncomeCodeIdRelInputEnvelope = {
    data: ChurchIncomeCreateManyChurchIncomeCodeIdRelInput | ChurchIncomeCreateManyChurchIncomeCodeIdRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchIncomeHistoryCreateByRel?: UserCreateNestedOneWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: UserCreateNestedOneWithoutChurchIncomeHistoryUpdateByRelInput
  }

  export type ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeHistoryCreateOrConnectWithoutChurchIncomeCodeHistoryIdRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    create: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput>
  }

  export type ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInputEnvelope = {
    data: ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInput | ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutChurchIncomeCodeCreateByRelInput = {
    update: XOR<UserUpdateWithoutChurchIncomeCodeCreateByRelInput, UserUncheckedUpdateWithoutChurchIncomeCodeCreateByRelInput>
    create: XOR<UserCreateWithoutChurchIncomeCodeCreateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeCreateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchIncomeCodeCreateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchIncomeCodeCreateByRelInput, UserUncheckedUpdateWithoutChurchIncomeCodeCreateByRelInput>
  }

  export type UserUpdateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutChurchIncomeCodeUpdateByRelInput = {
    update: XOR<UserUpdateWithoutChurchIncomeCodeUpdateByRelInput, UserUncheckedUpdateWithoutChurchIncomeCodeUpdateByRelInput>
    create: XOR<UserCreateWithoutChurchIncomeCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchIncomeCodeUpdateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchIncomeCodeUpdateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchIncomeCodeUpdateByRelInput, UserUncheckedUpdateWithoutChurchIncomeCodeUpdateByRelInput>
  }

  export type UserUpdateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchIncomeUpsertWithWhereUniqueWithoutChurchIncomeCodeIdRelInput = {
    where: ChurchIncomeWhereUniqueInput
    update: XOR<ChurchIncomeUpdateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedUpdateWithoutChurchIncomeCodeIdRelInput>
    create: XOR<ChurchIncomeCreateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedCreateWithoutChurchIncomeCodeIdRelInput>
  }

  export type ChurchIncomeUpdateWithWhereUniqueWithoutChurchIncomeCodeIdRelInput = {
    where: ChurchIncomeWhereUniqueInput
    data: XOR<ChurchIncomeUpdateWithoutChurchIncomeCodeIdRelInput, ChurchIncomeUncheckedUpdateWithoutChurchIncomeCodeIdRelInput>
  }

  export type ChurchIncomeUpdateManyWithWhereWithoutChurchIncomeCodeIdRelInput = {
    where: ChurchIncomeScalarWhereInput
    data: XOR<ChurchIncomeUpdateManyMutationInput, ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCodeIdRelInput>
  }

  export type ChurchIncomeHistoryUpsertWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    update: XOR<ChurchIncomeHistoryUpdateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeCodeHistoryIdRelInput>
    create: XOR<ChurchIncomeHistoryCreateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedCreateWithoutChurchIncomeCodeHistoryIdRelInput>
  }

  export type ChurchIncomeHistoryUpdateWithWhereUniqueWithoutChurchIncomeCodeHistoryIdRelInput = {
    where: ChurchIncomeHistoryWhereUniqueInput
    data: XOR<ChurchIncomeHistoryUpdateWithoutChurchIncomeCodeHistoryIdRelInput, ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeCodeHistoryIdRelInput>
  }

  export type ChurchIncomeHistoryUpdateManyWithWhereWithoutChurchIncomeCodeHistoryIdRelInput = {
    where: ChurchIncomeHistoryScalarWhereInput
    data: XOR<ChurchIncomeHistoryUpdateManyMutationInput, ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeCodeHistoryIdRelInput>
  }

  export type ChurchSpendingCodeCreateWithoutChurchSpendingCodeIdRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    deleted?: boolean
    updatedAt?: Date | string
    churchSpendingCodeCreateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeUpdateByRelInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeIdRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    createBy?: bigint | number | null
    deleted?: boolean
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingCodeHistoryIdRelInput
  }

  export type ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeIdRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeIdRelInput>
  }

  export type UserCreateWithoutChurchSpendingCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchSpendingCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchSpendingCreateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchSpendingCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCreateByRelInput>
  }

  export type UserCreateWithoutChurchSpendingUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchSpendingUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchSpendingUpdateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchSpendingUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingUpdateByRelInput>
  }

  export type ChurchSpendingCodeUpsertWithoutChurchSpendingCodeIdRelInput = {
    update: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeIdRelInput>
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeIdRelInput>
    where?: ChurchSpendingCodeWhereInput
  }

  export type ChurchSpendingCodeUpdateToOneWithWhereWithoutChurchSpendingCodeIdRelInput = {
    where?: ChurchSpendingCodeWhereInput
    data: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeIdRelInput>
  }

  export type ChurchSpendingCodeUpdateWithoutChurchSpendingCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeCreateByRel?: UserUpdateOneWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: UserUpdateOneWithoutChurchSpendingCodeUpdateByRelNestedInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type UserUpsertWithoutChurchSpendingCreateByRelInput = {
    update: XOR<UserUpdateWithoutChurchSpendingCreateByRelInput, UserUncheckedUpdateWithoutChurchSpendingCreateByRelInput>
    create: XOR<UserCreateWithoutChurchSpendingCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCreateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchSpendingCreateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchSpendingCreateByRelInput, UserUncheckedUpdateWithoutChurchSpendingCreateByRelInput>
  }

  export type UserUpdateWithoutChurchSpendingCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchSpendingCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutChurchSpendingUpdateByRelInput = {
    update: XOR<UserUpdateWithoutChurchSpendingUpdateByRelInput, UserUncheckedUpdateWithoutChurchSpendingUpdateByRelInput>
    create: XOR<UserCreateWithoutChurchSpendingUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingUpdateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchSpendingUpdateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchSpendingUpdateByRelInput, UserUncheckedUpdateWithoutChurchSpendingUpdateByRelInput>
  }

  export type UserUpdateWithoutChurchSpendingUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchSpendingUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchSpendingCodeCreateWithoutChurchSpendingCodeHistoryIdRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    deleted?: boolean
    updatedAt?: Date | string
    churchSpendingCodeCreateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingCodeUpdateByRelInput
    churchSpendingCodeIdRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCodeIdRelInput
  }

  export type ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    createBy?: bigint | number | null
    deleted?: boolean
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCodeIdRelInput
  }

  export type ChurchSpendingCodeCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput = {
    where: ChurchSpendingCodeWhereUniqueInput
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput>
  }

  export type UserCreateWithoutChurchSpendingHistoryCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchSpendingHistoryCreateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchSpendingHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput>
  }

  export type UserCreateWithoutChurchSpendingHistoryUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchSpendingHistoryUpdateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchSpendingHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput>
  }

  export type ChurchSpendingCodeUpsertWithoutChurchSpendingCodeHistoryIdRelInput = {
    update: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeHistoryIdRelInput>
    create: XOR<ChurchSpendingCodeCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingCodeUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput>
    where?: ChurchSpendingCodeWhereInput
  }

  export type ChurchSpendingCodeUpdateToOneWithWhereWithoutChurchSpendingCodeHistoryIdRelInput = {
    where?: ChurchSpendingCodeWhereInput
    data: XOR<ChurchSpendingCodeUpdateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeHistoryIdRelInput>
  }

  export type ChurchSpendingCodeUpdateWithoutChurchSpendingCodeHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeCreateByRel?: UserUpdateOneWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: UserUpdateOneWithoutChurchSpendingCodeUpdateByRelNestedInput
    churchSpendingCodeIdRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
  }

  export type ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
  }

  export type UserUpsertWithoutChurchSpendingHistoryCreateByRelInput = {
    update: XOR<UserUpdateWithoutChurchSpendingHistoryCreateByRelInput, UserUncheckedUpdateWithoutChurchSpendingHistoryCreateByRelInput>
    create: XOR<UserCreateWithoutChurchSpendingHistoryCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryCreateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchSpendingHistoryCreateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchSpendingHistoryCreateByRelInput, UserUncheckedUpdateWithoutChurchSpendingHistoryCreateByRelInput>
  }

  export type UserUpdateWithoutChurchSpendingHistoryCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchSpendingHistoryCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutChurchSpendingHistoryUpdateByRelInput = {
    update: XOR<UserUpdateWithoutChurchSpendingHistoryUpdateByRelInput, UserUncheckedUpdateWithoutChurchSpendingHistoryUpdateByRelInput>
    create: XOR<UserCreateWithoutChurchSpendingHistoryUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingHistoryUpdateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchSpendingHistoryUpdateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchSpendingHistoryUpdateByRelInput, UserUncheckedUpdateWithoutChurchSpendingHistoryUpdateByRelInput>
  }

  export type UserUpdateWithoutChurchSpendingHistoryUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchSpendingHistoryUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
  }

  export type UserCreateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeUpdateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchSpendingCodeCreateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchSpendingCodeCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput>
  }

  export type UserCreateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    createdByRel?: UserCreateNestedOneWithoutSelfCreatedByRelInput
    selfCreatedByRel?: UserCreateNestedManyWithoutCreatedByRelInput
    updatedByRel?: UserCreateNestedOneWithoutSelfUpdatedByRelInput
    selfUpdatedByRel?: UserCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    userHistoryCreatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    selfCreatedByRel?: UserUncheckedCreateNestedManyWithoutCreatedByRelInput
    selfUpdatedByRel?: UserUncheckedCreateNestedManyWithoutUpdatedByRelInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeCreateByRelInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedCreateNestedManyWithoutChurchIncomeUpdateByRelInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeCreateByRelInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedCreateNestedManyWithoutChurchIncomeCodeUpdateByRelInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedCreateNestedManyWithoutChurchSpendingUpdateByRelInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedCreateNestedManyWithoutChurchSpendingCodeCreateByRelInput
    userHistoryCreatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryCreatedByRelInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryUpdatedByRelInput
    userHistoryIdRel?: UserHistoryUncheckedCreateNestedManyWithoutUserHistoryIdRelInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryCreateByRelInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedCreateNestedManyWithoutChurchIncomeHistoryUpdateByRelInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedCreateNestedManyWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type UserCreateOrConnectWithoutChurchSpendingCodeUpdateByRelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchSpendingCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput>
  }

  export type ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingCreateByRel?: UserCreateNestedOneWithoutChurchSpendingCreateByRelInput
    churchSpendingUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingUpdateByRelInput
  }

  export type ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingCreateOrConnectWithoutChurchSpendingCodeIdRelInput = {
    where: ChurchSpendingWhereUniqueInput
    create: XOR<ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput>
  }

  export type ChurchSpendingCreateManyChurchSpendingCodeIdRelInputEnvelope = {
    data: ChurchSpendingCreateManyChurchSpendingCodeIdRelInput | ChurchSpendingCreateManyChurchSpendingCodeIdRelInput[]
    skipDuplicates?: boolean
  }

  export type ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    churchSpendingHistoryCreateByRel?: UserCreateNestedOneWithoutChurchSpendingHistoryCreateByRelInput
    churchSpendingHistoryUpdateByRel?: UserCreateNestedOneWithoutChurchSpendingHistoryUpdateByRelInput
  }

  export type ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingHistoryCreateOrConnectWithoutChurchSpendingCodeHistoryIdRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    create: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput>
  }

  export type ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInputEnvelope = {
    data: ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInput | ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutChurchSpendingCodeCreateByRelInput = {
    update: XOR<UserUpdateWithoutChurchSpendingCodeCreateByRelInput, UserUncheckedUpdateWithoutChurchSpendingCodeCreateByRelInput>
    create: XOR<UserCreateWithoutChurchSpendingCodeCreateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeCreateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchSpendingCodeCreateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchSpendingCodeCreateByRelInput, UserUncheckedUpdateWithoutChurchSpendingCodeCreateByRelInput>
  }

  export type UserUpdateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUpsertWithoutChurchSpendingCodeUpdateByRelInput = {
    update: XOR<UserUpdateWithoutChurchSpendingCodeUpdateByRelInput, UserUncheckedUpdateWithoutChurchSpendingCodeUpdateByRelInput>
    create: XOR<UserCreateWithoutChurchSpendingCodeUpdateByRelInput, UserUncheckedCreateWithoutChurchSpendingCodeUpdateByRelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchSpendingCodeUpdateByRelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchSpendingCodeUpdateByRelInput, UserUncheckedUpdateWithoutChurchSpendingCodeUpdateByRelInput>
  }

  export type UserUpdateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchSpendingUpsertWithWhereUniqueWithoutChurchSpendingCodeIdRelInput = {
    where: ChurchSpendingWhereUniqueInput
    update: XOR<ChurchSpendingUpdateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedUpdateWithoutChurchSpendingCodeIdRelInput>
    create: XOR<ChurchSpendingCreateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedCreateWithoutChurchSpendingCodeIdRelInput>
  }

  export type ChurchSpendingUpdateWithWhereUniqueWithoutChurchSpendingCodeIdRelInput = {
    where: ChurchSpendingWhereUniqueInput
    data: XOR<ChurchSpendingUpdateWithoutChurchSpendingCodeIdRelInput, ChurchSpendingUncheckedUpdateWithoutChurchSpendingCodeIdRelInput>
  }

  export type ChurchSpendingUpdateManyWithWhereWithoutChurchSpendingCodeIdRelInput = {
    where: ChurchSpendingScalarWhereInput
    data: XOR<ChurchSpendingUpdateManyMutationInput, ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCodeIdRelInput>
  }

  export type ChurchSpendingHistoryUpsertWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    update: XOR<ChurchSpendingHistoryUpdateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingCodeHistoryIdRelInput>
    create: XOR<ChurchSpendingHistoryCreateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedCreateWithoutChurchSpendingCodeHistoryIdRelInput>
  }

  export type ChurchSpendingHistoryUpdateWithWhereUniqueWithoutChurchSpendingCodeHistoryIdRelInput = {
    where: ChurchSpendingHistoryWhereUniqueInput
    data: XOR<ChurchSpendingHistoryUpdateWithoutChurchSpendingCodeHistoryIdRelInput, ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingCodeHistoryIdRelInput>
  }

  export type ChurchSpendingHistoryUpdateManyWithWhereWithoutChurchSpendingCodeHistoryIdRelInput = {
    where: ChurchSpendingHistoryScalarWhereInput
    data: XOR<ChurchSpendingHistoryUpdateManyMutationInput, ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingCodeHistoryIdRelInput>
  }

  export type UserCreateManyCreatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type UserCreateManyUpdatedByRelInput = {
    id?: bigint | number
    userName: string
    fullName: string
    email: string
    password: string
    phoneNumber: string
    address: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchIncomeCreateManyChurchIncomeCreateByRelInput = {
    id?: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeCreateManyChurchIncomeUpdateByRelInput = {
    id?: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchIncomeCodeCreateManyChurchIncomeCodeCreateByRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeCodeCreateManyChurchIncomeCodeUpdateByRelInput = {
    id?: bigint | number
    incomeCodeName: string
    code: string
    description: string
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchSpendingCreateManyChurchSpendingCreateByRelInput = {
    id?: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingCreateManyChurchSpendingUpdateByRelInput = {
    id?: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchSpendingCodeCreateManyChurchSpendingCodeCreateByRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    deleted?: boolean
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingCodeCreateManyChurchSpendingCodeUpdateByRelInput = {
    id?: bigint | number
    spendingCodeName: string
    code: string
    description: string
    createAt?: Date | string
    createBy?: bigint | number | null
    deleted?: boolean
    updatedAt?: Date | string
  }

  export type UserHistoryCreateManyUserHistoryCreatedByRelInput = {
    id?: bigint | number
    userId: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryCreateManyUserHistoryUpdatedByRelInput = {
    id?: bigint | number
    userId: bigint | number
    createdAt?: Date | string
    createdBy?: bigint | number | null
    updatedAt?: Date | string
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryCreateManyUserHistoryIdRelInput = {
    id?: bigint | number
    createdAt?: Date | string
    createdBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
    deleted?: boolean
    oldData: JsonNullValueInput | InputJsonValue
    newData: JsonNullValueInput | InputJsonValue
  }

  export type ChurchIncomeHistoryCreateManyChurchIncomeHistoryCreateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeHistoryCreateManyChurchIncomeHistoryUpdateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    incomeCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type ChurchSpendingHistoryCreateManyChurchSpendingHistoryCreateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingHistoryCreateManyChurchSpendingHistoryUpdateByRelInput = {
    revId?: bigint | number
    id: bigint | number
    spendingCodeId: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    updatedByRel?: UserUpdateOneWithoutSelfUpdatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type UserUpdateWithoutUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByRel?: UserUpdateOneWithoutSelfCreatedByRelNestedInput
    selfCreatedByRel?: UserUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    selfCreatedByRel?: UserUncheckedUpdateManyWithoutCreatedByRelNestedInput
    selfUpdatedByRel?: UserUncheckedUpdateManyWithoutUpdatedByRelNestedInput
    churchIncomeCreateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelNestedInput
    churchIncomeCodeCreateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeUpdateByRel?: ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchSpendingCreateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelNestedInput
    churchSpendingCodeCreateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeUpdateByRel?: ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelNestedInput
    userHistoryCreatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelNestedInput
    churchSpendingHistoryCreateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeUpdateWithoutChurchIncomeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeIdRel?: ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeUpdateByRel?: UserUpdateOneWithoutChurchIncomeUpdateByRelNestedInput
  }

  export type ChurchIncomeUncheckedUpdateWithoutChurchIncomeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeUpdateWithoutChurchIncomeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeIdRel?: ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCreateByRel?: UserUpdateOneWithoutChurchIncomeCreateByRelNestedInput
  }

  export type ChurchIncomeUncheckedUpdateWithoutChurchIncomeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeCodeUpdateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeUpdateByRel?: UserUpdateOneWithoutChurchIncomeCodeUpdateByRelNestedInput
    churchIncomeCodeIdRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeCodeUpdateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeCreateByRel?: UserUpdateOneWithoutChurchIncomeCodeCreateByRelNestedInput
    churchIncomeCodeIdRel?: ChurchIncomeUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type ChurchIncomeCodeUncheckedUpdateWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeIdRel?: ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCodeIdRelNestedInput
    churchIncomeCodeHistoryIdRel?: ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeCodeHistoryIdRelNestedInput
  }

  export type ChurchIncomeCodeUncheckedUpdateManyWithoutChurchIncomeCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingUpdateWithoutChurchSpendingCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeIdRel?: ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingUpdateByRel?: UserUpdateOneWithoutChurchSpendingUpdateByRelNestedInput
  }

  export type ChurchSpendingUncheckedUpdateWithoutChurchSpendingCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingUpdateWithoutChurchSpendingUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeIdRel?: ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCreateByRel?: UserUpdateOneWithoutChurchSpendingCreateByRelNestedInput
  }

  export type ChurchSpendingUncheckedUpdateWithoutChurchSpendingUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingCodeUpdateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeUpdateByRel?: UserUpdateOneWithoutChurchSpendingCodeUpdateByRelNestedInput
    churchSpendingCodeIdRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeCreateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingCodeUpdateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeCreateByRel?: UserUpdateOneWithoutChurchSpendingCodeCreateByRelNestedInput
    churchSpendingCodeIdRel?: ChurchSpendingUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type ChurchSpendingCodeUncheckedUpdateWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeIdRel?: ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCodeIdRelNestedInput
    churchSpendingCodeHistoryIdRel?: ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingCodeHistoryIdRelNestedInput
  }

  export type ChurchSpendingCodeUncheckedUpdateManyWithoutChurchSpendingCodeUpdateByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeName?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserHistoryUpdateWithoutUserHistoryCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
    userHistoryUpdatedByRel?: UserUpdateOneWithoutUserHistoryUpdatedByRelNestedInput
    userHistoryIdRel?: UserUpdateOneRequiredWithoutUserHistoryIdRelNestedInput
  }

  export type UserHistoryUncheckedUpdateWithoutUserHistoryCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUncheckedUpdateManyWithoutUserHistoryCreatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUpdateWithoutUserHistoryUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
    userHistoryCreatedByRel?: UserUpdateOneWithoutUserHistoryCreatedByRelNestedInput
    userHistoryIdRel?: UserUpdateOneRequiredWithoutUserHistoryIdRelNestedInput
  }

  export type UserHistoryUncheckedUpdateWithoutUserHistoryUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUncheckedUpdateManyWithoutUserHistoryUpdatedByRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUpdateWithoutUserHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
    userHistoryCreatedByRel?: UserUpdateOneWithoutUserHistoryCreatedByRelNestedInput
    userHistoryUpdatedByRel?: UserUpdateOneWithoutUserHistoryUpdatedByRelNestedInput
  }

  export type UserHistoryUncheckedUpdateWithoutUserHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type UserHistoryUncheckedUpdateManyWithoutUserHistoryIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    oldData?: JsonNullValueInput | InputJsonValue
    newData?: JsonNullValueInput | InputJsonValue
  }

  export type ChurchIncomeHistoryUpdateWithoutChurchIncomeHistoryCreateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeHistoryIdRel?: ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeHistoryIdRelNestedInput
    churchIncomeHistoryUpdateByRel?: UserUpdateOneWithoutChurchIncomeHistoryUpdateByRelNestedInput
  }

  export type ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeHistoryCreateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryCreateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeHistoryUpdateWithoutChurchIncomeHistoryUpdateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCodeHistoryIdRel?: ChurchIncomeCodeUpdateOneRequiredWithoutChurchIncomeCodeHistoryIdRelNestedInput
    churchIncomeHistoryCreateByRel?: UserUpdateOneWithoutChurchIncomeHistoryCreateByRelNestedInput
  }

  export type ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeHistoryUpdateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeHistoryUpdateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    incomeCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingHistoryUpdateWithoutChurchSpendingHistoryCreateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeHistoryIdRel?: ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeHistoryIdRelNestedInput
    churchSpendingHistoryUpdateByRel?: UserUpdateOneWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingHistoryCreateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryCreateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingHistoryUpdateWithoutChurchSpendingHistoryUpdateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCodeHistoryIdRel?: ChurchSpendingCodeUpdateOneRequiredWithoutChurchSpendingCodeHistoryIdRelNestedInput
    churchSpendingHistoryCreateByRel?: UserUpdateOneWithoutChurchSpendingHistoryCreateByRelNestedInput
  }

  export type ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingHistoryUpdateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingHistoryUpdateByRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    spendingCodeId?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchIncomeCreateManyChurchIncomeCodeIdRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeHistoryCreateManyChurchIncomeCodeHistoryIdRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchIncomeUpdateWithoutChurchIncomeCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeCreateByRel?: UserUpdateOneWithoutChurchIncomeCreateByRelNestedInput
    churchIncomeUpdateByRel?: UserUpdateOneWithoutChurchIncomeUpdateByRelNestedInput
  }

  export type ChurchIncomeUncheckedUpdateWithoutChurchIncomeCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeUncheckedUpdateManyWithoutChurchIncomeCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeHistoryUpdateWithoutChurchIncomeCodeHistoryIdRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchIncomeHistoryCreateByRel?: UserUpdateOneWithoutChurchIncomeHistoryCreateByRelNestedInput
    churchIncomeHistoryUpdateByRel?: UserUpdateOneWithoutChurchIncomeHistoryUpdateByRelNestedInput
  }

  export type ChurchIncomeHistoryUncheckedUpdateWithoutChurchIncomeCodeHistoryIdRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchIncomeHistoryUncheckedUpdateManyWithoutChurchIncomeCodeHistoryIdRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingCreateManyChurchSpendingCodeIdRelInput = {
    id?: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill?: string | null
    billNumber?: string | null
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingHistoryCreateManyChurchSpendingCodeHistoryIdRelInput = {
    revId?: bigint | number
    id: bigint | number
    detail?: string | null
    funds: bigint | number
    date: Date | string
    bill: string
    billNumber: string
    fundsType: $Enums.Type
    deleted?: boolean
    createAt?: Date | string
    createBy?: bigint | number | null
    updatedAt?: Date | string
    updatedBy?: bigint | number | null
  }

  export type ChurchSpendingUpdateWithoutChurchSpendingCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingCreateByRel?: UserUpdateOneWithoutChurchSpendingCreateByRelNestedInput
    churchSpendingUpdateByRel?: UserUpdateOneWithoutChurchSpendingUpdateByRelNestedInput
  }

  export type ChurchSpendingUncheckedUpdateWithoutChurchSpendingCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingUncheckedUpdateManyWithoutChurchSpendingCodeIdRelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: NullableStringFieldUpdateOperationsInput | string | null
    billNumber?: NullableStringFieldUpdateOperationsInput | string | null
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingHistoryUpdateWithoutChurchSpendingCodeHistoryIdRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchSpendingHistoryCreateByRel?: UserUpdateOneWithoutChurchSpendingHistoryCreateByRelNestedInput
    churchSpendingHistoryUpdateByRel?: UserUpdateOneWithoutChurchSpendingHistoryUpdateByRelNestedInput
  }

  export type ChurchSpendingHistoryUncheckedUpdateWithoutChurchSpendingCodeHistoryIdRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ChurchSpendingHistoryUncheckedUpdateManyWithoutChurchSpendingCodeHistoryIdRelInput = {
    revId?: BigIntFieldUpdateOperationsInput | bigint | number
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    funds?: BigIntFieldUpdateOperationsInput | bigint | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill?: StringFieldUpdateOperationsInput | string
    billNumber?: StringFieldUpdateOperationsInput | string
    fundsType?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}